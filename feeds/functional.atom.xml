<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/functional.atom.xml" rel="self"></link><id>/</id><updated>2014-10-28T11:20:00+08:00</updated><entry><title>[FP] predicate</title><link href="/posts/2014/10/predicate/" rel="alternate"></link><updated>2014-10-28T11:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-28:posts/2014/10/predicate/</id><summary type="html">&lt;p&gt;short :&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;predicate&lt;/strong&gt; is a box that takes an argument and returns a &lt;strong&gt;Boolean value&lt;/strong&gt;. For example, &amp;quot;x -&amp;gt; x is even&amp;quot;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a box that takes an argument and returns a &lt;strong&gt;value&lt;/strong&gt;. For example, &amp;quot;x -&amp;gt; x*x&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="predicate-in-natural-language"&gt;
&lt;h2&gt;Predicate (謂語) in natural language&lt;/h2&gt;
&lt;p&gt;Subject + Predicate : The dog + barks.&lt;/p&gt;
&lt;p&gt;The predicate identifies and describes the action of the sentence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="predicate-in-functional"&gt;
&lt;h2&gt;Predicate in Functional&lt;/h2&gt;
&lt;p&gt;A predicate is a function that returns the &lt;strong&gt;Boolean value&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-python"&gt;
&lt;h2&gt;In Python&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/howto/functional.html"&gt;Python - Functional Programming How To&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;filter(predicate, iter)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c"&gt;# there are more in iterools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="in-prolog"&gt;
&lt;h2&gt;In Prolog&lt;/h2&gt;
&lt;p&gt;Prolog's BNF&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;program&amp;gt; ::= &amp;lt;clause list&amp;gt; &amp;lt;query&amp;gt; | &amp;lt;query&amp;gt;
&amp;lt;clause list&amp;gt; ::= &amp;lt;clause&amp;gt; | &amp;lt;clause list&amp;gt; &amp;lt;clause&amp;gt;
&amp;lt;clause&amp;gt; ::= &amp;lt;predicate&amp;gt; . | &amp;lt;predicate&amp;gt; :- &amp;lt;predicate list&amp;gt;.
&amp;lt;predicate list&amp;gt; ::= &amp;lt;predicate&amp;gt; | &amp;lt;predicate list&amp;gt; , &amp;lt;predicate&amp;gt;
&amp;lt;predicate&amp;gt; ::= &amp;lt;atom&amp;gt; | &amp;lt;atom&amp;gt; ( &amp;lt;term list&amp;gt; )
&amp;lt;term list&amp;gt; ::= &amp;lt;term&amp;gt; | &amp;lt;term list&amp;gt; , &amp;lt;term&amp;gt;
&amp;lt;term&amp;gt; ::= &amp;lt;numeral&amp;gt; | &amp;lt;atom&amp;gt; | &amp;lt;variable&amp;gt; | &amp;lt;structure&amp;gt;
&amp;lt;structure&amp;gt; ::= &amp;lt;atom&amp;gt; ( &amp;lt;term list&amp;gt; )
&amp;lt;query&amp;gt; ::= ?- &amp;lt;predicate list&amp;gt;.
&amp;lt;atom&amp;gt; ::= &amp;lt;small atom&amp;gt; | &amp;#39; &amp;lt;string&amp;gt; &amp;#39;
&amp;lt;small atom&amp;gt; ::= &amp;lt;lowercase letter&amp;gt; | &amp;lt;small atom&amp;gt; &amp;lt;character&amp;gt;
&amp;lt;variable&amp;gt; ::= &amp;lt;uppercase letter&amp;gt; | &amp;lt;variable&amp;gt; &amp;lt;character&amp;gt;
&amp;lt;lowercase letter&amp;gt; ::= a | b | c | ... | x | y | z
&amp;lt;uppercase letter&amp;gt; ::= A | B | C | ... | X | Y | Z | _
&amp;lt;numeral&amp;gt; ::= &amp;lt;digit&amp;gt; | &amp;lt;numeral&amp;gt; &amp;lt;digit&amp;gt;
&amp;lt;digit&amp;gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
&amp;lt;character&amp;gt; ::= &amp;lt;lowercase letter&amp;gt; | &amp;lt;uppercase letter&amp;gt; | &amp;lt;digit&amp;gt; | &amp;lt;special&amp;gt;
&amp;lt;special&amp;gt; ::= + | - | * | / | \ | ^ | ~ | : | . | ? | | # | $ | &amp;amp;
&amp;lt;string&amp;gt; ::= &amp;lt;character&amp;gt; | &amp;lt;string&amp;gt; &amp;lt;character&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prolog has two types of &lt;strong&gt;clause (子句)&lt;/strong&gt; : (clause = facts | rules)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;facts&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;tom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;rules&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;tom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:-&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;tom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both facts and rules are composed of predicates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Functional_predicate"&gt;Functional predicate - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Prolog"&gt;Prolog - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="funcitonal"></category></entry><entry><title>[FP] Referential Transparency</title><link href="/posts/2014/10/referential-transparency/" rel="alternate"></link><updated>2014-10-26T11:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-26:posts/2014/10/referential-transparency/</id><summary type="html">&lt;p&gt;Short : &lt;strong&gt;no side effect&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29"&gt;Referential Transparency - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Referential Transparency means a expression won't change the behavior of a program&lt;/p&gt;
&lt;p&gt;For example :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C code&lt;/span&gt;

&lt;span class="c1"&gt;// this is not referential transparency&lt;/span&gt;
&lt;span class="c1"&gt;// it&amp;#39;s referential opaqueness&lt;/span&gt;
&lt;span class="c1"&gt;// function will modify the variable outside the function&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// this is referential transparency&lt;/span&gt;
&lt;span class="c1"&gt;// function won&amp;#39;t modify the variable outside the function&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if a function is referential transparency, then it can be optimized by many ways,
ex:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;memoization&lt;/li&gt;
&lt;li&gt;common subexpression elimination&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;parallelization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;only referentially transparent functions can be memoized (cache the results)&lt;/p&gt;
&lt;p&gt;a referentially transparent expression is &lt;strong&gt;deterministic&lt;/strong&gt;
(the same results with the same input)&lt;/p&gt;
</summary><category term="funcitonal"></category></entry></feed>