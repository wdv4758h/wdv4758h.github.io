<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/gc.atom.xml" rel="self"></link><id>/</id><updated>2014-09-26T12:27:00+08:00</updated><entry><title>Generational Garbage Collection for SpiderMonkey</title><link href="/posts/2014/09/ggc-spidermonkey/" rel="alternate"></link><updated>2014-09-26T12:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/ggc-spidermonkey/</id><summary type="html">&lt;p&gt;原文章 : &lt;a class="reference external" href="https://hacks.mozilla.org/2014/09/generational-garbage-collection-in-firefox/"&gt;Generational Garbage Collection in Firefox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天看到上面那篇 SpiderMonkey 的 Generational Garbage Collection 的文章，
就讀一讀理解一下並做些紀錄&lt;/p&gt;
&lt;div class="section" id="generational-garbage-collection"&gt;
&lt;h2&gt;Generational garbage collection&lt;/h2&gt;
&lt;p&gt;Generational garbage collection 的核心觀念就是 &amp;quot;大多數的物件的生命都很短&amp;quot;，
所以就修改原本的 GC 設計，依照不同的存在時間有不同的處理方式，
對於 Tracing 的 GC 會需要去掃過物件來檢查是否有物件已經成為 Garbage，
當程式會製造出大量的物件時，檢查的時間就會上升，這時如果用已經存在的時間來區分，
而做不同的處理方式時，多數的短期物件就可以更快的被回收，也不必頻繁檢查會長期存在的物件。&lt;/p&gt;
&lt;p&gt;原文章裡的 SpiderMonkey 利用了這種方式來讓 temporary objects 的 penalty 下降&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nursery-tenured"&gt;
&lt;h2&gt;Nursery &amp;amp; Tenured&lt;/h2&gt;
&lt;p&gt;多數的 objects 都會 allocate 到一個叫做 Nursery 的 memory region，
當 Nursery 滿的時候，只檢查 Nursery 裡的 objects，此時多數的 short-lived temporary objects 就會被清掉，
而這樣的檢查相對於原本 (檢查全部的 objects) 也來的快&lt;/p&gt;
&lt;p&gt;此時，依然存活的 objects 就會被放到 Tenured region&lt;/p&gt;
&lt;p&gt;Tenured heap 仍然會回收 grabage，但是頻率會比 Nursery 來的低&lt;/p&gt;
&lt;p&gt;最終然會需要原整的 GC，但是頻率也會比 Nursery GC 來的低&lt;/p&gt;
&lt;p&gt;所以就分成下面這種情況&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="14%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Garbage Collection&lt;/th&gt;
&lt;th class="head"&gt;Scan Place&lt;/th&gt;
&lt;th class="head"&gt;frequency&lt;/th&gt;
&lt;th class="head"&gt;speed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;minor GCs&lt;/td&gt;
&lt;td&gt;Nursery&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;fast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;major GCs&lt;/td&gt;
&lt;td&gt;full heap&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;slow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="68%" /&gt;
&lt;col width="32%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;memory region&lt;/th&gt;
&lt;th class="head"&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Nursery&lt;/td&gt;
&lt;td&gt;young&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tenured&lt;/td&gt;
&lt;td&gt;old&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Tenured object 裡面可能有指向 Nursery object 的資料
(Nursery objects 因為某些 Tenured objects 而持續 alive)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;解法一&lt;/h3&gt;
&lt;p&gt;掃過整個 Tenured heap 來找出指到 Nursery objects 的 pointer，
但是這麼做的話就違背了 GGC 的設計本意，所以需要更 cheap 的解決方案&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;解法二&lt;/h3&gt;
&lt;p&gt;先注意到，在 heap graph 中 Tenured 指向 Nursery 的 edges 不會存在很久，
因為接下來 minor GC 就會把 Nursery 中的 survivors 移到 Tenured heap&lt;/p&gt;
&lt;p&gt;所以我們在意的是從上次 minor/major GC 後，有更動過的 Tenured objects，
而這些 objects 的數量相對來說就會比較少&lt;/p&gt;
&lt;p&gt;因此我們做的是在更動 Tenured objects 時，檢查是否有 Nursery pointers，
如果有的話就把這些 cross-generational edges 紀錄到 &lt;strong&gt;store buffer&lt;/strong&gt; ，
這樣的事情稱為 write barrier&lt;/p&gt;
&lt;p&gt;在 minor GC 時，我們就跑過一遍 store buffer 裡的資料並且把裡面的 Nursery objects 標記為存在&lt;/p&gt;
&lt;p&gt;(edge 的來源都需要被使用，因為當 Nursery objects 被標記為存在之後，將會移往 Tenured area，
所以原本的 Tenured (裡面有指向 Nursery 的 pointer) 也需要被 update&lt;/p&gt;
&lt;p&gt;minor GC 需要的執行時間決定於新 cross-generational edges 和 Nursery 裡的 objects 數量，
當然，追蹤 store buffer records 或是單純的檢查是否要新增 record 都會讓 normal heap access 有些許的效能損失，
所以某些 code 可能在 GGC 裡會變慢一些&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="gc"></category></entry></feed>