<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/misc.atom.xml" rel="self"></link><id>/</id><updated>2014-12-01T02:38:00+08:00</updated><entry><title>[JCConf] OpenJDK vs. Dalvik/ART virtual machine</title><link href="/posts/2014/12/openjdk-vs-dalvik-and-art-vm/" rel="alternate"></link><updated>2014-12-01T02:38:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-01:posts/2014/12/openjdk-vs-dalvik-and-art-vm/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://jcconf.tw/openjdk-vs-dalvik.html"&gt;JCConf 官網連結 (有 Video)&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="preface"&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這裡不提&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;JVM tuning&lt;/li&gt;
&lt;li&gt;JNI, GC, invokedynamic&lt;/li&gt;
&lt;li&gt;Production tweaking&lt;/li&gt;
&lt;li&gt;Android Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="content"&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
                                                   +----------------+
                                                   | CLDC-HI (Java) |
                                                   +----------------+
                                                           ^
                                                           |
+----------------+  +---------------------------+  +-------------------+
| Self VM (Self) |-&amp;gt;| Strongtalk VM (Smalltalk) |-&amp;gt;| HotSpot VM (Java) |
+----------------+  +---------------------------+  +-------------------+
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |                 +-----------------+
        |                          ---------------&amp;gt;  | V8 (Javascript) |
        ------------------------------------------&amp;gt;  +-----------------+
&lt;/pre&gt;
&lt;div class="section" id="jit"&gt;
&lt;h3&gt;JIT&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compiled when needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mixed-mode"&gt;
&lt;h3&gt;Mixed-Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Interpreted&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Bytecode-walking&lt;/li&gt;
&lt;li&gt;Artificial stack machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Compiled&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Direct native operations&lt;/li&gt;
&lt;li&gt;Native register machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling"&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Gather data about code while interpreting&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Invariants (types, constants, nulls)&lt;/li&gt;
&lt;li&gt;Statistics (branches, calls)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimizations"&gt;
&lt;h3&gt;Optimizations&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Method inlining&lt;/li&gt;
&lt;li&gt;Loop unrolling&lt;/li&gt;
&lt;li&gt;Lock coarsening/eliding&lt;/li&gt;
&lt;li&gt;Dead code elimination&lt;/li&gt;
&lt;li&gt;Duplicate code elimination&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Escape_analysis"&gt;Escape analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hotspot"&gt;
&lt;h3&gt;Hotspot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;client mode (C1) inlines, less aggressive&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Fewer opportunities to optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;server mode (C2) inlines aggressively&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Based on richer runtime profiling&lt;/li&gt;
&lt;li&gt;Profile until 10k calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Tiered&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Level 0 = Interpreter&lt;/li&gt;
&lt;li&gt;Level 1~3 = C1&lt;/li&gt;
&lt;li&gt;Level 4 = C2&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="from-interpreter-to-compiler"&gt;
&lt;h3&gt;from Interpreter to Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Bytecode interpreter&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;switch-threading&lt;/li&gt;
&lt;li&gt;indirect-threading&lt;/li&gt;
&lt;li&gt;token-threading&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-openjdk"&gt;
&lt;h3&gt;Summary : OpenJDK&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-dalvik-vm"&gt;
&lt;h3&gt;Introduction to Dalvik VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;因為硬體限制，不能像 HotSpot 一樣做那麼多優化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Dalvik 是 Register-based 的 VM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dalvik Executable (DEX)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;convert tool : dx&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Optimizing Dispatch&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;selective inlining
+ 打開 Java 程式執行的時候，CPU 就是不知道在忙什麼
+ 只是個印出 Hello World 的程式，發現 CPU 有點忙&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;dexopt : Instruction Rewritten&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="libart-android-runtime-library"&gt;
&lt;h3&gt;libART (Android RunTime Library)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Use Ahead-Of-Time (AOT) scheme instead of JIT&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Precompile Dalvik Bytecode into machine language during installation&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hotspot 和 Dalvik 完全不同 codebase，但設計原理很像，Hotspot 實作比較完整，Dalvik 有很多先天限制&lt;/li&gt;
&lt;li&gt;Android L 啟動時間變更久 (重新 scan bytecode 來生成 machine code)&lt;/li&gt;
&lt;li&gt;要兼顧效能和啟動時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Java"></category><category term="OpenJDK"></category><category term="Dalvik"></category><category term="ART"></category><category term="VM"></category></entry><entry><title>Arch Linux upgrade (11/11)</title><link href="/posts/2014/11/archlinux-upgrade-2014-11-11/" rel="alternate"></link><updated>2014-11-12T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-12:posts/2014/11/archlinux-upgrade-2014-11-11/</id><summary type="html">&lt;p&gt;It has been a while since last time I upgrade my notebook,
now I upgrade many software in my notebook including the Linux Kernel,
everything works well after upgrade :)&lt;/p&gt;
&lt;p&gt;I love rolling release :P&lt;/p&gt;
</summary><category term="linux"></category></entry><entry><title>[WIP][Software Testing] Intro.</title><link href="/posts/2014/11/software-testing-intro/" rel="alternate"></link><updated>2014-11-10T01:17:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/software-testing-intro/</id><summary type="html">&lt;p&gt;Note: &lt;strong&gt;本篇仍在未完成狀態&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.cs.nctu.edu.tw/~skhuang/st2014/"&gt;課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期中考: 第 5,6,7,8,9 章 (boundary value, equivalence class, decision table, path testing, data flow testing)&lt;/p&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro.&lt;/h2&gt;
&lt;div class="section" id="white-black"&gt;
&lt;h3&gt;white &amp;amp; black&lt;/h3&gt;
&lt;p&gt;測試大概可以分成 &lt;strong&gt;白箱測試 (white-box testing)&lt;/strong&gt; 與 &lt;strong&gt;黑箱測試 (black-box testing)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;white-box testing 又可以稱為 &lt;strong&gt;透明箱測試 (glass box testing)&lt;/strong&gt;，
因為可以看到內部結構，因此又稱為 &lt;strong&gt;結構測試 (structural testing)&lt;/strong&gt; 或 &lt;strong&gt;邏輯驅動測試 (logic-driven testing)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-case-adequacy-criteria"&gt;
&lt;h3&gt;test case adequacy criteria&lt;/h3&gt;
&lt;p&gt;test case adequacy criteria 討論的是 &amp;quot;需要多少的測試才足夠&amp;quot;，
這可以由涵蓋的 control-flow &amp;amp; data-flow 比例來衡量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;control-flow coverage (測量可以經過多少 execution path)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;statement coverage&lt;/li&gt;
&lt;li&gt;branch coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;data-flow coverage (definition &amp;amp; use &amp;amp; kill)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;all-du-paths (definition &amp;amp; use)&lt;/li&gt;
&lt;li&gt;all-uses&lt;/li&gt;
&lt;li&gt;all-defs
+ 如果每條 variable 的 dc-paths 都包含的話&lt;/li&gt;
&lt;li&gt;all-c-uses (computation)&lt;/li&gt;
&lt;li&gt;all-p-uses (predicate)&lt;/li&gt;
&lt;li&gt;all-c-uses/some-p-uses&lt;/li&gt;
&lt;li&gt;all-p-uses/some-c-uses&lt;/li&gt;
&lt;li&gt;dc-paths (definition &amp;amp; clear)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;test case 難寫通常也代表著程式太複雜，因此要降低結構複雜度，再來是避免 non-determinism&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Rapps-Weyuker hierarchy of data flow coverage metrics :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
                    +-----------+
                    | All-Paths |
                    +-----------+
                        |
                    +--------------+
                    | All-DU-Paths |
                    +--------------+
                        |
                    +----------+
                    | All-Uses |
                    +----------+
                        |
                        |
         |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
         |                              |
+------------------------+      +------------------------+
| All C-Uses some P-Uses |      | All P-Uses some C-Uses |
+------------------------+      +------------------------+
                                        |
                                        |
                        |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
                        |                        |
                    +----------+            +------------+
                    | All-Defs |            | All P-Uses |
                    +----------+            +------------+
                                                 |
                                            +-----------+
                                            | All Edges |
                                            +-----------+
                                                 |
                                            +-----------+
                                            | All Nodes |
                                            +-----------+
&lt;/pre&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="87%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;P-use&lt;/td&gt;
&lt;td&gt;use in predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-use&lt;/td&gt;
&lt;td&gt;use in computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;O-use&lt;/td&gt;
&lt;td&gt;use for output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;L-use&lt;/td&gt;
&lt;td&gt;use for location (pointers, subscripts)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;I-use&lt;/td&gt;
&lt;td&gt;iteration (internal counters, loop indices)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;I-def&lt;/td&gt;
&lt;td&gt;defined by input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A-def&lt;/td&gt;
&lt;td&gt;defined by assignment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Program_slicing"&gt;Wikipedia - Program Slicing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/romanofski/programslice"&gt;https://github.com/romanofski/programslice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects"&gt;http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Spyder&lt;/td&gt;
&lt;td&gt;ANSI C&lt;/td&gt;
&lt;td&gt;Dynamic&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://spaf.cerias.purdue.edu/Students/spyder.html"&gt;http://spaf.cerias.purdue.edu/Students/spyder.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Unravel&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CodeSonar&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Indus/Kaveri&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;JSlice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SeeSlice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Programslice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-to-decision-path-dd-path"&gt;
&lt;h3&gt;decision-to-decision path (DD-path)&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="coverage-py"&gt;
&lt;h3&gt;coverage.py&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;coverage report &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;coverageg report -m

Name    Stmts   Miss  Cover   Missing
-------------------------------------
hw1        &lt;span class="m"&gt;58&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    97%   49-50
&lt;span class="nb"&gt;test       &lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
-------------------------------------
TOTAL      &lt;span class="m"&gt;79&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    97%
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch5-boundary-value-testing"&gt;
&lt;h2&gt;Ch5 - Boundary Value Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1m05eRr-mqSQIrOb6V3rDLxb3Rtj8gO5CkxphlGSv06I/edit#slide=id.g3a0892a38_030"&gt;Ch5 課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch6-equivalence-class-testing"&gt;
&lt;h2&gt;Ch6 - Equivalence Class Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;weak normal&lt;/li&gt;
&lt;li&gt;strong normal&lt;/li&gt;
&lt;li&gt;weak robust&lt;/li&gt;
&lt;li&gt;strong robust&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch7-decision-table-based-testing"&gt;
&lt;h2&gt;Ch7 - Decision Table-based Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1zUOofTArt4Q-APf-Ne3kE_JUt5gXZFzQTIqBL0VOJqA/edit#slide=id.g4821ca451_016"&gt;CH7 課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch8-path-testing"&gt;
&lt;h2&gt;Ch8 - Path Testing&lt;/h2&gt;
&lt;div class="section" id="program-graphs"&gt;
&lt;h3&gt;Program Graphs&lt;/h3&gt;
&lt;p&gt;用 imperative 寫出來的程式的 program graphs 會是&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;directed graph&lt;/li&gt;
&lt;li&gt;nodes are statement fragements&lt;/li&gt;
&lt;li&gt;edges are flow of control&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dd-paths"&gt;
&lt;h3&gt;DD-Paths&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="test-coverage-metrics"&gt;
&lt;h3&gt;Test Coverage Metrics&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;node coverage&lt;/li&gt;
&lt;li&gt;edge coverage&lt;/li&gt;
&lt;li&gt;chain coverage&lt;/li&gt;
&lt;li&gt;path coverage&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/ned/coveragepy"&gt;https://bitbucket.org/ned/coveragepy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="miller-s-coverage-metrics"&gt;
&lt;h3&gt;Miller's Coverage Metrics&lt;/h3&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-178b"&gt;
&lt;h3&gt;DO-178B&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch9-data-flow-testing"&gt;
&lt;h2&gt;Ch9 - Data Flow Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define/Use Testing&lt;/li&gt;
&lt;li&gt;Slice-Based Testing&lt;/li&gt;
&lt;li&gt;Program Slicing Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重點: 變數在哪裡拿到 values、在哪裡被使用&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;unifying structure of &lt;strong&gt;test coverage&lt;/strong&gt; metrics&lt;/li&gt;
&lt;li&gt;program slice (1979 - Mark Weiser)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="define-reference-anomalies"&gt;
&lt;h3&gt;define/reference anomalies&lt;/h3&gt;
&lt;p&gt;檢查以下 issue&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;只有定義但沒有被使用的變數&lt;/li&gt;
&lt;li&gt;變數未定義就使用&lt;/li&gt;
&lt;li&gt;變數定義了多次&lt;/li&gt;
&lt;li&gt;變數在使用之前就被 deallocate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-node"&gt;
&lt;h3&gt;defining node&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="usage-node"&gt;
&lt;h3&gt;usage node&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="p-use-c-use"&gt;
&lt;h3&gt;P-use &amp;amp; C-use&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://teddy-chen-tw.blogspot.tw/2014/06/blog-post.html"&gt;白箱測試與黑箱測試（上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="testing"></category></entry><entry><title>[WIP][Psycho] Psychology Intro.</title><link href="/posts/2014/11/psycho-intro/" rel="alternate"></link><updated>2014-11-10T01:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/psycho-intro/</id><summary type="html">&lt;div class="section" id="ch1-psychology-and-life"&gt;
&lt;h2&gt;Ch1 - Psychology and Life&lt;/h2&gt;
&lt;p&gt;Psychology 研究的是 &lt;strong&gt;個人行為和心智歷程&lt;/strong&gt; (behavior of individuals and their mental processes)&lt;/p&gt;
&lt;p&gt;Scientific method : 蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括)&lt;/p&gt;
&lt;p&gt;Behavior : 生物依照環境而產生的可觀察的行為&lt;/p&gt;
&lt;p&gt;描述 =&amp;gt; 解釋 =&amp;gt; 預測 =&amp;gt; 控制&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="35%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;behavioral data&lt;/td&gt;
&lt;td&gt;reports of observations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;explanations&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Internal factors&lt;/li&gt;
&lt;li&gt;External factors&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;predictions&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Causal Prediction (因果預測)&lt;/li&gt;
&lt;li&gt;Scientific Prediction&lt;ul&gt;
&lt;li&gt;由分析結果來判斷關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Interventions (介入)&lt;ul&gt;
&lt;li&gt;控制行為發生與否&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="psychology-s-historical-foundations"&gt;
&lt;h3&gt;Psychology's Historical Foundations&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="53%" /&gt;
&lt;col width="14%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Hermann Ebbinghaus&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;早期的實驗心理學家之一&lt;/li&gt;
&lt;li&gt;遺忘曲線&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;先天論者 vs. 經驗論者
(nativist vs. empiricist)&lt;/td&gt;
&lt;td&gt;Plato (柏拉圖) and Aristotle (亞里斯多德)
opposing views of how mind works&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;John Locke 洛克&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;empiricist view (經驗主義)&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;1632-1704&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Immanuel Kant 康德&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;nativist view&lt;/li&gt;
&lt;li&gt;心理會影響對世界的感受&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;1724-1804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;René Descartes (笛卡兒)&lt;/td&gt;
&lt;td&gt;人類可以用科學來理解&lt;/td&gt;
&lt;td&gt;1596-1650&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wilhelm Wundt&lt;/td&gt;
&lt;td&gt;First formal experimental psychology lab&lt;/td&gt;
&lt;td&gt;1879&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Edward Titchener&lt;/td&gt;
&lt;td&gt;建立美國早期的 psychology labs 之一&lt;/td&gt;
&lt;td&gt;1892&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;William James&lt;/td&gt;
&lt;td&gt;Principles of Psychology&lt;/td&gt;
&lt;td&gt;1890&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="comfort-food"&gt;
&lt;h3&gt;comfort food&lt;/h3&gt;
&lt;p&gt;吃下去後可以撫慰心情和精神的食物&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evolution-of-modern-psychology"&gt;
&lt;h3&gt;Evolution of Modern Psychology&lt;/h3&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;結構論學派&lt;/h4&gt;
&lt;p&gt;School of Structuralism&lt;/p&gt;
&lt;p&gt;創始人為德國心理學家馮德（W. Wundt）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;心理學是從個體本身的觀點研究其自覺的經驗。因此心理學的主要方法就是 &lt;strong&gt;內省法&lt;/strong&gt; 或自省法&lt;/li&gt;
&lt;li&gt;人類的意識經驗中包括三大元素，即感覺、意像、與感情&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;功能論學派&lt;/h4&gt;
&lt;p&gt;School of Functionalism&lt;/p&gt;
&lt;p&gt;美國心理學家 J. James 與 J. Dewey 二人首創&lt;/p&gt;
&lt;p&gt;受達爾文 (C. Darwin) 進化論中「適者生存」的理念&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;完形心理學&lt;/h4&gt;
&lt;p&gt;Gestalt Psychology (中文音義變成 &amp;quot;格式塔&amp;quot; ...)&lt;/p&gt;
&lt;p&gt;Gestalt 源自德文，意思是 &amp;quot;形狀&amp;quot;，意解為 &amp;quot;看清事物&amp;quot;&lt;/p&gt;
&lt;p&gt;Gestalt Psychology 的重要概念是 &lt;strong&gt;整體&lt;/strong&gt; (並非各個部份的總和)，興起於 20 世紀初的德國，
由 Kurt Koffka, Max Wertheimer, and Wolfgang Köhler 創立，
主要是在研究人類 &lt;strong&gt;知覺與意識&lt;/strong&gt; 上的問題，
反對結構學派 (Structuralism) 以自我觀察、自我描述等內省的方法分析意識經驗的成份，
也反對行為主義心理學派 (Behaviorism) 過份強調動物實驗，完全排斥心智歷程的作法&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;心理學七種取向&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="57%" /&gt;
&lt;col width="27%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Perspective&lt;/th&gt;
&lt;th class="head"&gt;Focus of Study&lt;/th&gt;
&lt;th class="head"&gt;Primary Research Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Psychodynamic&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Unconscious drives&lt;/li&gt;
&lt;li&gt;Conflicts&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Behaviorist&lt;/td&gt;
&lt;td&gt;Specific overt responses&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Humanistic&lt;/td&gt;
&lt;td&gt;Human expreience and potentials&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cognitive&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Mental processes&lt;/li&gt;
&lt;li&gt;Language&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Biological&lt;/td&gt;
&lt;td&gt;Brain and nervouse system processes&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Evolutionary&lt;/td&gt;
&lt;td&gt;Evolved psychological adaptations&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Sociocultural&lt;/td&gt;
&lt;td&gt;Cross-cultural patterns of attitudes and behaviors&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch2-research-methods-in-psychology"&gt;
&lt;h2&gt;Ch2 - Research Methods in Psychology&lt;/h2&gt;
&lt;div class="section" id="process-of-research"&gt;
&lt;h3&gt;Process of Research&lt;/h3&gt;
&lt;p&gt;理論 (Theory) : An organized set of concepts that explains a phenomenon or set of phenomena.&lt;/p&gt;
&lt;p&gt;決定論 (Determinism) : Doctrine that all events - physical, behavioral, andmental - are &amp;quot;determined&amp;quot; by specific causal factors that are potentially knowable&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;step 1&lt;/td&gt;
&lt;td&gt;Initial phase of research: Theory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;step 2&lt;/td&gt;
&lt;td&gt;Develop ahypothesis 假說&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;step 3&lt;/td&gt;
&lt;td&gt;Design the study 研究設計&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="scientific-method"&gt;
&lt;h4&gt;Scientific Method&lt;/h4&gt;
&lt;p&gt;蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括)&lt;/p&gt;
&lt;p&gt;目標是要得出最多的客觀 conclusions&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="observer-bias"&gt;
&lt;h4&gt;Observer Bias&lt;/h4&gt;
&lt;p&gt;因為動機和預期造成的測試偏差&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="standardization"&gt;
&lt;h4&gt;Standardization&lt;/h4&gt;
&lt;p&gt;標準化&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="operational-definition"&gt;
&lt;h4&gt;Operational definition&lt;/h4&gt;
&lt;p&gt;操作型定義是將依些事物以某種操作表示出來&lt;/p&gt;
&lt;p&gt;所有研究裡的變數都必須是操作型定義給定的&lt;/p&gt;
&lt;p&gt;ex: 「花生果醬三明治」的操作性定義是「使用抹刀先將花生醬塗抹到一片麵包上，再將果醬塗抹在花生醬上，最後蓋上另一片厚度相同的麵包後所得到的成果。」&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="research-variable"&gt;
&lt;h4&gt;Research Variable&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Independent Variable (獨變項/自變項) (研究者操弄的變數)&lt;/li&gt;
&lt;li&gt;Dependent Variable (依變項)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-methods"&gt;
&lt;h4&gt;Experimental Methods&lt;/h4&gt;
&lt;p&gt;研究者操弄 independent variable 來看對 dependent variable 的影響，
用來解決因果模糊性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Control Procedures&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Double-blind control 雙盲控制&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first simple"&gt;
&lt;li&gt;目的是避免研究結果受安慰劑效應或觀察者期望效應所影響&lt;/li&gt;
&lt;li&gt;受試驗的對象及研究人員並不知道哪些對象屬於對照組，哪些屬於實驗組&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="last literal-block"&gt;
在藥物測試中經常使用雙盲測試。病人被隨機編入對照組及實驗組。
對照組被給予安慰劑，而實驗組給予真正藥物。
無論是病人或觀察病人的實驗人員都不知道誰得到真正的藥物，直至研究結束為止。
不過部份的試驗會較難做成雙盲，
例如：如果治療效果非常顯著，或治療的副作用非常明顯，實驗人員便可能猜想到哪組是對照。
&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Placebo control 安慰劑控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Between-subjects designs 受試者間設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每個參與者隨機分配到不同測試環境&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Within-subjects designs 受試者內設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每個參與者可以自己控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sample 樣本&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Population 中被選為受試者的 subset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Representative Sample 代表性樣本&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Population 中被選為受試者的 subset 中和特徵非常符合的部份&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Population 母群&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-explanations"&gt;
&lt;h4&gt;Alternative explanations&lt;/h4&gt;
&lt;p&gt;替代解釋&lt;/p&gt;
&lt;p&gt;可以由以下幾種而得&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Confounding variables (混淆變項)&lt;/li&gt;
&lt;li&gt;Expectancy effects (預期效應)&lt;/li&gt;
&lt;li&gt;Placebo effect (安慰劑效應)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="correlational-methods"&gt;
&lt;h4&gt;Correlational Methods&lt;/h4&gt;
&lt;p&gt;相關法&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Correlational Coefficient&lt;/li&gt;
&lt;li&gt;Correlational Methods&lt;/li&gt;
&lt;li&gt;正相關&lt;/li&gt;
&lt;li&gt;負相關&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="psychological-measurement"&gt;
&lt;h4&gt;Psychological Measurement&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Validity&lt;/li&gt;
&lt;li&gt;Self-report Measures&lt;/li&gt;
&lt;li&gt;Behavior Measure&lt;/li&gt;
&lt;li&gt;Direct observations&lt;/li&gt;
&lt;li&gt;Naturalistic observations&lt;/li&gt;
&lt;li&gt;Archival Data&lt;/li&gt;
&lt;li&gt;Case Study&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ethical-issues-in-research"&gt;
&lt;h4&gt;Ethical Issues in Research&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;研究的倫理議題&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
+----------+
| 告知同意 |
+----------+
    |
+-----------------+
| 風險 / 獲得評估 |
+-----------------+
    |
+----------+
| 刻意瞞騙 |
+----------+
    |
+----------+
| 事後釋疑 |
+----------+
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch3-the-biological-and-evolutionary-basis-of-behavior"&gt;
&lt;h2&gt;Ch3 - The Biological and Evolutionary Basis of Behavior&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nature vs. Nurture (先天 vs. 後天)&lt;/li&gt;
&lt;li&gt;Heredity vs.  Environment (遺傳 vs. 環境)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nervous-system"&gt;
&lt;h3&gt;Nervous system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Neuron&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dendrites 樹突&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Receive stimulation from sensory receptors&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Soma 細胞體&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Cell body, contains nucleus&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Axon 軸突&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Long extended fiber along which neural impulse travels&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;圖 ??&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Synapse"&gt;http://en.wikipedia.org/wiki/Synapse&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Synapse 突觸&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不同神經元間或神經元與細胞間溝通的接頭&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Synapse Transmission&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Neurotransmitters (神經傳導物質)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Catecholamines (兒茶酚胺)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Norepinephrine (NE) (正腎上腺素)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dopamine (DA) (多巴胺)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;在精神分裂症患者身上可以看到高於正常值的多巴胺&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Glutamate (Glu) (麩胺酸)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;腦中最常見的興奮性神經傳導物質&lt;/li&gt;
&lt;li&gt;和情緒反應、學習和記憶有關&lt;/li&gt;
&lt;li&gt;與藥物、酒精、尼古丁成癮有關&lt;/li&gt;
&lt;li&gt;腦內 Glu 量的失衡與精神疾病有關連,例如精神分裂症&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;GABA (gamma-aminobutyric acid) (迦馬胺基丁酸)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;腦中最常見的抑制性神經傳導物質&lt;/li&gt;
&lt;li&gt;GAMA 太低會產生焦慮感&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Acetylcholine (Ach) (乙醯膽鹼)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;和記憶有關 (ex: 阿茲海默症)&lt;/li&gt;
&lt;li&gt;在運動神經元和肌肉纖維交接處,使骨骼肌興奮而收縮 (ex: 美洲箭毒、肉毒桿菌)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Serotonin (5-HT) (血清素)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;分泌血清素的神經元位於腦幹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;與激發 / 喚起和自動化歷程有關&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;迷幻藥 LSD 抑制血清素神經元的作用 , 產生各種幻覺&lt;/li&gt;
&lt;li&gt;抗憂鬱藥物「百憂解」可以增強血清素的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Endorphins (腦內啡)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;神經調節物質&lt;/li&gt;
&lt;li&gt;控制情緒行為 (焦慮、害怕、緊張、愉悅)&lt;/li&gt;
&lt;li&gt;與鴉片類藥物、嗎啡受體部位相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Sympathetic nervous system (交感神經系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;應對緊急狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Parasympathetic nervous system (副交感神經系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;處理 routine 的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="biology-and-behavior"&gt;
&lt;h3&gt;Biology and Behavior&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="brain-structure"&gt;
&lt;h3&gt;Brain Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Limbic system (邊緣系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;regulates emotions and motivated behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Hippocampus (海馬回)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;記憶&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Amygdala (杏仁核)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;情緒、攻擊&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Hypothalamus (下視丘)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;manage body's interanl state&lt;/li&gt;
&lt;li&gt;體溫調節、性興奮&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Thalamus (視丘)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;relay sensory information&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cerebellum (小腦)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;regulates coordinated movement&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Brain stem (腦幹)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;set brain's general alterness level and warning system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Medulla (延腦)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;breath, blood pressure, heartbeat&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Pons (橋腦)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reticular Formation (網狀組織)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Spinal cord (脊髓)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;pathway for neural fibers traveling to and from brain&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cerebral cortex (大腦皮質)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;involve in complex mental processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sleep-cycle"&gt;
&lt;h3&gt;Sleep Cycle&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stage 1&lt;/li&gt;
&lt;li&gt;Stage 2&lt;/li&gt;
&lt;li&gt;Stage 3&lt;/li&gt;
&lt;li&gt;Stage 4&lt;/li&gt;
&lt;li&gt;Rapid EyeMovements (REM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch5-mind-consciousness-and-alternatestates"&gt;
&lt;h2&gt;Ch5 - Mind, Consciousness, and AlternateStates&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="others"&gt;
&lt;h2&gt;Others&lt;/h2&gt;
&lt;div class="section" id="pygmalion-effect"&gt;
&lt;h3&gt;Pygmalion Effect&lt;/h3&gt;
&lt;p&gt;指人在被付予更高期望以後，他們會表現的更好的一種現象&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29"&gt;http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://phiphicake.blogspot.tw/2009/04/blog-post_13.html"&gt;http://phiphicake.blogspot.tw/2009/04/blog-post_13.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid"&gt;http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/"&gt;http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="psycho"></category></entry><entry><title>ZIP unsupported compression method 99</title><link href="/posts/2014/11/zip-unsupported-99/" rel="alternate"></link><updated>2014-11-04T23:51:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-04:posts/2014/11/zip-unsupported-99/</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;前陣子朋友碰到有設密碼的 zip 檔不能用 unzip 來解開，&lt;/div&gt;
&lt;div class="line"&gt;會出現 &amp;quot;does not support compression method 99&amp;quot; 的錯誤，&lt;/div&gt;
&lt;div class="line"&gt;原因是這些檔案用 AES 加密，&lt;/div&gt;
&lt;div class="line"&gt;對 unzip 來說是新 method 所以不支援，&lt;/div&gt;
&lt;div class="line"&gt;這時候只好用其他支援的工具解開啦，&lt;/div&gt;
&lt;div class="line"&gt;例如 : 7z&lt;/div&gt;
&lt;/div&gt;
</summary><category term="zip"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 3</title><link href="/posts/2014/10/pythoner-read-ruby-book-3/" rel="alternate"></link><updated>2014-10-11T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/pythoner-read-ruby-book-3/</id><summary type="html">&lt;div class="section" id="ch-8-regular-expression"&gt;
&lt;h2&gt;ch 8 Regular Expression&lt;/h2&gt;
&lt;p&gt;毫無反應就是 regular expression&lt;/p&gt;
&lt;p&gt;書上是介紹 Ruby 裡的 re，基本上長的就是 Perl 樣 (X&lt;/p&gt;
&lt;p&gt;基本 re 觀念都差不多&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Ruby&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;lt;.*?&amp;gt;)/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&amp;lt;.*?&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書上提到 Ruby 1.9 的 re 使用了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Oniguruma"&gt;Oniguruma&lt;/a&gt; 這個 engine，
Ruby 2.0 後轉到 Oniguruma 的 fork : &lt;a class="reference external" href="https://github.com/k-takata/Onigmo"&gt;Onigmo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 的話可以看 &lt;a class="reference external" href="https://docs.python.org/3/library/re.html"&gt;re 的 document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這章節最後最後提到 DSL (Domain Specific Language)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-1-integer"&gt;
&lt;h2&gt;ch 9-1 Integer&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 C 裡，型態為 int 的狀態下，5 / 2 的結果會是 2&lt;/li&gt;
&lt;li&gt;int 有大小上限&lt;/li&gt;
&lt;li&gt;bitwise operation&lt;/li&gt;
&lt;li&gt;bitmask&lt;/li&gt;
&lt;li&gt;2's complement&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-2-float"&gt;
&lt;h2&gt;ch 9-2 Float&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed point number (不好用)&lt;/li&gt;
&lt;li&gt;IEEE 754&lt;/li&gt;
&lt;li&gt;電腦中的浮點數沒有結合律 (誤差會擴大)&lt;/li&gt;
&lt;li&gt;誤差會累積&lt;/li&gt;
&lt;li&gt;Inf, 0, NaN&lt;/li&gt;
&lt;li&gt;運算的值的絕對值相差過大時，計算會造成誤差&lt;/li&gt;
&lt;li&gt;cancellation error (相減兩個相近的數字時造成的誤差)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.234567889943719&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt;
&lt;span class="mf"&gt;1.23456789&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.0123456&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.0123444&lt;/span&gt;
&lt;span class="mf"&gt;1.1999999999998123e-06&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 2</title><link href="/posts/2014/10/pythoner-read-ruby-book-2/" rel="alternate"></link><updated>2014-10-10T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-2/</id><summary type="html">&lt;div class="section" id="ch-2-5-duck-typing"&gt;
&lt;h2&gt;ch 2-5 Duck Typing&lt;/h2&gt;
&lt;p&gt;duck typing 實在很常聽到，尤其自己常寫的是 Python XD&lt;/p&gt;
&lt;p&gt;在講到 type 時，常聽到的有 static 和 dynamic，static 的話不用執行就可以知道，
dynamic 的話要執行下去才能確認&lt;/p&gt;
&lt;p&gt;硬體看得懂的是二進位數字，其他寫程式用到的型別都是建立在這之上的，
如果沒有做成更好用的 type 的話會造成程式撰寫上的負擔，
於是 Fortran 提供了型別 (整數資料、浮點數陣列等等)，
於是有了 static type (宣告型別)&lt;/p&gt;
&lt;div class="section" id="lisp-dynamic-type"&gt;
&lt;h3&gt;Lisp &amp;amp; Dynamic type&lt;/h3&gt;
&lt;p&gt;在 Fortran 出現後幾年，出現了 Lisp，
1958 年的 Lisp 只有兩種型別 : list、atom，不是 list 的都是 atom&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cons cell&lt;/li&gt;
&lt;li&gt;car, cdr&lt;/li&gt;
&lt;li&gt;S-expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lisp 的 list 裡事先無法知道 cons cell 裡面指到的是 cons cell 還是 atom，
本質上可說是 polymorphism 的 data structure，
所以 Lisp 採用的是 &amp;quot;資料本身還有描述自己型別的資訊&amp;quot;，又稱為動態型別&lt;/p&gt;
&lt;pre class="literal-block"&gt;
  cons cell

+-----+-----+
| car | cdr |
+-----+-----+
   |     |
   |     |
 +---+  +-----+-----+
 | 5 |  | car | cdr |
 +---+  +-----+-----+
 atom      |     |
           |     |
        +----+  nil
        | 13 |  atom
        +----+
         atom
&lt;/pre&gt;
&lt;p&gt;Static Type 起自 Fortran、Dynamic Type 起自 Lisp，
在最初的物件導向語言 Simula 裡，出現了和 Dynamic Type 類似的型別 Ref (Simula 中除了物件之外都是靜態型別)，
之後從 Simula 的物件導向概念延生出的 Smalltalk 和 Lisp 一樣全面採用動態型別，
1980 年代前半，受到 Simula 影響而誕生了 C++，重要概念 : &amp;quot;subclass 可以視為 base class 的 instance&amp;quot;&lt;/p&gt;
&lt;p&gt;Duck Typing 的概念是: &amp;quot;走路像鴨子，看起來像鴨子，那就可以把他當成鴨子&amp;quot;&lt;/p&gt;
&lt;p&gt;Dynamic Type 裡避免名去檢查型別，而改以檢查是否有某 method&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>血月之 Stellarium</title><link href="/posts/2014/10/stellarium/" rel="alternate"></link><updated>2014-10-10T19:13:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/stellarium/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stellarium.org/"&gt;Stellarium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;月全蝕的時候從朋友那知道的 Open Source 軟體，
看起來蠻棒的 XD&lt;/p&gt;
</summary><category term=""></category></entry><entry><title>心理學概論 之 Chomsky</title><link href="/posts/2014/10/psychology-intro-chomsky/" rel="alternate"></link><updated>2014-10-10T18:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/psychology-intro-chomsky/</id><summary type="html">&lt;p&gt;這禮拜二在上心理學概論的時候，上到打瞌睡 zzz，
都是因為整天都有課 (晚上也有)，前面又上完體育課很累 ...&lt;/p&gt;
&lt;p&gt;就在半睡半醒中，突然聽到了 Chomsky !&lt;/p&gt;
&lt;p&gt;頓時精神力上升，腦中馬上浮現 Chomsky Normal Form，
馬上抬頭看一下 slide，上面寫著 Noam Chomsky，
立馬 Google ...&lt;/p&gt;
&lt;p&gt;果然是同個人啊 ...&lt;/p&gt;
&lt;p&gt;在上心理學的時候可以想到正規也是個奇妙的狀況 Orz&lt;/p&gt;
</summary><category term="psychology"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 1</title><link href="/posts/2014/10/pythoner-read-ruby-book-1/" rel="alternate"></link><updated>2014-10-10T16:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-1/</id><summary type="html">&lt;p&gt;這邊是讀了書上內容的節錄和獨後自己查的資料&lt;/p&gt;
&lt;p&gt;目前心得 : 可以看到一些觀念，但是有些例子就 ... (尤其是少部份有提到 Python 的)&lt;/p&gt;
&lt;div class="section" id="ch-14-1-functional-programming"&gt;
&lt;h2&gt;ch 14-1 - functional programming&lt;/h2&gt;
&lt;p&gt;是的沒錯，我第一個翻的章節是 chapter 14 ...&lt;/p&gt;
&lt;p&gt;Fortran 設計者為 John Backus (John Backus 還發明了 BNF)，
其在 1997 年 Turing Award 上發表的語言 &amp;quot;FP&amp;quot; 被認為是 Functional Programming 的起點&lt;/p&gt;
&lt;p&gt;Feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Higher-order function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;pure function (no side effect)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Referential transparency&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="lisp"&gt;
&lt;h3&gt;Lisp&lt;/h3&gt;
&lt;p&gt;Lisp 的基礎是 Alonzo Church 提的 lambda calculus，也支援 Higher-order function&lt;/p&gt;
&lt;p&gt;Lisp 具有一些 functional 的特性，但不是純粹的 functional&lt;/p&gt;
&lt;p&gt;Lisp 最大的特色是 S-expression&lt;/p&gt;
&lt;p&gt;另一個特色是 list (LISP = LISt Processing)，Lisp 把節點稱為 cons cell，
cons 是從建立新 cell 的 function : cons (construct) 而來，
而一開始的 Lisp 環境把第一個資料放在 address register，第二個放在 data register，
所以 car = content of address register、cdr = content of data register，
構成 list 的資料成為 atom (symbol or number)&lt;/p&gt;
&lt;p&gt;cons cell:&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;cdr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lisp 的 list 底下結構是 singly linked-list&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="haskell"&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;p&gt;Haskell Curry 的 Combinatory logic 和 Alonzo Church 的 lambda calculus 幾乎相同的東西&lt;/p&gt;
&lt;p&gt;Haskell feature:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no side effect&lt;/li&gt;
&lt;li&gt;Higher-order function&lt;/li&gt;
&lt;li&gt;partial function application&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;type inference&lt;/li&gt;
&lt;li&gt;list comprehension&lt;/li&gt;
&lt;li&gt;block by indent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell 有靜態多型的型別系統和 type inference，可以在接近 duck typing 的情況下，
在編譯時完成 type checking&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocaml"&gt;
&lt;h3&gt;OCaml&lt;/h3&gt;
&lt;p&gt;OCaml 歷史比 Haskell 早，誕生於法國&lt;/p&gt;
&lt;p&gt;和 Haskell 相比有些不同:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;has side effect&lt;/li&gt;
&lt;li&gt;no lazy evaluation&lt;/li&gt;
&lt;li&gt;module system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OCaml 想要 lazy evaluation 時可以明確標示&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="erlang"&gt;
&lt;h3&gt;Erlang&lt;/h3&gt;
&lt;p&gt;Erlang 是為了平行處理而設計的，設計受到 Prolog 影響&lt;/p&gt;
&lt;p&gt;dynamic type, no lazy evaluation&lt;/p&gt;
&lt;p&gt;以 actor 理論為基礎&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Block&lt;/li&gt;
&lt;li&gt;Proc object&lt;/li&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;enumerator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/"&gt;What Is the Difference Between a Block, a Proc, and a Lambda in Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="c1"&gt;# block is everything between the do and end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;lam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# The &amp;#39;&amp;amp;&amp;#39; tells ruby to turn the proc into a block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-2-code-generation"&gt;
&lt;h3&gt;ch 14-2 Code Generation&lt;/h3&gt;
&lt;p&gt;nothing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-3-memory-management"&gt;
&lt;h3&gt;ch 14-3 Memory Management&lt;/h3&gt;
&lt;p&gt;因為一些概念之前有看過了，所以這邊算是複習和加強 XD&lt;/p&gt;
&lt;p&gt;Garbage Collection 的誕生是在 1960 年代，
起因於 Lisp 需要產生大量 cons cell object，不能明確管理各個 object&lt;/p&gt;
&lt;p&gt;GC 衡量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;GC 所佔的時間比例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Pause Time&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;平均 pause time&lt;/li&gt;
&lt;li&gt;最長的 pause time&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="no-gc"&gt;
&lt;h4&gt;no GC&lt;/h4&gt;
&lt;p&gt;例如 C 或 C++，programmer 自己管理 memory，自己 malloc/free、new/delete&lt;/p&gt;
&lt;p&gt;programmer 沒把程式寫好會造成:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;dangling pointer (因為把還在用的 free 掉了)&lt;/li&gt;
&lt;li&gt;memory leak (該 free 的沒 free 到)&lt;/li&gt;
&lt;li&gt;double free&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要檢查這些問題可以使用 valgrind&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gc-algorithm"&gt;
&lt;h4&gt;GC algorithm&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="50%" /&gt;
&lt;col width="31%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Problem&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;reference counting&lt;/td&gt;
&lt;td&gt;用一數字紀錄被 reference 的次數，最容易實作&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;cycle reference&lt;/li&gt;
&lt;li&gt;不適合平行處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; sweep&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，沒標到的清掉&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;objects 量上升時，速度容易下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; compact&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，
接著把標過的集合起來，
如此一來 memory 操作就有了區域性，
讓快取之類的機制效率提高&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;比 mark &amp;amp; sweep 慢&lt;/li&gt;
&lt;li&gt;不能使用保守 GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;copying&lt;/td&gt;
&lt;td&gt;把還在用的複製一份到新的 memory 區域 (會分成新和舊)，
接著把舊區域整個清掉&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Generational&lt;/td&gt;
&lt;td&gt;多數 objects 會在短時間內變成 garbage，所以可以用 age 做不同處理，
會分成 minor GC 和 major GC，
有 write barrier (紀錄 old object 裡用到 young object 的狀況，這紀錄稱為 remembered set)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Conservative&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;在 C 這種本來沒有 GC 的語言，compile 後就沒有區分 integer 和 pointer 的資訊，
因為 CPU 不需要，這時可以使用 Conservative 實作，概念是 &amp;quot;碰到 address 相同時，
代表可能被引用，視為存活&amp;quot;&lt;/p&gt;
&lt;p class="last"&gt;(heap 會整個被掃過)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Incremental&lt;/td&gt;
&lt;td&gt;把 GC 操作切割，以降低每次 GC 的最長時間，也用了 write barrier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Concurrent&lt;/td&gt;
&lt;td&gt;機制和 Incremental GC 類似，利用 write barrier 維持狀態資訊，實作時也可能有專用的 GC thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bitmap Marking&lt;/td&gt;
&lt;td&gt;Linux 這類 Unix-like 在 fork 時 memory addres 是 copy-on-write 的，
可以避免不必要的 page copy，但是和 GC 的搭配不太好，GC 在改動時就會大量複製，
Bitmap Marking 就是用來降低複製 page 的次數，不時直接對 object 做標記，
而是有另外的空間用於標記，所以複製的只有標記用的 Bitmap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-4-ruby-with-c"&gt;
&lt;h2&gt;ch 14-4 Ruby with C&lt;/h2&gt;
&lt;p&gt;介紹 Ruby 如何和 C 一起用&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-5-open-source"&gt;
&lt;h2&gt;ch 14-5 Open Source&lt;/h2&gt;
&lt;p&gt;Open Source 發展簡史&lt;/p&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>People who make VMs</title><link href="/posts/2014/09/vm-people/" rel="alternate"></link><updated>2014-09-28T13:25:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-28:posts/2014/09/vm-people/</id><summary type="html">&lt;p&gt;剛剛碰巧看到一個 &lt;a class="reference external" href="http://stackoverflow.com/questions/5168718/what-blocks-ruby-python-to-get-javascript-v8-speed/5172833#5172833"&gt;StackOverflow 上的回應&lt;/a&gt; ，
原來 V8 的 team 和 HotSpot JVM 的有很大重複，還有其他像是 Self VM、Animorphic Smalltalk VM、OOVM 都是，
而其中的 tech lead 叫 Lars Bak。&lt;/p&gt;
&lt;p&gt;Lars Bak 是 Dart 語言的創始人 (Dart 語言是 Google 想用來取代 Javascript 的一個語言) 也是 V8 和 Java HostSpot JVM 的領導，對於 VM 的技術有非常多的經驗，住在丹麥的 Aarhus 的農舍。&lt;/p&gt;
&lt;p&gt;剛好有找到一篇報導，請見下面連結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.ft.com/cms/s/0/03775904-177c-11de-8c9d-0000779fd2ac.html"&gt;The genius behind Google's browser&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hksilicon.com/kb/articles/6993/Lars-BakGoogle-Chrome"&gt;對岸翻譯版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="vm"></category></entry><entry><title>Incremental Garbage Collector</title><link href="/posts/2014/09/incremental-gc/" rel="alternate"></link><updated>2014-09-26T21:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/incremental-gc/</id><summary type="html">&lt;div class="section" id="pause-time"&gt;
&lt;h2&gt;前情提要 - Pause Time&lt;/h2&gt;
&lt;p&gt;在 CPython 中使用的是 reference count，所以當 count 變成 0 時就必須把空間回收，
當一個巨大的 object 要被回收時，就會產生不小的 pause time，但是這個時間是 deterministic 的。
reference count 有個問題就是 reference cycle，為了找出 cycle 就必須爬過所有 objects，
但是這就會產生 nondeterministic GC pause。&lt;/p&gt;
&lt;p&gt;reference count 是把回收的 cost 分開在各個時間點，而 tracing 的 GC 是把回收的 cost 集中在某一段時期，
回收所需時間可能不低，在這之中得把程式 pause，可能會讓使用者感覺到停頓，
而 Incremental GC 想做的就是把這段過程拆分成好幾個小步驟，
分別在不同時間執行 (打散)，讓程式執行更平順。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tech.mozilla.com.tw/posts/1605/你丟我撿！神奇的-firefox-內部記憶體回收機制"&gt;你丟我撿！神奇的 Firefox 內部記憶體回收機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/dmandelin/2012/07/20/incremental-gc-now-in-firefox-aurora/"&gt;Incremental GC now in Firefox Aurora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/javascript/2012/08/28/incremental-gc-in-firefox-16/"&gt;Incremental GC in Firefox 16!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2013/10/incremental-garbage-collector-in-pypy.html"&gt;Incremental Garbage Collector in PyPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="gc"></category></entry><entry><title>Chart.js 簡單的畫出 Chart</title><link href="/posts/2014/02/chart-js/" rel="alternate"></link><updated>2014-02-22T14:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-22:posts/2014/02/chart-js/</id><summary type="html">&lt;script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"&gt;&lt;/script&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; 是利用 HTML5 的 canvas 去畫的，
而 Chart.js 這個 library 本身是 open source 的 (MIT license) (&lt;a class="reference external" href="https://github.com/nnnick/Chart.js"&gt;Chart.js - github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;所以到底要怎麼用呢？&lt;/p&gt;
&lt;p&gt;其實要用這個 library 很簡單，
首先要先把 Chart.js (或 Chart.min.js) include 進來 (這邊先用 CDN 上的做範例，要擺到自己機器上的再去修改 src)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再來是要有畫布啦 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著是給資料然後畫圖 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#F38630&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#E0E4CC&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#69D2E7&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//Get the context of the canvas element we want to select&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myNewChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;canvas id="myChart" width="400" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
    var data = [
        {
            value: 30,
            color:"#F38630"
        },
        {
            value : 50,
            color : "#E0E4CC"
        },
        {
            value : 100,
            color : "#69D2E7"
        }
    ];
    var ctx = document.getElementById("myChart").getContext("2d");
    var myNewChart = new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;p&gt;Chart.js 目前有六種 Charts，
可以在 &lt;a class="reference external" href="http://www.chartjs.org/docs/"&gt;官方文件&lt;/a&gt; 看到相關的設定、資料格式，
每個 Chart 除了本身的資料外，還有一些 option 可以調整，
例如要不要 animation 啦、要不要顯示 label 啦 ... etc&lt;/p&gt;
&lt;div class="section" id="chart"&gt;
&lt;h2&gt;六種 Chart&lt;/h2&gt;
&lt;div class="section" id="line-chart"&gt;
&lt;h3&gt;Line Chart&lt;/h3&gt;
&lt;canvas id="LineChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("LineChart").getContext("2d");
new Chart(ctx).Line(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="bar-chart"&gt;
&lt;h3&gt;Bar Chart&lt;/h3&gt;
&lt;canvas id="BarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("BarChart").getContext("2d");
new Chart(ctx).Bar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="radar-chart"&gt;
&lt;h3&gt;Radar chart&lt;/h3&gt;
&lt;canvas id="RadarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["Eating","Drinking","Sleeping","Designing","Coding","Partying","Running"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("RadarChart").getContext("2d");
new Chart(ctx).Radar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="polar-area-chart"&gt;
&lt;h3&gt;Polar area chart&lt;/h3&gt;
&lt;canvas id="PolarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value : 30,
        color: "#D97041"
    },
    {
        value : 90,
        color: "#C7604C"
    },
    {
        value : 24,
        color: "#21323D"
    },
    {
        value : 58,
        color: "#9D9B7F"
    },
    {
        value : 82,
        color: "#7D4F6D"
    },
    {
        value : 8,
        color: "#584A5E"
    }
];
var ctx = document.getElementById("PolarChart").getContext("2d");
new Chart(ctx).PolarArea(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="pie-chart"&gt;
&lt;h3&gt;Pie chart&lt;/h3&gt;
&lt;canvas id="PieChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F38630"
    },
    {
        value : 50,
        color : "#E0E4CC"
    },
    {
        value : 100,
        color : "#69D2E7"
    }
];
var ctx = document.getElementById("PieChart").getContext("2d");
new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="doughnut-chart"&gt;
&lt;h3&gt;Doughnut chart&lt;/h3&gt;
&lt;canvas id="DoughnutChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F7464A"
    },
    {
        value : 50,
        color : "#E2EAE9"
    },
    {
        value : 100,
        color : "#D4CCC5"
    },
    {
        value : 40,
        color : "#949FB1"
    },
    {
        value : 120,
        color : "#4D5360"
    }

];
var ctx = document.getElementById("DoughnutChart").getContext("2d");
new Chart(ctx).Doughnut(data);
&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Javascript"></category></entry><entry><title>[回憶] 2012 年夏 ~ 2014 年春</title><link href="/posts/2014/02/recall-2012-summer-2014-spring/" rel="alternate"></link><updated>2014-02-18T21:00:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-18:posts/2014/02/recall-2012-summer-2014-spring/</id><summary type="html">&lt;p&gt;一年半內除了學校的課程能學到些什麼？&lt;/p&gt;
&lt;p&gt;不多也不少，這樣而已&lt;/p&gt;
&lt;p&gt;(想到什麼就紀錄些什麼吧)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起頭&lt;/h2&gt;
&lt;p&gt;2012 年夏，正值升大學的時期，雖然進了資工系，但其實什麼都還不會，
暑假期間開始常上 BBS，後來看到上面的色碼還有其他的控制碼覺得很有趣，
接著就開始在上面試了一下，然後又看到某人在上面搞出一堆神奇的東西 (?)，
再來是開到上面的 vim mode (當時還不會用 vim)，
這算是初步接觸到 vim 的地方之一吧 XD (另外是鳥哥寫的文章)。&lt;/p&gt;
&lt;p&gt;之後拿到了社團 server 上的帳號，開始連進去亂試指令 w，
從此掉進無底的坑洞 (X，這時間大概有時候會翻翻鳥哥吧，
到了學校後開始接觸 FreeBSD，
就裝來玩玩看，翻翻 FreeBSD handbook，開始認識 configure、make、ports ... etc，
當時在 FreeBSD 上用的是 tcsh (因為社團 server 預設是 tcsh，所以先接觸到 XD)，
因為一些原因開始看怎麼寫 shell script (Bourne Shell 的)，
慢慢知道有 sed、awk 這些東西，
開始使用 regular expression (已經想不起來從哪個時間點開始了)。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;寫到這裡開始回去翻以前寫在 BBS 的文章回想 XD&lt;/p&gt;
&lt;p&gt;阿對一開始還去玩了 pi 的貪吃蛇 ~&lt;/p&gt;
&lt;p&gt;哦哦哦！BBS 上看到的有石頭文、guest 發文、... (?)&lt;/p&gt;
&lt;p&gt;原來暑假就有翻過 regular expression，只是沒有碰到要使用的地方就不熟 XD，
後來有在用就比較 OK 了 ~&lt;/p&gt;
&lt;p&gt;喔對，BBS 有聊天指令 XD&lt;/p&gt;
&lt;p&gt;看到移位碼就想起之前試一試發現，
原本應該擋掉的名片檔移位碼在我亂試的情況下發現有 bug XDDDD，
後來被 PO 到 sysop，之後又修掉了。&lt;/p&gt;
&lt;p&gt;原來當初 9 月開始就有去過 PyHUG，但是當時完全不會 Python zzz&lt;/p&gt;
&lt;p&gt;找到了 ~ &lt;strong&gt;2012/10/17 拋棄 Windows，轉用 Linux&lt;/strong&gt; ，
當時裝了 Ubuntu，DE 預設是 Unity，用沒多久後換成 Gnome 2，大概就這樣用了一學期。
寒假換成 LXDE 又用了一學期，中間好像有試過 Gnome 3 一陣子吧，
一下學期末把 WM 換成了 awesome wm，然後就離不開 awesome 一直到現在，
一下結束的暑假把 Ubuntu 換成了 Arch Linux ，變成 Arch Linux + awesome。&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;說到 Vim 啊 ...&lt;/p&gt;
&lt;p&gt;一開始其實看到很多次，但是都沒有真的把它拿來用，所以不熟 zzz。
後來毅然決然把所有編輯純文字的東西都只用 vim ，一陣子後就習慣整個操作，
不過當時對 hjkl 的移動還不是很熟，索性在 .vimrc 裡把方向鍵 map 掉，
只用 hjkl 移動，後來也就習慣了。&lt;/p&gt;
&lt;p&gt;一上結束的寒假稍微看了一下 .vimrc 的設定，調了一些東西和試了一些 plugin (雖然最後大多把 plugin 關了 XD)，
做的設定中幾個最常用到的是 paste mode 切換的快捷鍵、儲存時自動移除行尾多餘空白、下次開啟時回到關閉前的位置 ... etc。&lt;/p&gt;
&lt;p&gt;plugin 部份的話用 Vundle 管理很方便，在加上一小段 script 後，
到新的地方只要打開 vim 就會自動裝好 vundle，
接著就可以利用 vundle 很快的把你的 plugin 裝起來，
利用 vundle 後 update plugin 也一樣只需要一個 command。&lt;/p&gt;
&lt;p&gt;現在只要是純文字的東西我都用 vim，可以說是離不開了 XD，就連這篇文章也是我用 vim 打出來的 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;到底是從什麼時候開始比較常寫 Python 的我又忘了 (X&lt;/p&gt;
&lt;p&gt;剛開始因為別人介紹，陸陸續續有看一點 Python 的東西，社課後知道了 list、tuple，
不過這時還是沒有在使用它，後來假期有人約讀書會所以看了 Python tutorial 的前部份。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假 (不知道是不是這個時期開始)，因為在跟高中同學打 game，
那遊戲在有人踩到紀錄點時會存資料在 host user，
而在某次遊戲中有人不小心在很糟糕的時間點踩到了，
結果只能回溯到那悲慘的時間點，
後來我就想說寫個程式讓他去 check 有新紀錄時就 backup 一次，
就開始用 Python 寫個小程式去 check，
東查西查，開始對 Python 變比較熟一點，
後來為了能一次 check 多個檔案又嘗試了 Python 的 multiprocessing，
而另一個同學則是去寫了簡單的 GUI，
在看了他的 code 並幫忙修改後，稍微對 Python 的 class 有點感覺了，
然後這也是我第一次使用內建的 tkinter 做簡單的 GUI。&lt;/p&gt;
&lt;p&gt;之後開始愈來愈常寫 Python，慢慢的學會愈來愈多東西 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;筆記&lt;/h2&gt;
&lt;p&gt;做筆記的方式嘛 ...&lt;/p&gt;
&lt;p&gt;高中用過 Evernote 記了一點東西(不多)，
後來大一有陣子是 Google Docs + Markdown (本機)。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假聽到 Sphinx 這玩意，
看起來還不錯，也看到別人寫出來的東西，
所以就開始變成寫 reStructuredText 、用 Sphinx generate HTML，
不過 Markdown 也還是有再用 (這篇就是用 Markdown 寫的)，
所以目前是 Markdown &amp;amp; reStructuredText 亂用中 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h2&gt;Version Control&lt;/h2&gt;
&lt;p&gt;我現在常用的 Version Control 是 git，
一開始也是不熟 (看了看還是沒常用)，後來把一些東西用 git 上去後，
變成只熟 add &amp;amp; commit (X，後來碰到一些狀況而對 checkout、push、partial add、cherry-pick、stash 比較熟一點，
目前是基本操作還 OK 啦 (自己說&lt;/p&gt;
&lt;p&gt;mercurial ...，目前無緣 XD，只在別人教的時候試過一次，不過因為已經慣用 git 了，所以 ... XD&lt;/p&gt;
&lt;p&gt;cvs 只在抓 FreeBSD kernel source 的時候用過 zzz&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;一個無底洞 (X&lt;/p&gt;
&lt;p&gt;我掉進去後就再也出不來了 XD&lt;/p&gt;
&lt;p&gt;因為已經太融入生活了，不知道該說什麼 ~&lt;/p&gt;
&lt;p&gt;現在用 Arch Linux 用的很開心  O w O&lt;/p&gt;
&lt;p&gt;改天想到再補東西吧 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="freebsd"&gt;
&lt;h2&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;FreeBSD 的部份算是配合修課做了點基本的學習，
內容大概有 FTP、Samba、ZFS、FAMP (FreeBSD + Apache + MySQL + PHP)、
NFS、amd (Berkeley Automounter)、NIS、PF、NAT、DHCP、SSL/TLS、Proxy、DNS、Postfix ...&lt;/p&gt;
&lt;p&gt;這些算是有基本的接觸過了 (有架出東西)，最不熟的大概是最後的 Mail Server 部份吧 zzz，
東西弄起來有點麻煩，最後交作業的時候 ClamAV 偵測病毒信件的部份沒弄好 = =。&lt;/p&gt;
&lt;p&gt;以前課程有 VPN，修課的時候剛好沒有，想之後找時間架來玩玩。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-css-javascript"&gt;
&lt;h2&gt;HTML, CSS, Javascript&lt;/h2&gt;
&lt;p&gt;這邊要從一下結束的暑假開始，
社團決定大家要一起用 Django 寫社團網站，
這時候就開始摸索 Django 和認識基本的 HTML，
不過 CSS 部份是由另一位負責，所以沒接觸。&lt;/p&gt;
&lt;p&gt;後來進 OH 去用 Django 改寫目前的網站，
OH 原本的網站是套 Bootstrap 2，我在做新網站的時候改用了 Bootstrap 3，
接著就因為 Bootstrap 3 改了很多地方，所以要到處去修 Orz，
中間調樣式的時候開始認識一些 CSS 的東西，
某些地方因為用到 Javascript 所以也開始有了點接觸。&lt;/p&gt;
&lt;p&gt;2014 2月，開始想用 GitHub Pages 來寫 blog，
於是開始使用 Pelican 這個 Python 寫的 static site generator，
因為可以用 Markdown 和 reStructuredText 所以可以很開心的用 vim 寫文章 ~~~&lt;/p&gt;
&lt;p&gt;在使用 Pelican 寫 blog 後，想說順便來試著自己寫個 theme 來看看，
所以就開始寫更多的 CSS，中間在調某些功能的時候用到了 Javascript，
所以也寫了一小段的 Javascript code。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h2&gt;Database&lt;/h2&gt;
&lt;p&gt;Database 的話只會一點點簡單的 SQL 語法，
大多是寫東西需要去查的，用一用就知道了幾個，
只用過 SQLite、MySQL、MariaDB，不過都不熟就是了 XD，
因為碰到的東西重點都不是在調 Database，
很多都只是接上去而已。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c"&gt;
&lt;h2&gt;C&lt;/h2&gt;
&lt;p&gt;說實話，C 其實只會些基本的東西，沒有很熟 XD&lt;/p&gt;
&lt;p&gt;現在只想到好幾個月前在 Wikipedia 的 Multiple dispatch 頁面看到的 C code 感覺還蠻有趣的 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;C++&lt;/h2&gt;
&lt;p&gt;一下的 OOP 課開始頻繁接觸 C++，
因為老師的課程安排，所以學了一些 C++11 的東西，
老師在 constructor 那部份講了好一陣子，
後來作業的關係寫了自己的 vector 和 list Orz，
還記得那時候在講 new，new operator、operator new、placement new ...&lt;/p&gt;
&lt;p&gt;某次作業好像用到了 C++11 加進來的 lambda expression。&lt;/p&gt;
&lt;p&gt;其實老師的講義寫了很多東西，只是我還沒能好好吸收起來 ...，
只好一定要好好補起來 = =&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;曾經在某陣子因為寫 C++ 作業的關係看了些 Makefile 的東西，
也寫了些簡單的 Makefile ...，不過現在差不多忘了 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="awk"&gt;
&lt;h2&gt;awk&lt;/h2&gt;
&lt;p&gt;awk 好像寫過那麼一下 ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sed"&gt;
&lt;h2&gt;sed&lt;/h2&gt;
&lt;p&gt;sed 好像在某次作業用過，還有自己寫的 shell script 裡用過，
不過基本上 ... 不熟 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-script-bourne-shell"&gt;
&lt;h2&gt;shell script (Bourne Shell)&lt;/h2&gt;
&lt;p&gt;shell script 少數時候會因需求寫一點，
不過都是寫純 Bourne Shell 的 (X，
Bash 的只有在 .bashrc 裡寫過 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lua"&gt;
&lt;h2&gt;lua&lt;/h2&gt;
&lt;p&gt;接觸到 lua 是因為轉用 awesome wm 的關係 XD，
awesome wm 的設定檔是用 lua 寫的，
所以改的時候會看到一些 lua 語法 ~，
前陣子在看 coroutine 的時候又看到用 lua 去說明的文章，
不過說那麼多其實還是沒在寫 lua XD (根本沒好好學過)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="perl"&gt;
&lt;h2&gt;Perl&lt;/h2&gt;
&lt;p&gt;Perl 只有在寫作業 (irc bot、大量寄信程式、登入時間統計) 的時候用過，
寫完之後就沒用過了 (X，現在可以說是完全不會了 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;有想要接觸 Functional 的東西耶&lt;/p&gt;
&lt;p&gt;之後想找時間學 Haskell ~ (曾經在某天翻過，連基本的都差不多忘光了 XD&lt;/p&gt;
&lt;p&gt;最近寫 Python 開始慢慢使用 lambda、filter、map、reduce (X&lt;/p&gt;
&lt;/div&gt;
</summary><category term="recall"></category></entry><entry><title>XMLHttpRequest</title><link href="/posts/2014/02/XMLHttpRequest/" rel="alternate"></link><updated>2014-02-11T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-11:posts/2014/02/XMLHttpRequest/</id><summary type="html">&lt;p&gt;有了 XMLHttpRequest 就讓我們可以利用 Javascript 去做 request&lt;/p&gt;
&lt;p&gt;以下直接用一段 Javascript 去說明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是建立 XMLHttpRequest 物件，再來撰寫 readyState 改變時所要做的動作 ( &lt;strong&gt;onreadystatechange&lt;/strong&gt; )，
open method 去指定要做的 request，再來呼叫 send method 送出&lt;/p&gt;
&lt;div class="section" id="xmlhttprequest"&gt;
&lt;h2&gt;在收到回應後，XMLHttpRequest 物件會設定的一些屬性&lt;/h2&gt;
&lt;div class="section" id="readystate"&gt;
&lt;h3&gt;readyState&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;0 (UNSENT)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The object has been constructed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;1 (OPENED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The open() method has been successfully invoked. During this state request headers can be set using setRequestHeader() and the request can be made using the send() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;2 (HEADERS_RECEIVED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All redirects (if any) have been followed and all HTTP headers of the final response have been received. Several response members of the object are now available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;3 (LOADING)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The response entity body is being received.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;4 (DONE)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此才在 onreadystatechange 裡做了 readyState 判斷，
on readyState change 顧名思義就是 readyState 有變動時會去 call 這個 method，
所以加上 readyState 的判斷後變成只有處理完後 &amp;quot;readyState 是 4 &amp;quot; 時才做動作&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status"&gt;
&lt;h3&gt;Status&lt;/h3&gt;
&lt;p&gt;就是 HTTP 的 Status Code&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsetext"&gt;
&lt;h3&gt;responseText&lt;/h3&gt;
&lt;p&gt;收到的內容&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsexml"&gt;
&lt;h3&gt;responseXML&lt;/h3&gt;
&lt;p&gt;收到的內容 (XML 格式)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/XMLHttpRequest"&gt;XMLHttpRequest - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;Ajax (programming)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="XMLHttpRequest"></category><category term="ajax"></category></entry><entry><title>closure 概念</title><link href="/posts/2014/02/closure/" rel="alternate"></link><updated>2014-02-07T21:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-07:posts/2014/02/closure/</id><summary type="html">&lt;p&gt;Closure 擁有非區域變數且非參數的變數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個例子可以看到 x 是個 func 的區域變數，但是在 f 當中又用到 x，
對於 f 來說 x 既不是區域變數又不是參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python 3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 12&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;Closure (computer programming) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109906-javascript-closure"&gt;[JavaScript] Closure 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109890-closure-javascript-closure-private"&gt;[Closure] JavaScript使用 Closure模擬出 Private Member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://openhome.cc/Gossip/JavaScript/Closure.html"&gt;JavaScript Essence: Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="closure"></category><category term="program"></category></entry><entry><title>coroutine 概念</title><link href="/posts/2014/02/coroutine/" rel="alternate"></link><updated>2014-02-06T21:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/coroutine/</id><summary type="html">&lt;p&gt;直接往下到 Reference 看別人寫的文章比較好 (X&lt;/p&gt;
&lt;p&gt;coroutine 是由 Melvin Conway 在 1960 年代所提出來&lt;/p&gt;
&lt;div class="section" id="coroutine"&gt;
&lt;h2&gt;Coroutine 基本概念&lt;/h2&gt;
&lt;p&gt;Coroutine 可以視為 &lt;strong&gt;可以中斷及繼續執行的 function call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在程式語言中，通常這種中斷會用 &lt;strong&gt;yield&lt;/strong&gt; 來表示，中斷時程式狀態會被保留，下次就恢復到該狀態繼續執行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generator"&gt;
&lt;h2&gt;Generator&lt;/h2&gt;
&lt;p&gt;generator 又稱為 semicoroutine&lt;/p&gt;
&lt;p&gt;雖然 generator 一樣可以中斷、繼續，但是 coroutine 可以指定從哪裡繼續執行，而 generator 不行，generator 只能回到上次中斷處&lt;/p&gt;
&lt;p&gt;但是 coroutine 可以用 generator 實作出來&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coroutines-in-python"&gt;
&lt;h2&gt;Coroutines in Python&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/"&gt;Improve Your Python: 'yield' and Generators Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio-task.html"&gt;Tasks and coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/"&gt;Coroutine: 入門篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/implement-iterators-by-coroutine/"&gt;使用 Coroutine 實作 Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine/"&gt;使用 Coroutine 改寫狀態機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine-part-2/"&gt;使用 Coroutine 改寫狀態機－續&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/001848.html"&gt;使用 coroutine 實做 user-level thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coroutine"&gt;Coroutine - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="coroutine"></category><category term="program"></category></entry></feed>