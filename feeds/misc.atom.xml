<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/misc.atom.xml" rel="self"></link><id>/</id><updated>2015-06-16T21:08:00+08:00</updated><entry><title>BSD 與 AT&amp;T 官司訴訟的影響</title><link href="/posts/2015/06/bsd-at-and-t/" rel="alternate"></link><updated>2015-06-16T21:08:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-06-16:posts/2015/06/bsd-at-and-t/</id><summary type="html">&lt;hr class="docutils" /&gt;
&lt;p&gt;這學期修課爬的一些歷史 w&lt;/p&gt;
&lt;p&gt;原共筆在這裡 : &lt;a class="reference external" href="https://fossapc.hackpad.com/B0-1oYaaSKkruW"&gt;https://fossapc.hackpad.com/B0-1oYaaSKkruW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下為直接嵌入 Hackpad 的資料 (之後應該會自己備份一份)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;script src="https://fossapc.hackpad.com/1oYaaSKkruW.js?format=html-notitle"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;div&gt;View &lt;a href="https://fossapc.hackpad.com/1oYaaSKkruW"&gt;B0共筆頁面&lt;/a&gt; on Hackpad.&lt;/div&gt;&lt;/noscript&gt;</summary><category term="BSD"></category></entry><entry><title>Memory Management</title><link href="/posts/2015/06/memory-management/" rel="alternate"></link><updated>2015-06-16T20:42:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-06-16:posts/2015/06/memory-management/</id><summary type="html">
&lt;hr class="docutils"/&gt;
&lt;p&gt;這篇主要放在 &lt;a class="reference external" href="https://github.com/wdv4758h/notes/blob/master/memory-management.rst"&gt;https://github.com/wdv4758h/notes/blob/master/memory-management.rst&lt;/a&gt;
那邊才保證是最新的 :P&lt;/p&gt;
&lt;hr class="docutils"/&gt;
&lt;p&gt;在現今流通的電腦架構中，要執行一個程式就會需要用到記憶體，
而我們在撰寫程式時，依照不同的語言，會給程式設計師不同的記憶體操作程度。
例如 C 會給你操控 pointer 來對記憶體做各式各樣的處理，
但是像是 Python 這種相對高階的語言則會把記憶體相關的處理打包起來，
讓程式設計師可以專注在計算的撰寫上而不是底層記憶體的掌控。
這當然有好有壞，端看需求來做 tradeoff，
一邊是可以對資源做細部的控制，來用少量的資源達到要做的事，
一邊則是更注重在快速的把可以用的程式寫出來。&lt;/p&gt;
&lt;p&gt;在實際開始之前，我們需要先知道一些概念。
在現代常見的電腦中，每隻程式所能看到的記憶體是受限的，
大家會被區隔開來，每隻程式都會以為只有自己在執行，看不到其他人，
這麼做可以保護程式，讓程式間不互相干擾。
想像一下，假如在沒有區隔開的情況下，我寫了一個 C 程式，
不小心沒寫好，裡面的 pointer 可能指向別的程式的資料，
然後還不小心改到，這是多麼可怕的事。
這樣的區隔機制稱為 "Virtual Memory"，
其中的 Virtual 指的意思是分給程式的記憶體空間不是真的實體記憶體，
而是做了一層控管，在存取時中間會把 Virtual Address 轉換成實際的 Physical Address，
而各程式看到的都是同樣的一大塊空間，但其實底下對應到的是不同實體記憶體。
(要做到這樣的機制需要 MMU (memory management unit) 的硬體支援)&lt;/p&gt;
&lt;p&gt;在 Virtual Memory 之上，每隻程式看到的記憶體又會依照不同的使用而分區塊，
其中在程式執行時，變數常存在的地方為 Stack 和 Heap，
接下來就來看看裡面在幹嘛。&lt;/p&gt;
&lt;div class="section" id="stack-heap"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Stack &amp;amp; Heap&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在講記憶體管理的一開始，我們先來看看資料在記憶體中是如何被放置的。&lt;/p&gt;
&lt;p&gt;Linux process :&lt;/p&gt;
&lt;img alt="Linux Address Layout" src="/img/memory-management/Linux-Address-Layout.png"/&gt;
&lt;p&gt;其中 Stack 是 &lt;strong&gt;local variables&lt;/strong&gt; 和 &lt;strong&gt;function parameters&lt;/strong&gt; 的地方，
每呼叫一次 function 就會 push 一個 stack frame 進去，
每次 function 回傳時就會被清掉。&lt;/p&gt;
&lt;p&gt;[Error] 這邊可以注意到，如果我們不斷地 push 到 stack 裡，
最後超過可容許的大小，就會產生 &lt;tt class="docutils literal"&gt;stack overflow&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;因為放在 stack 上的資料會在回傳時被清掉，
當遇到回傳後仍需使用的情況，
就要把資料放在 Heap。&lt;/p&gt;
&lt;p&gt;在 C 中要使用 Heap 就需要用 &lt;strong&gt;malloc&lt;/strong&gt; 並設定需要的大小，
用完後需要使用 &lt;strong&gt;free&lt;/strong&gt; 來清除。
這些步驟在一般使用 Stack 的情況中都不需要，
但是 Heap 的特別處就在於不會受限於特定的 scope 裡，
就算 function 回傳還是可以正常使用，也常用動態決定資料大小的情況。&lt;/p&gt;
&lt;p&gt;example :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// malloc, free, atoi&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please give a number&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="n"&gt;dynamic_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;more example (新 malloc 的記憶體真的是新的嗎？) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// malloc, free, atoi&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;



        &lt;span class="n"&gt;dynamic_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"first time&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// modify&lt;/span&gt;
            &lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



        &lt;span class="c1"&gt;// get some new memory&lt;/span&gt;
        &lt;span class="n"&gt;dynamic_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"second time&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dynamic_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please give a number&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="common-memory-problem"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Common Memory Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;管理&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;double free (清多次)&lt;/li&gt;
&lt;li&gt;memory leak (沒清到)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;use after free (清了還用)&lt;/li&gt;
&lt;li&gt;dangling pointer (清了還用)&lt;/li&gt;
&lt;li&gt;heap overflow (寫超過)&lt;/li&gt;
&lt;li&gt;stack buffer overflow (寫超過)&lt;/li&gt;
&lt;li&gt;buffer over-read (讀超過)&lt;/li&gt;
&lt;li&gt;stack overflow (用太多)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="double-free"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;double free&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// malloc, free&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"origin : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"assign : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g double-free.c -o double-free
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行&lt;/p&gt;
&lt;pre class="literal-block"&gt;
origin : 0
assign : 10
*** Error in `./double-free': double free or corruption (fasttop): 0x00000000013e3010 ***
======= Backtrace: =========
/usr/lib/libc.so.6(+0x71bad)[0x7ffb1c21cbad]
/usr/lib/libc.so.6(+0x770fe)[0x7ffb1c2220fe]
/usr/lib/libc.so.6(+0x778db)[0x7ffb1c2228db]
./double-free[0x4005fc]
/usr/lib/libc.so.6(__libc_start_main+0xf0)[0x7ffb1c1cb790]
./double-free[0x4004c9]
======= Memory map: ========
00400000-00401000 r-xp 00000000 00:1e 1685697                            /tmp/memory/double-free
00600000-00601000 rw-p 00000000 00:1e 1685697                            /tmp/memory/double-free
013e3000-01404000 rw-p 00000000 00:00 0                                  [heap]
7ffb1bf95000-7ffb1bfab000 r-xp 00000000 08:01 137661                     /usr/lib/libgcc_s.so.1
7ffb1bfab000-7ffb1c1aa000 ---p 00016000 08:01 137661                     /usr/lib/libgcc_s.so.1
7ffb1c1aa000-7ffb1c1ab000 rw-p 00015000 08:01 137661                     /usr/lib/libgcc_s.so.1
7ffb1c1ab000-7ffb1c344000 r-xp 00000000 08:01 134345                     /usr/lib/libc-2.21.so
7ffb1c344000-7ffb1c543000 ---p 00199000 08:01 134345                     /usr/lib/libc-2.21.so
7ffb1c543000-7ffb1c547000 r--p 00198000 08:01 134345                     /usr/lib/libc-2.21.so
7ffb1c547000-7ffb1c549000 rw-p 0019c000 08:01 134345                     /usr/lib/libc-2.21.so
7ffb1c549000-7ffb1c54d000 rw-p 00000000 00:00 0
7ffb1c54d000-7ffb1c56f000 r-xp 00000000 08:01 134444                     /usr/lib/ld-2.21.so
7ffb1c72a000-7ffb1c72d000 rw-p 00000000 00:00 0
7ffb1c76c000-7ffb1c76e000 rw-p 00000000 00:00 0
7ffb1c76e000-7ffb1c76f000 r--p 00021000 08:01 134444                     /usr/lib/ld-2.21.so
7ffb1c76f000-7ffb1c770000 rw-p 00022000 08:01 134444                     /usr/lib/ld-2.21.so
7ffb1c770000-7ffb1c771000 rw-p 00000000 00:00 0
7ffe79fa4000-7ffe79fc5000 rw-p 00000000 00:00 0                          [stack]
7ffe79fdf000-7ffe79fe1000 r--p 00000000 00:00 0                          [vvar]
7ffe79fe1000-7ffe79fe3000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
Aborted (core dumped)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-leak"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;memory leak&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// malloc&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// getpid&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pid : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"per size %lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// malloc, no free&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g memory-leak.c -o memory-leak
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;觀看 Memory 使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pmap -x &lt;span class="nv"&gt;$pid&lt;/span&gt;
30593:   ./a.out
Address           Kbytes     RSS   Dirty Mode  Mapping
&lt;span class="m"&gt;0000000000400000&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; r-x-- a.out
&lt;span class="m"&gt;0000000000600000&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt; rw--- a.out
&lt;span class="m"&gt;0000000002572000&lt;/span&gt;     &lt;span class="m"&gt;136&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt; rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fe14389b000    &lt;span class="m"&gt;1636&lt;/span&gt;    &lt;span class="m"&gt;1044&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; r-x-- libc-2.21.so
00007fe143a34000    &lt;span class="m"&gt;2044&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; ----- libc-2.21.so
00007fe143c33000      &lt;span class="m"&gt;16&lt;/span&gt;      &lt;span class="m"&gt;16&lt;/span&gt;      &lt;span class="m"&gt;16&lt;/span&gt; r---- libc-2.21.so
00007fe143c37000       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt; rw--- libc-2.21.so
00007fe143c39000      &lt;span class="m"&gt;16&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt; rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fe143c3d000     &lt;span class="m"&gt;136&lt;/span&gt;     &lt;span class="m"&gt;136&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; r-x-- ld-2.21.so
00007fe143e1b000      &lt;span class="m"&gt;12&lt;/span&gt;      &lt;span class="m"&gt;12&lt;/span&gt;      &lt;span class="m"&gt;12&lt;/span&gt; rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fe143e5c000       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt; rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fe143e5e000       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt; r---- ld-2.21.so
00007fe143e5f000       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt; rw--- ld-2.21.so
00007fe143e60000       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt; rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fff33951000     &lt;span class="m"&gt;132&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt; rw---   &lt;span class="o"&gt;[&lt;/span&gt; stack &lt;span class="o"&gt;]&lt;/span&gt;
00007fff3397a000       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; r----   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fff3397c000       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; r-x--   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
ffffffffff600000       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt; r-x--   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
---------------- ------- ------- -------
total kB            &lt;span class="m"&gt;4184&lt;/span&gt;    &lt;span class="m"&gt;1268&lt;/span&gt;      80
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /proc/&lt;span class="nv"&gt;$pid&lt;/span&gt;/smaps &lt;span class="p"&gt;|&lt;/span&gt; grep -A &lt;span class="m"&gt;15&lt;/span&gt; heap
02572000-02594000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 &lt;span class="m"&gt;0&lt;/span&gt;                                  &lt;span class="o"&gt;[&lt;/span&gt;heap&lt;span class="o"&gt;]&lt;/span&gt;
Size:                &lt;span class="m"&gt;136&lt;/span&gt; kB
Rss:                   &lt;span class="m"&gt;8&lt;/span&gt; kB
Pss:                   &lt;span class="m"&gt;8&lt;/span&gt; kB
Shared_Clean:          &lt;span class="m"&gt;0&lt;/span&gt; kB
Shared_Dirty:          &lt;span class="m"&gt;0&lt;/span&gt; kB
Private_Clean:         &lt;span class="m"&gt;0&lt;/span&gt; kB
Private_Dirty:         &lt;span class="m"&gt;8&lt;/span&gt; kB
Referenced:            &lt;span class="m"&gt;8&lt;/span&gt; kB
Anonymous:             &lt;span class="m"&gt;8&lt;/span&gt; kB
AnonHugePages:         &lt;span class="m"&gt;0&lt;/span&gt; kB
Swap:                  &lt;span class="m"&gt;0&lt;/span&gt; kB
KernelPageSize:        &lt;span class="m"&gt;4&lt;/span&gt; kB
MMUPageSize:           &lt;span class="m"&gt;4&lt;/span&gt; kB
Locked:                &lt;span class="m"&gt;0&lt;/span&gt; kB
VmFlags: rd wr mr mw me ac
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-after-free"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;use after free&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// malloc&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"use before free : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"use after free : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"use after free : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g use-after-free.c -o use-after-free
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./use-after-free
use before free : 9
use after free : 0
use after free : 10
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="heap-overflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;heap overflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// malloc, free&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;     &lt;/span&gt;&lt;span class="c1"&gt;// strlen&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"This is a test."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"This is a test. This is a test."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g heap-overflow.c -o heap-overflow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./heap-overflow
*** Error in &lt;span class="sb"&gt;`&lt;/span&gt;./heap-overflow&lt;span class="err"&gt;'&lt;/span&gt;: free&lt;span class="o"&gt;()&lt;/span&gt;: invalid next size &lt;span class="o"&gt;(&lt;/span&gt;fast&lt;span class="o"&gt;)&lt;/span&gt;: 0x000000000250e010 ***
&lt;span class="o"&gt;=======&lt;/span&gt; Backtrace: &lt;span class="o"&gt;=========&lt;/span&gt;
/usr/lib/libc.so.6&lt;span class="o"&gt;(&lt;/span&gt;+0x71bad&lt;span class="o"&gt;)[&lt;/span&gt;0x7f38d091cbad&lt;span class="o"&gt;]&lt;/span&gt;
/usr/lib/libc.so.6&lt;span class="o"&gt;(&lt;/span&gt;+0x770fe&lt;span class="o"&gt;)[&lt;/span&gt;0x7f38d09220fe&lt;span class="o"&gt;]&lt;/span&gt;
/usr/lib/libc.so.6&lt;span class="o"&gt;(&lt;/span&gt;+0x778db&lt;span class="o"&gt;)[&lt;/span&gt;0x7f38d09228db&lt;span class="o"&gt;]&lt;/span&gt;
./heap-overflow&lt;span class="o"&gt;[&lt;/span&gt;0x400669&lt;span class="o"&gt;]&lt;/span&gt;
/usr/lib/libc.so.6&lt;span class="o"&gt;(&lt;/span&gt;__libc_start_main+0xf0&lt;span class="o"&gt;)[&lt;/span&gt;0x7f38d08cb790&lt;span class="o"&gt;]&lt;/span&gt;
./heap-overflow&lt;span class="o"&gt;[&lt;/span&gt;0x400509&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;=======&lt;/span&gt; Memory map: &lt;span class="o"&gt;========&lt;/span&gt;
00400000-00401000 r-xp &lt;span class="m"&gt;00000000&lt;/span&gt; 00:1e &lt;span class="m"&gt;1894065&lt;/span&gt;                            /tmp/memory/heap-overflow
00600000-00601000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:1e &lt;span class="m"&gt;1894065&lt;/span&gt;                            /tmp/memory/heap-overflow
0250e000-0252f000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 &lt;span class="m"&gt;0&lt;/span&gt;                                  &lt;span class="o"&gt;[&lt;/span&gt;heap&lt;span class="o"&gt;]&lt;/span&gt;
7f38d0695000-7f38d06ab000 r-xp &lt;span class="m"&gt;00000000&lt;/span&gt; 08:01 &lt;span class="m"&gt;137661&lt;/span&gt;                     /usr/lib/libgcc_s.so.1
7f38d06ab000-7f38d08aa000 ---p &lt;span class="m"&gt;00016000&lt;/span&gt; 08:01 &lt;span class="m"&gt;137661&lt;/span&gt;                     /usr/lib/libgcc_s.so.1
7f38d08aa000-7f38d08ab000 rw-p &lt;span class="m"&gt;00015000&lt;/span&gt; 08:01 &lt;span class="m"&gt;137661&lt;/span&gt;                     /usr/lib/libgcc_s.so.1
7f38d08ab000-7f38d0a44000 r-xp &lt;span class="m"&gt;00000000&lt;/span&gt; 08:01 &lt;span class="m"&gt;134345&lt;/span&gt;                     /usr/lib/libc-2.21.so
7f38d0a44000-7f38d0c43000 ---p &lt;span class="m"&gt;00199000&lt;/span&gt; 08:01 &lt;span class="m"&gt;134345&lt;/span&gt;                     /usr/lib/libc-2.21.so
7f38d0c43000-7f38d0c47000 r--p &lt;span class="m"&gt;00198000&lt;/span&gt; 08:01 &lt;span class="m"&gt;134345&lt;/span&gt;                     /usr/lib/libc-2.21.so
7f38d0c47000-7f38d0c49000 rw-p 0019c000 08:01 &lt;span class="m"&gt;134345&lt;/span&gt;                     /usr/lib/libc-2.21.so
7f38d0c49000-7f38d0c4d000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 0
7f38d0c4d000-7f38d0c6f000 r-xp &lt;span class="m"&gt;00000000&lt;/span&gt; 08:01 &lt;span class="m"&gt;134444&lt;/span&gt;                     /usr/lib/ld-2.21.so
7f38d0e2a000-7f38d0e2d000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 0
7f38d0e6d000-7f38d0e6e000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 0
7f38d0e6e000-7f38d0e6f000 r--p &lt;span class="m"&gt;00021000&lt;/span&gt; 08:01 &lt;span class="m"&gt;134444&lt;/span&gt;                     /usr/lib/ld-2.21.so
7f38d0e6f000-7f38d0e70000 rw-p &lt;span class="m"&gt;00022000&lt;/span&gt; 08:01 &lt;span class="m"&gt;134444&lt;/span&gt;                     /usr/lib/ld-2.21.so
7f38d0e70000-7f38d0e71000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 0
7fffdc083000-7fffdc0a4000 rw-p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 &lt;span class="m"&gt;0&lt;/span&gt;                          &lt;span class="o"&gt;[&lt;/span&gt;stack&lt;span class="o"&gt;]&lt;/span&gt;
7fffdc13b000-7fffdc13d000 r--p &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 &lt;span class="m"&gt;0&lt;/span&gt;                          &lt;span class="o"&gt;[&lt;/span&gt;vvar&lt;span class="o"&gt;]&lt;/span&gt;
7fffdc13d000-7fffdc13f000 r-xp &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 &lt;span class="m"&gt;0&lt;/span&gt;                          &lt;span class="o"&gt;[&lt;/span&gt;vdso&lt;span class="o"&gt;]&lt;/span&gt;
ffffffffff600000-ffffffffff601000 r-xp &lt;span class="m"&gt;00000000&lt;/span&gt; 00:00 &lt;span class="m"&gt;0&lt;/span&gt;                  &lt;span class="o"&gt;[&lt;/span&gt;vsyscall&lt;span class="o"&gt;]&lt;/span&gt;
Aborted &lt;span class="o"&gt;(&lt;/span&gt;core dumped&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stack-buffer-overflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;stack buffer overflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g stack-buffer-overflow.c -o stack-buffer-overflow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./stack-buffer-overflow
x : 0
&lt;span class="nb"&gt;test&lt;/span&gt;
x : 7631717
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="buffer-over-read"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;buffer over-read&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'z'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c[0] : %c&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c[1] : %c&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;    &lt;span class="c1"&gt;// read x&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g buffer-over-read.c -o buffer-over-read
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./buffer-over-read
c&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt; : a
c&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt; : z
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stack-overflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;stack overflow&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stack_overflow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"count : %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;stack_overflow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stack_overflow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -O0 -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -g stack-overflow.c -o stack-overflow     &lt;span class="c"&gt;# avoid optimization&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debugger"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Debugger&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Valgrind&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="valgrind"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Valgrind&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id21"&gt;double free&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;valgrind ./double-free
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Valgrind output&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==22811== Memcheck, a memory error detector
==22811== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==22811== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==22811== Command: ./double-free
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7D3DC: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Use of uninitialised value of size 8
==22811==    at 0x4E7A33B: _itoa_word (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E7D6BD: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7A345: _itoa_word (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E7D6BD: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7D730: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7D4AB: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7D837: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7D4FB: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Conditional jump or move depends on uninitialised value(s)
==22811==    at 0x4E7D53B: vfprintf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4E84E38: printf (in /usr/lib/libc-2.21.so)
==22811==    by 0x4005C2: main (double-free.c:8)
==22811==
==22811== Invalid free() / delete / delete[] / realloc()
==22811==    at 0x4C2B200: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22811==    by 0x4005FB: main (double-free.c:12)
==22811==  Address 0x51d8040 is 0 bytes inside a block of size 4 free'd
==22811==    at 0x4C2B200: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22811==    by 0x4005EF: main (double-free.c:11)
==22811==
==22811==
==22811== HEAP SUMMARY:
==22811==     in use at exit: 0 bytes in 0 blocks
==22811==   total heap usage: 1 allocs, 2 frees, 4 bytes allocated
==22811==
==22811== All heap blocks were freed -- no leaks are possible
==22811==
==22811== For counts of detected and suppressed errors, rerun with: -v
==22811== Use --track-origins=yes to see where uninitialised values come from
==22811== ERROR SUMMARY: 9 errors from 9 contexts (suppressed: 0 from 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id22"&gt;memory leak&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;valgrind --leak-check&lt;span class="o"&gt;=&lt;/span&gt;full --show-leak-kinds&lt;span class="o"&gt;=&lt;/span&gt;all ./memory-leak
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Valgrind output&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==27173== Memcheck, a memory error detector
==27173== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==27173== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==27173== Command: ./memory-leak
==27173==
==27173==
==27173== HEAP SUMMARY:
==27173==     in use at exit: 32,000 bytes in 4 blocks
==27173==   total heap usage: 4 allocs, 0 frees, 32,000 bytes allocated
==27173==
==27173== 8,000 bytes in 1 blocks are still reachable in loss record 1 of 2
==27173==    at 0x4C29F90: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==27173==    by 0x400621: main (memory-leak.c:15)
==27173==
==27173== 24,000 bytes in 3 blocks are definitely lost in loss record 2 of 2
==27173==    at 0x4C29F90: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==27173==    by 0x400621: main (memory-leak.c:15)
==27173==
==27173== LEAK SUMMARY:
==27173==    definitely lost: 24,000 bytes in 3 blocks
==27173==    indirectly lost: 0 bytes in 0 blocks
==27173==      possibly lost: 0 bytes in 0 blocks
==27173==    still reachable: 8,000 bytes in 1 blocks
==27173==         suppressed: 0 bytes in 0 blocks
==27173==
==27173== For counts of detected and suppressed errors, rerun with: -v
==27173== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id23"&gt;use after free&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;valgrind ./use-after-free
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Valgrind output&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==32017== Memcheck, a memory error detector
==32017== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==32017== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==32017== Command: ./use-after-free
==32017==
==32017== Invalid read of size 4
==32017==    at 0x4005DD: main (use-after-free.c:16)
==32017==  Address 0x51d8040 is 0 bytes inside a block of size 4 free'd
==32017==    at 0x4C2B200: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==32017==    by 0x4005D8: main (use-after-free.c:14)
==32017==
==32017== Invalid read of size 4
==32017==    at 0x40060C: main (use-after-free.c:21)
==32017==  Address 0x51d8040 is 0 bytes inside a block of size 4 free'd
==32017==    at 0x4C2B200: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==32017==    by 0x4005D8: main (use-after-free.c:14)
==32017==
==32017==
==32017== HEAP SUMMARY:
==32017==     in use at exit: 4 bytes in 1 blocks
==32017==   total heap usage: 2 allocs, 1 frees, 8 bytes allocated
==32017==
==32017== LEAK SUMMARY:
==32017==    definitely lost: 4 bytes in 1 blocks
==32017==    indirectly lost: 0 bytes in 0 blocks
==32017==      possibly lost: 0 bytes in 0 blocks
==32017==    still reachable: 0 bytes in 0 blocks
==32017==         suppressed: 0 bytes in 0 blocks
==32017== Rerun with --leak-check=full to see details of leaked memory
==32017==
==32017== For counts of detected and suppressed errors, rerun with: -v
==32017== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id24"&gt;heap overflow&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;valgrind ./stack-overflow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Valgrind output&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==31005== Memcheck, a memory error detector
==31005== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==31005== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==31005== Command: ./heap-overflow
==31005==
==31005== Invalid write of size 1
==31005==    at 0x4C2D610: strcpy (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31005==    by 0x40065C: main (heap-overflow.c:12)
==31005==  Address 0x51d804f is 0 bytes after a block of size 15 alloc'd
==31005==    at 0x4C29F90: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31005==    by 0x400645: main (heap-overflow.c:10)
==31005==
==31005== Invalid write of size 1
==31005==    at 0x4C2D623: strcpy (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31005==    by 0x40065C: main (heap-overflow.c:12)
==31005==  Address 0x51d805f is 16 bytes after a block of size 15 alloc'd
==31005==    at 0x4C29F90: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31005==    by 0x400645: main (heap-overflow.c:10)
==31005==
==31005==
==31005== HEAP SUMMARY:
==31005==     in use at exit: 0 bytes in 0 blocks
==31005==   total heap usage: 1 allocs, 1 frees, 15 bytes allocated
==31005==
==31005== All heap blocks were freed -- no leaks are possible
==31005==
==31005== For counts of detected and suppressed errors, rerun with: -v
==31005== ERROR SUMMARY: 17 errors from 2 contexts (suppressed: 0 from 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id25"&gt;stack buffer overflow&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Valgrind 的 Memcheck 目前沒有針對 global / stack array 的 bounds checking，
但是有另外一個實驗的工具叫 "SGcheck" 可以偵測這類問題&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://valgrind.org/docs/manual/faq.html#faq.overruns"&gt;Why doesn't Memcheck find the array overruns in this program?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;valgrind --tool&lt;span class="o"&gt;=&lt;/span&gt;exp-sgcheck ./stack-buffer-overflow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Valgrind output&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==6617== exp-sgcheck, a stack and global array overrun detector
==6617== NOTE: This is an Experimental-Class Valgrind Tool
==6617== Copyright (C) 2003-2013, and GNU GPL'd, by OpenWorks Ltd et al.
==6617== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==6617== Command: ./stack-buffer-overflow
==6617==
==6617== Invalid write of size 1
==6617==    at 0x4E854A5: _IO_vfscanf (in /usr/lib/libc-2.21.so)
==6617==    by 0x4E9571E: __isoc99_scanf (in /usr/lib/libc-2.21.so)
==6617==    by 0x4005AE: main (stack-buffer-overflow.c:9)
==6617==  Address 0xfff0000cc expected vs actual:
==6617==  Expected: stack array "c" of size 1 in frame 2 back from here
==6617==  Actual:   unknown
==6617==  Actual:   is 0 after Expected
==6617==
==6617==
==6617== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id26"&gt;buffer over-read&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;暫時沒看到 Valgrind 上的解法 ...&lt;/p&gt;
&lt;p&gt;GCC 的話可以在 compile 時，加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-fsanitize=address&lt;/span&gt;&lt;/tt&gt; 參數來 check&lt;/p&gt;
&lt;p&gt;compile :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;c11 -fsanitize&lt;span class="o"&gt;=&lt;/span&gt;address -g buffer-over-read.c -o buffer-over-read
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./buffer-over-read
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output (terminal 上有上色)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
=================================================================
==10965==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffde2d80511 at pc 0x00000040095e bp 0x7ffde2d804d0 sp 0x7ffde2d804c0
READ of size 1 at 0x7ffde2d80511 thread T0
    #0 0x40095d in main /tmp/memory/buffer-over-read.c:13
    #1 0x7f43ee71a78f in __libc_start_main (/usr/lib/libc.so.6+0x2078f)
    #2 0x4007b8 in _start (/tmp/memory/buffer-over-read+0x4007b8)

Address 0x7ffde2d80511 is located in stack of thread T0 at offset 33 in frame
    #0 0x400895 in main /tmp/memory/buffer-over-read.c:5

  This frame has 1 object(s):
    [32, 33) 'c' &amp;lt;== Memory access at offset 33 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /tmp/memory/buffer-over-read.c:13 main
Shadow bytes around the buggy address:
  0x10003c5a8050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a8060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a8070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a8080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a8090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1
=&amp;gt;0x10003c5a80a0: f1 f1[01]f4 f4 f4 f3 f3 f3 f3 00 00 00 00 00 00
  0x10003c5a80b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a80c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a80d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a80e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10003c5a80f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==10965==ABORTING
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id27"&gt;stack overflow&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;valgrind ./stack-overflow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Valgrind output&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==12380== Memcheck, a memory error detector
==12380== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==12380== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==12380== Command: ./stack-overflow
==12380==
==12380== Stack overflow in thread 1: can't grow stack to 0xffe801ff8
==12380==
==12380== Process terminating with default action of signal 11 (SIGSEGV)
==12380==  Access not within mapped region at address 0xFFE801FF8
==12380==    at 0x4EA8E8A: _IO_file_write@@GLIBC_2.2.5 (in /usr/lib/libc-2.21.so)
==12380==  If you believe this happened as a result of a stack
==12380==  overflow in your program's main thread (unlikely but
==12380==  possible), you can try to increase the size of the
==12380==  main thread stack using the --main-stacksize= flag.
==12380==  The main thread stack size used in this run was 8388608.
==12380== Stack overflow in thread 1: can't grow stack to 0xffe801ff0
==12380==
==12380== Process terminating with default action of signal 11 (SIGSEGV)
==12380==  Access not within mapped region at address 0xFFE801FF0
==12380==    at 0x4A246D0: _vgnU_freeres (in /usr/lib/valgrind/vgpreload_core-amd64-linux.so)
==12380==  If you believe this happened as a result of a stack
==12380==  overflow in your program's main thread (unlikely but
==12380==  possible), you can try to increase the size of the
==12380==  main thread stack using the --main-stacksize= flag.
==12380==  The main thread stack size used in this run was 8388608.
==12380==
==12380== HEAP SUMMARY:
==12380==     in use at exit: 0 bytes in 0 blocks
==12380==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==12380==
==12380== All heap blocks were freed -- no leaks are possible
==12380==
==12380== For counts of detected and suppressed errors, rerun with: -v
==12380== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="raii-resource-acquisition-is-initialization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;RAII (Resource Acquisition Is Initialization)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RAII 為在數個 OO 語言中使用的 programming idiom，
為 C++ 於 1984 到 1989 年間發展出來，主要由 Bjarne Stroustrup 和 Andrew Koenig 來完成，
後來也用於 D、Ada、Vala、Rust 等語言。&lt;/p&gt;
&lt;p&gt;主要概念為把資源和物件的 lifetime 綁在一起，
當物件由 constructor 建立時，就做 resource allocation，
當物件由 destructor 拆掉時，就做 resource deallocation，
如此一來只要物件正常的拆掉，就不會有 resource leak 發生。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ownership"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Ownership&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pointer Ownership Model 會把 pointer 分成好幾個種類來區分出哪些資源需要被回收，
而這件事情會在編譯時期做處理，利用靜態分析來得知這些訊息，
但是這個靜態分析需要程式設計師在程式中提供一些訊息，
藉此才能提供強大的安全保證。&lt;/p&gt;
&lt;div class="section" id="c-smart-pointer"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;C++ Smart Pointer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 &lt;tt class="docutils literal"&gt;&amp;lt;memory&amp;gt;&lt;/tt&gt; 裡有以下幾種 pointer：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;unique_ptr&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;獨占的 ownership&lt;/li&gt;
&lt;li&gt;不可複製&lt;/li&gt;
&lt;li&gt;可以用 &lt;strong&gt;std::move()&lt;/strong&gt; 轉移所有權&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;shared_ptr&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;共享的 ownership&lt;/li&gt;
&lt;li&gt;使用 reference counting&lt;/li&gt;
&lt;li&gt;當 counter 變成 0 時就做 deallocation&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;weak_ptr&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;類似 shared_ptr，但是沒有權利做 deallocation&lt;/li&gt;
&lt;li&gt;不會增加 reference counter 的計算&lt;/li&gt;
&lt;li&gt;不能用來做資料的存取，主要用來監控 shared_ptr 的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了 ownership 後只要擁有者都不見了就代表可以清掉，
其中 C++ 有好幾種 pointer 來指定 ownership，
&lt;strong&gt;unique_ptr&lt;/strong&gt; 可以指定說只有自己是擁有者，
自己不用時就可以清掉，不用管其他人，
&lt;strong&gt;shared_ptr&lt;/strong&gt; 則是指定說會有多個人分享、使用，
當大家都不用時才清掉，
&lt;strong&gt;weak_ptr&lt;/strong&gt; 則是和 shared_ptr 類似，
但是沒有清除的權利，也不會被算進資源的使用者裡，當 shared_ptr 要清掉時，不用理 weak_ptr&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="garbage-collection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id31"&gt;Garbage Collection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;和前面提到自己管理記憶體的狀況相反的是自動管理記憶體，
這邊所要提的 Gabrage Collection 就是自動管理的一個方式。
Garbage Collection 不自己寫說要在什麼時候把記憶體回收，
而是等程式發現沒人要用的時候再自動回收，
缺點就是要多花點時間和記憶體，以及不確定回收的時間點，
優點就是不自己經手那些管理，可以減少出現 double free、dangling pointer 之類的 bug。&lt;/p&gt;
&lt;p&gt;Garbage Collection 這樣的技術早在 1959 年就由 John McCarthy 發明，
用來解決 Lisp 上的一些問題。
至今使用 Garbage Collection 的程式語言很多，
知名的 Java、Python、Ruby、Lua、Go 皆在這當中。&lt;/p&gt;
&lt;p&gt;Garbage Collection 主要分成兩大種類：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;reference counting&lt;/li&gt;
&lt;li&gt;tracing garbage collectors&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="reference-counting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;Reference Counting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;reference counting 就是在每個 object 後附上一個計數器，
有人用到就加一，不用了就減一，
當變成 0 時就代表沒有人在用了，
也就是說可以清掉，此時再自動做記憶體的回收。&lt;/p&gt;
&lt;p&gt;優點是好實作，缺點是每個 object 都需要一個計數器，
會多消耗一些記憶體，
另外如果有人互相使用的話就會形成 cycle，
此時計數器就永遠不會變成 0，
因此會需要額外的 cycle 偵測的演算法來處理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tracing-garbage-collectors"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;Tracing Garbage Collectors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;tracing garbage collectors 的概念則是一段時間後去爬那些給出去的記憶體，
看看有誰沒在用，沒在用的就清掉。&lt;/p&gt;
&lt;p&gt;tracing garbage collectors 有很多種實作方式，
不同實作方式會有不同的優缺點以及適合的狀況。&lt;/p&gt;
&lt;div class="section" id="basic-algorithm"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id34"&gt;Basic Algorithm&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mark-and-sweep&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最簡單的概念就是 mark-and-sweep，
爬過使用清單上的 object 做標記，
最後沒做到標記的 object 就是沒在用的，
此時就可以清掉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strategies"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id35"&gt;Strategies&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;由於 tracing garbage collectors 這邊依照實作的方式不同，
結果會有極大的差異，
所以當中又可以列出幾個實作的策略方向。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generational&lt;/li&gt;
&lt;li&gt;Incremental&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cases"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;Cases&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Python&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;CPython : GC with reference counting&lt;/li&gt;
&lt;li&gt;PyPy : GC with incremental generational tracing (incminimark)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="allocator-implementations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id37"&gt;Allocator Implementations&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;dlmalloc&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;general purpose allocator&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;ptmalloc2&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;改自 dlmalloc&lt;/li&gt;
&lt;li&gt;glibc 內建使用的 memory allocator&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;jemalloc&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;從 FreeBSD 7.0 和 NetBSD 5.0 開始，兩個 OS 上的 malloc 使用 Jason Evans 寫的 jemalloc 取代舊有的 phkmalloc&lt;/li&gt;
&lt;li&gt;用於 Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;tcmalloc&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;thread-caching malloc&lt;/li&gt;
&lt;li&gt;Google 開發的 malloc&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;nedmalloc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;hoard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;libumem&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;用於 Solaris&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ptmalloc2 是在 2006 年從 dlmalloc fork 出去，並且加上 multithreading 支援的版本，
後來取代 dlmalloc 成為 linux 上內建的 memory allocator。&lt;/p&gt;
&lt;div class="section" id="ptmalloc"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id38"&gt;ptmalloc&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;malloc_chunk&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;INTERNAL_SIZE_T&lt;/span&gt;      &lt;span class="n"&gt;prev_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* Size of previous chunk (if free).  */&lt;/span&gt;
    &lt;span class="n"&gt;INTERNAL_SIZE_T&lt;/span&gt;      &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Size in bytes, including overhead. */&lt;/span&gt;

    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;malloc_chunk&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* double links -- used only if free. */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;malloc_chunk&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Only used for large blocks: pointer to next larger size.  */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;malloc_chunk&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fd_nextsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* double links -- used only if free. */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;malloc_chunk&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bk_nextsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debugging-data-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id39"&gt;Debugging Data Format&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/"&gt;[2009] Anatomy of a Program in Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.sei.cmu.edu/post.cfm/using-the-pointer-ownership-model-to-secure-memory-management-in-c-and-c"&gt;[2013] Using the Pointer Ownership Model to Secure Memory Management in C and C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id41"&gt;Ownership&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kheresy.wordpress.com/2012/03/03/c11_smartpointer_p1/"&gt;[2012] 避免 memory leak：C++11 Smart Pointer（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kheresy.wordpress.com/2012/03/05/c11_smartpointer_p2/"&gt;[2012] 避免 memory leak：C++11 Smart Pointer（下）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="allocators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id42"&gt;Allocators&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/"&gt;[2015] Understanding glibc malloc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/emeryberger/Malloc-Implementations"&gt;[GitHub] emeryberger/Malloc-Implementations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://blog.reverberate.org/2009/02/one-malloc-to-rule-them-all.html"&gt;[2009] one malloc to rule them all&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919"&gt;[2011] Scalable memory allocation using jemalloc&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;algorithm behind jemalloc&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://jamesgolick.com/2013/5/19/how-tcmalloc-works.html"&gt;[2013] How tcmalloc Works&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://jamesgolick.com/2013/5/15/memory-allocators-101.html"&gt;[2013] Memory Allocators 101&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://locklessinc.com/benchmarks_allocator.shtml"&gt;Memory Allocator Benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.gii.upv.es/tlsf/files/papers/tlsf_slides.pdf"&gt;Dynamic Memory Management for Embedded Real-Time Systems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.andrew.cmu.edu/user/apodolsk/418/index.html"&gt;Nah Lock: A Lock-Free Memory Allocator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://symas.com/mdb/inmem/malloc/"&gt;[2015] Malloc Microbenchmark&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://smallcultfollowing.com/babysteps/blog/2014/11/14/allocators-in-rust/"&gt;[2014] Allocators in Rust&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.hoard.org/"&gt;Hoard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html"&gt;[2010] A look at how malloc works on the Mac&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://wiki.osdev.org/Memory_Allocation"&gt;OSDev wiki - Memory Allocation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.cs.umass.edu/~emery/pubs/berger-asplos2000.pdf"&gt;[2000] Hoard: A Scalable Memory Allocator for Multithreaded Applications&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://emeryberger.com/"&gt;Emery Berger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6118957"&gt;[2011] An Experimental Study on Memory Allocators in Multicore and Multithreaded Applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://g.oswego.edu/dl/html/malloc.html"&gt;dlmalloc - A Memory Allocator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.citi.umich.edu/projects/citi-netscape/reports/malloc.html"&gt;Projects: Linux scalability: malloc() performance report&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dwarf"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;DWARF&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1"&gt;How debuggers work: Part 1 - Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints"&gt;How debuggers work: Part 2 - Breakpoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information"&gt;How debuggers work: Part 3 - Debugging information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://eli.thegreenplace.net/2011/09/29/an-interesting-tree-serialization-algorithm-from-dwarf"&gt;An interesting tree serialization algorithm from DWARF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://eli.thegreenplace.net/2011/12/26/the-contents-of-dwarf-sections"&gt;The contents of DWARF sections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wikipedia"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id44"&gt;Wikipedia&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/C_dynamic_memory_allocation"&gt;Wikipedia - C dynamic memory allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Memory_management_unit"&gt;Wikipedia - Memory management unit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Virtual_memory"&gt;Wikipedia - Virtual memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Memory_management"&gt;Wikipedia - Memory management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bounds_checking"&gt;Wikipedia - Bounds checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Memory_debugger"&gt;Wikipedia - Memory debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tracing_garbage_collection"&gt;Wikipedia - Tracing garbage collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hoard_memory_allocator"&gt;Wikipedia - Hoard memory allocator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Smart_pointer"&gt;Wikipedia - Smart pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/DWARF"&gt;Wikipedia - DWARF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="memory"></category><category term="malloc"></category></entry><entry><title>ARM - Raspberry Pi</title><link href="/posts/2015/06/arm-rpi/" rel="alternate"></link><updated>2015-06-13T21:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-06-13:posts/2015/06/arm-rpi/</id><summary type="html">&lt;p&gt;最近因為一些事需要嘗試看看 Raspberry Pi 跑 Computer Vision 相關程式的狀況，
手邊拿到的 Raspberry Pi 是第一代的 Model B，
硬體狀況如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CPU 是單核的 ARM1176JZFS (架構為 ARMv6l) (Broadcom BCM2835 700MHz)，&lt;/li&gt;
&lt;li&gt;RAM 則是 512 MB (CPU、GPU 共用)，&lt;/li&gt;
&lt;li&gt;GPU 為 Broadcom VideoCore IV (250 MHz)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根據 Wikipedia 上的紀錄，這顆 CPU 的效能大約到 0.041 GFLOPS，
差不多是 1997 ~ 1999 年 300 MHz Pentium II 的效能。
而 GPU 則可以達到 24 GFLOPS，大約為 2001 年的 Xbox。&lt;/p&gt;
&lt;p&gt;今年 (2015) Raspberry Pi 有推出了第二代，
Raspberry Pi 2 的 CPU 有升級，GPU 則維持不變，
CPU 變為四核的 ARM Cortex-A7 (架構就變為 ARMv7l) (Broadcom BCM2836 900MHz)，
相比 2012 年推出的第一代，CPU 效能應該有不少的提升。&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;這邊因為本身是 Arch Linux 慣用者，
所以選用了 Arch Linux ARM，
在安裝上官網直接提供 &lt;a class="reference external" href="http://archlinuxarm.org/platforms/armv6/raspberry-pi#qt-platform_tabs-ui-tabs2"&gt;針對 Raspberry Pi&lt;/a&gt; 的整個流程&lt;/p&gt;
&lt;p&gt;這邊的官方 Installation 會直接把準備好的系統檔案放進去 SD Card，
照著說明做完後，
預設啟動會使用 DHCP 來連網路，
可以在 &lt;tt class="docutils literal"&gt;/etc/systemd/network/eth0.network&lt;/tt&gt; 做修改，
預設：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Match]
Name=eth0

[Network]
DHCP=yes
&lt;/pre&gt;
&lt;p&gt;修改成 static IP (假如想要的話)：(IP 純脆亂設當範例)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Match]
Name=eth0

[Network]
DNS=8.8.8.8

[Address]
Address=202.169.175.123

[Route]
Gateway=202.169.175.256
&lt;/pre&gt;
&lt;p&gt;剛裝完的系統很多開發用的工具都沒有，
所以需要的話都要另外裝 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cross-compile"&gt;
&lt;h2&gt;Cross Compile&lt;/h2&gt;
&lt;p&gt;[Todo]&lt;/p&gt;
&lt;p&gt;由於 Raspberry Pi 上面的運算能力沒有很強，
如果想要編譯大量東西時會需要不少時間，
所以開始尋求在一般伺服器 (Intel x86-64 CPU) 上編譯出適合 Raspberry Pi ARM 的執行檔&lt;/p&gt;
&lt;p&gt;Raspberry Pi 上面如果有裝 GCC 可以用的話，
可以用以下 command 來看一些優化之不支援：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -march&lt;span class="o"&gt;=&lt;/span&gt;native -Q --help&lt;span class="o"&gt;=&lt;/span&gt;target
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊也可以從吐出來的訊息中看到可以在 GCC 裡使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-march=armv6zk&lt;/span&gt;&lt;/tt&gt; 來針對這顆 CPU 做優化。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="control"&gt;
&lt;h2&gt;Control&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2012/06/simple-guide-to-the-rpi-gpio-header-and-pins/"&gt;Simple Guide to the RPi GPIO Header and Pins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Layout (Raspberry Pi GPIO Layout – Revision 2)：&lt;/p&gt;
&lt;img alt="Raspberry Pi GPIO Layout – Revision 2" src="/img/rpi/layout-rpi-model-b.png" /&gt;
&lt;div class="section" id="gpio"&gt;
&lt;h3&gt;GPIO&lt;/h3&gt;
&lt;div class="section" id="wiringpi"&gt;
&lt;h4&gt;WiringPi&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="http://wiringpi.com"&gt;官網&lt;/a&gt; 如是說：
&amp;quot;WiringPi is a GPIO access library written in C for the BCM2835 used in the Raspberry Pi.&amp;quot;&lt;/p&gt;
&lt;p&gt;安裝只要用 git 把 repo clone 下來後執行 script 就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://git.drogon.net/wiringPi
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;wiringPi
&lt;span class="nv"&gt;$ &lt;/span&gt;./build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裝完後會出現之後要 compile 相關程式時，
所需要的 linker 參數提示：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NOTE: To compile programs with wiringPi, you need to add:
    -lwiringPi
  to your compile line(s) To use the Gertboard, MaxDetect, etc.
  code (the devLib), you need to also add:
    -lwiringPiDev
  to your compile line(s).
&lt;/pre&gt;
&lt;p&gt;除此之外，也多了一個 command 叫 &lt;tt class="docutils literal"&gt;gpio&lt;/tt&gt; ；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpio -v
gpio version: 2.26
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 2012-2015 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details &lt;span class="nb"&gt;type&lt;/span&gt;: gpio -warranty

Raspberry Pi Details:
  Type: Model B, Revision: 2, Memory: 512MB, Maker: Sony
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;讀資訊：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpio readall
 +-----+-----+---------+------+---+-Model B2-+---+------+---------+-----+-----+
 &lt;span class="p"&gt;|&lt;/span&gt; BCM &lt;span class="p"&gt;|&lt;/span&gt; wPi &lt;span class="p"&gt;|&lt;/span&gt;   Name  &lt;span class="p"&gt;|&lt;/span&gt; Mode &lt;span class="p"&gt;|&lt;/span&gt; V &lt;span class="p"&gt;|&lt;/span&gt; Physical &lt;span class="p"&gt;|&lt;/span&gt; V &lt;span class="p"&gt;|&lt;/span&gt; Mode &lt;span class="p"&gt;|&lt;/span&gt; Name    &lt;span class="p"&gt;|&lt;/span&gt; wPi &lt;span class="p"&gt;|&lt;/span&gt; BCM &lt;span class="p"&gt;|&lt;/span&gt;
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;    3.3v &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; 5v      &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   SDA.1 &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; 5V      &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   SCL.1 &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; 0v      &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ALT0 &lt;span class="p"&gt;|&lt;/span&gt; TxD     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;      0v &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ALT0 &lt;span class="p"&gt;|&lt;/span&gt; RxD     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; 0v      &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;    3.3v &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;    MOSI &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; 0v      &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;    MISO &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; GPIO. &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;    SCLK &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; CE0     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;      0v &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; CE1     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; GPIO.17 &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;51&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;52&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; GPIO.18 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; GPIO.19 &lt;span class="p"&gt;|&lt;/span&gt;   IN &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;53&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="m"&gt;54&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; IN   &lt;span class="p"&gt;|&lt;/span&gt; GPIO.20 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 &lt;span class="p"&gt;|&lt;/span&gt; BCM &lt;span class="p"&gt;|&lt;/span&gt; wPi &lt;span class="p"&gt;|&lt;/span&gt;   Name  &lt;span class="p"&gt;|&lt;/span&gt; Mode &lt;span class="p"&gt;|&lt;/span&gt; V &lt;span class="p"&gt;|&lt;/span&gt; Physical &lt;span class="p"&gt;|&lt;/span&gt; V &lt;span class="p"&gt;|&lt;/span&gt; Mode &lt;span class="p"&gt;|&lt;/span&gt; Name    &lt;span class="p"&gt;|&lt;/span&gt; wPi &lt;span class="p"&gt;|&lt;/span&gt; BCM &lt;span class="p"&gt;|&lt;/span&gt;
 +-----+-----+---------+------+---+-Model B2-+---+------+---------+-----+-----+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Physical 是原本 Layout 上的編號，wPi 是 WiringPi 內部用的編號，
在使用 &lt;strong&gt;gpio&lt;/strong&gt; 指令時預設是吃 wPi 的編號 (pin)&lt;/p&gt;
&lt;p&gt;GPIO 的模式：&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="44%" /&gt;
&lt;col width="56%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Mode&lt;/th&gt;
&lt;th class="head"&gt;Display&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;out&lt;/td&gt;
&lt;td&gt;OUT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pwm&lt;/td&gt;
&lt;td&gt;ALT5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;clock&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;模式切換 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpio mode &amp;lt;pin&amp;gt; &amp;lt;mode&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wiringpi.com/the-gpio-utility/"&gt;The GPIO utility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="camera-module"&gt;
&lt;h3&gt;Camera Module&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.raspberrypi.org/products/camera-module/"&gt;Camera Module - Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raspberry Pi 的 Camera Module 可用在 Raspberry Pi 和 Raspberry Pi 2，
支援到 1080p30、720p60、VGA90&lt;/p&gt;
&lt;p&gt;Python 上控制 Raspberry Pi camera module 的 library 常見的為 &lt;a class="reference external" href="http://picamera.readthedocs.org"&gt;picamera&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="performance-testing"&gt;
&lt;h2&gt;Performance Testing&lt;/h2&gt;
&lt;p&gt;目前只先拿了 OpenCV 的 Image Stitching 範例來跑看看，
實際的東西放在這邊 &lt;a class="reference external" href="https://github.com/wdv4758h/image_stitching"&gt;[GitHub] wdv4758h/image_stitching&lt;/a&gt; ，
測資為 images 資料夾裡的 A001.jpg ~ A003.jpg，
&amp;quot;OpenCV 2.4 sample&amp;quot; 在我的筆電上跑 (Intel i5-3210M) 大約需要 1.5 秒，
在 Raspberry Pi 上面則大約需要 81 秒。&lt;/p&gt;
&lt;p&gt;之後應該要看能不能利用 GPU 來跑快一點 ~&amp;quot;~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://archlinuxarm.org/platforms/armv6/raspberry-pi"&gt;Raspberry Pi | Arch Linux ARM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://coldnew.github.io/blog/2013/06/27_1aced.html"&gt;讓你的 Raspberry Pi 透過 GPIO 閃爍 LED 燈&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;用純 C 控制 GPIO，不依靠 library&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="ARM"></category><category term="Raspberry Pi"></category></entry><entry><title>Krita - Open Source digital painting</title><link href="/posts/2015/05/krita/" rel="alternate"></link><updated>2015-05-07T22:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-05-07:posts/2015/05/krita/</id><summary type="html">&lt;p&gt;Krita 是一個繪圖軟體，
不管是介面操作還是功能，
都算是目前在 Open Source 繪圖軟體中最有實力和市面上商業軟體較競的，
國外也有社群在使用，
也有國外的大學在課程中開始使用 Krita ~&lt;/p&gt;
&lt;p&gt;希望可以把 Open Source 大幅傳入繪圖軟體市場 XDDD&lt;/p&gt;
&lt;img alt="Krita" src="/img/krita.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kickstarter.com/projects/krita/krita-open-source-digital-painting-accelerate-deve"&gt;Kickstarter - Krita: open source digital painting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Krita"></category><category term="Painting"></category></entry><entry><title>OpenMP 入門</title><link href="/posts/2015/05/openmp-intro/" rel="alternate"></link><updated>2015-05-07T21:39:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-05-07:posts/2015/05/openmp-intro/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;OpenMP 全名叫 Open Multi-Processing，
是由 OpenMP Architecture Review Board 這個非營利組織所訂定的跨平台 API 規範，
目標是要幫現有的程式快速的加上多核心支援，
語言支援有 C、C++、Fortran，
內容包含 compiler directives、library routines、environment variables。&lt;/p&gt;
&lt;div class="section" id="compiler-support"&gt;
&lt;h3&gt;Compiler Support&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GCC 從 4.2 開始支援 OpenMP&lt;/li&gt;
&lt;li&gt;Clang 在 3.6 時還沒有完整的支援&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="47%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="18%" /&gt;
&lt;col width="21%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;OpenMP Version&lt;/th&gt;
&lt;th class="head"&gt;GCC&lt;/th&gt;
&lt;th class="head"&gt;icc&lt;/th&gt;
&lt;th class="head"&gt;Clang&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;10.1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Current Compiler Version&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;GCC : 5.1, 2015-04-22&lt;/li&gt;
&lt;li&gt;Clang : 3.6, 2015-02-27&lt;/li&gt;
&lt;li&gt;Intel C++ Compiler : 15.0.2, 2015-01-22&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fopenmp&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://openmp.org/wp/openmp-compilers/"&gt;OpenMP Compilers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://openmp.llvm.org/"&gt;LLVM - OpenMP&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/clang-omp/clang/wiki/Status-of-supported-OpenMP-constructs"&gt;Clang - Status of supported OpenMP constructs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;GCC&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-fopenmp&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gcc.gnu.org/wiki/openmp"&gt;GCC - OpenMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// sleep sort&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt; &lt;/span&gt;&lt;span class="c1"&gt;// sleep&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sleep_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cp"&gt;#pragma omp parallel num_threads(length)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cp"&gt;#pragma omp for&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%llu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sscanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%llu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;sleep_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OpenMP 會利用 directive 來增加 multithread 支援，
起手勢為 &lt;tt class="docutils literal"&gt;#pragma omp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;在 GCC 中， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-fopenmp&lt;/span&gt;&lt;/tt&gt; 會在 link 時加上 &lt;tt class="docutils literal"&gt;libgomp&lt;/tt&gt; 這個 runtime library，
libgomp 會由 CPU 核心數來決定要開的 thread 數&lt;/p&gt;
&lt;p&gt;在 C/C++ 標準中，如果遇到不支援的 &lt;tt class="docutils literal"&gt;#pragma&lt;/tt&gt; 就直接忽略，
所以這樣增加 OpenMP 的支援不會造成舊 compiler 編譯時出現問題。&lt;/p&gt;
&lt;p&gt;經由 &lt;tt class="docutils literal"&gt;omp.h&lt;/tt&gt; 可以存取一個 runtime library，
但是這通常不需要，
如果要的話可以從 &lt;tt class="docutils literal"&gt;#define _OPENMP&lt;/tt&gt; 得知對於不支援的 compiler 會如何處理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syntax"&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;div class="section" id="parallel"&gt;
&lt;h4&gt;parallel&lt;/h4&gt;
&lt;p&gt;使用 parallel pragma 來開始一個 parallel block，
程式會 runtime 決定要開多少 thread，
平行化的範圍是 parallel pragma 後的 statement 或 block，
結束後 thread 就會收回。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp parallel&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code inside this region runs in parallel.&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;實作上，GCC 會產生一個 magic function，把相關的 code 都放進去，
如此一來 block 裡個變數都是 function 的 local variable (在不同 thread 也是 local)。
ICC 則是使用類似 fork 的機制，而非使用 magic function。
兩種實作都會正常運作。&lt;/p&gt;
&lt;p&gt;不同 context 間的變數的分享是自動處理的，
有時候是用 reference，有時候是用 register 變數 (離開 parallel block 或是執行 flush 時會清掉)&lt;/p&gt;
&lt;p&gt;OpenMP 的平行化只要搭配 if clause 就可以使用 condition 來開關&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp parallel for if(parallelism_enabled)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="loop-directive-for"&gt;
&lt;h4&gt;Loop directive: for&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp for&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這段 code 和以下 code 等價 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;this_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;omp_get_thread_num&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;num_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;omp_get_num_threads&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_thread&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;num_threads&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_thread&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;num_threads&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中， &lt;tt class="docutils literal"&gt;omp_get_thread_num&lt;/tt&gt; 取得的是現在這個 thread 的編號，
&lt;tt class="docutils literal"&gt;omp_get_num_threads&lt;/tt&gt; 取得的是總共有多少 thread。
在只有單條 thread 的情況下，this_thread 就會是 0，
num_threads 就會是 1，
start 和 end 的話則是把 for 裡的範圍分配給各個 thread，
每個 thread 會拿到 loop 裡的不同 section，如此一來每個 section 會各自平行執行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scheduling"&gt;
&lt;h4&gt;Scheduling&lt;/h4&gt;
&lt;p&gt;預設的 schedule 是 static，在進入 loop 時，各 loop 會各自決定要計算的部份。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp for schedule(static)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 dynamic 的 schedule 中，不會事先決定好每個 thread 要跑哪個部份，
每個 thread 會去詢問 OpenMP runtime library 來取得 iteration number 然後運算，
算完後再要下一個。常和 &lt;tt class="docutils literal"&gt;ordered&lt;/tt&gt; 一起使用，或是不同的 iteration 會需要不同時間來執行時。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp for schedule(dynamic)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外可以指定一次分配多少個 iteration 來減少詢問 OpenMP runtime library 的次數 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp for schedule(dynamic, 3)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ordered"&gt;
&lt;h4&gt;ordered&lt;/h4&gt;
&lt;p&gt;指定 code 中的某部份需要照順序執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp for ordered schedule(dynamic)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cp"&gt;#pragma omp ordered&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sections"&gt;
&lt;h4&gt;Sections&lt;/h4&gt;
&lt;p&gt;指定多個 block 可以平行執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp sections&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Work1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#pragma omp section&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Work2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;Work3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#pragma omp section&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Work4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp parallel &lt;/span&gt;&lt;span class="c1"&gt;// starts a new team&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Work0(); // this function would be run by all threads.&lt;/span&gt;

    &lt;span class="cp"&gt;#pragma omp sections &lt;/span&gt;&lt;span class="c1"&gt;// divides the team into sections&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// everything herein is run only once.&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Work1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="cp"&gt;#pragma omp section&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Work2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Work3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="cp"&gt;#pragma omp section&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Work4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//Work5(); // this function would be run by all threads.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tasks-openmp-3-0"&gt;
&lt;h4&gt;tasks (OpenMP 3.0)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;postorder_traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="cp"&gt;#pragma omp task &lt;/span&gt;&lt;span class="c1"&gt;// p is firstprivate by default&lt;/span&gt;
        &lt;span class="n"&gt;postorder_traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="cp"&gt;#pragma omp task &lt;/span&gt;&lt;span class="c1"&gt;// p is firstprivate by default&lt;/span&gt;
        &lt;span class="n"&gt;postorder_traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cp"&gt;#pragma omp taskwait&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了起手勢 &lt;tt class="docutils literal"&gt;#pragma omp&lt;/tt&gt; 後，可以接以下東西 :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;parallel&lt;/td&gt;
&lt;td&gt;建 thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;把 for 切給各個 thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;num_threads(N)&lt;/td&gt;
&lt;td&gt;指定要開 N 個 thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ordered&lt;/td&gt;
&lt;td&gt;指定 code 中的某部份需要照順序執行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;sections / section&lt;/td&gt;
&lt;td&gt;指定多個 block 可以平行執行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;atomic&lt;/td&gt;
&lt;td&gt;只能用於簡單的運算 (例如加法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;critical&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;reduction&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flush&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;firstprivate&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;shared&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;lastprivate&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;barrier&lt;/td&gt;
&lt;td&gt;一條分界線，後面的 code 會等所有 thread 把前面都執行完後才開始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;nowait&lt;/td&gt;
&lt;td&gt;這個 statement 或 block 可以不用等，先執行完的 thread 可以繼續 (例如搭配 for 來使用)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;single&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;master&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;collapse(N)&lt;/td&gt;
&lt;td&gt;(搭配 for 使用) 處理 N 層的 Nested Loops&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;OpenMP 2.5 中，for 裡的 iteration variable 必需是 signed integer。
OpenMP 3.0 中，還可以是 unsigned integer、pointer、constant-time random access iterator，
iterator 的 case 會使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::distance()&lt;/span&gt;&lt;/tt&gt; 來判斷 loop 的次數。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="problem"&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;div class="section" id="nested-loops"&gt;
&lt;h4&gt;Nested Loops&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裡面那層的 OpenMP code 實際上不會平行化。&lt;/p&gt;
&lt;p&gt;OpenMP 3.0 中加入了 collapse 可以解決這個狀況 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#pragma omp parallel for collapse(2)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效能方面，因為 libgomp 夠聰明，所以這種多層的平行化不會一直建立和回收 thread，
建立次數 (&lt;tt class="docutils literal"&gt;clone&lt;/tt&gt; system call) 會和 concurrent threads 的最大數量一樣，
parallel 不單純是 pthread_create 和 pthread_join 的結合。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bisqwit.iki.fi/story/howto/openmp/"&gt;Guide into OpenMP: Easy multithreading programming for C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/OpenMP"&gt;Wikipedia - OpenMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="C"></category></entry><entry><title>GC again - Vim</title><link href="/posts/2015/04/gc-again-vim/" rel="alternate"></link><updated>2015-04-13T14:22:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-04-13:posts/2015/04/gc-again-vim/</id><summary type="html">&lt;img alt="Keep Calm" src="/img/keep-calm-and-be-careful.png" /&gt;
&lt;p&gt;前幾天覺得裝在筆電上的 neovim 也好久沒去更新了，來看看近期有什麼新進展，
後來就看到這個 GC 相關的 issue，留做紀錄 XD&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/neovim/neovim/issues/1687"&gt;(Neo)Vim hangs with freeing a lot of objects #1687&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/neovim/neovim/pull/1761"&gt;[RFC] Speed up garbage collection (Issue 1687). #1761&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!searchin/vim_dev/GC/vim_dev/DBYOdHQWvqY/1WH04_dwETIJ"&gt;Vim hangs with freeing a lot of objects. Patch for performance-up of GC.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
Without this patch, it take 100 seconds to finish GC.
And if set 100000 instead of 50000, vim often hangs.
With this patch, it take just 0.133967 seconds.
&lt;/pre&gt;
&lt;p&gt;又是一個改 GC 後，某處獲得性能提升的例子 (X&lt;/p&gt;
</summary><category term="Vim"></category><category term="GC"></category></entry><entry><title>[WIP] History of BSD</title><link href="/posts/2015/04/history-of-bsd/" rel="alternate"></link><updated>2015-04-09T01:23:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-04-09:posts/2015/04/history-of-bsd/</id><summary type="html">&lt;p&gt;這學期修了一門叫做「自由開源軟體與專案協作」的課 (看到自由開源軟體這麼對胃口的課就修下去了 (?))，
作業一被 Jserv 要求看一些 CS 歷史相關的影片，其中一部是 &lt;a class="reference external" href="https://www.youtube.com/watch?v=ds77e3aO9nA"&gt;《A Narrative History of BSD》&lt;/a&gt; ，由 BSD 知名的開發者 Kirk McKusick 來簡述歷史的一段影片，
片中講到早期 Bill Joy 還沒加入 Sun 的時間，以及後續的發展歷程。&lt;/p&gt;
&lt;p&gt;在看影片的過程中我有紀錄下來 Kirk McKusick 描述的話，
後來我在整理的時候開始想用文字做更完整的紀錄，
於是先去找了相關文章，後來發現了一些比較完整一點的中文紀錄。
於是就開始基於那些文章做修改，加上影片的內容以及其他相關的資訊，
慢慢整理成一篇更完整的紀錄。&lt;/p&gt;
&lt;p&gt;(目前還沒全部完成，等比較有空會繼續做，完成後應該會移過來吧)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fossapc.hackpad.com/Homework-1-YMW0xMrUczk#:h=A-Narrative-History-of-BSD"&gt;紀錄連結 ~~~&lt;/a&gt;&lt;/p&gt;
</summary><category term="BSD"></category></entry><entry><title>[WIP] Artificial Neural Network - Again</title><link href="/posts/2015/04/artificial-neural-network-agaion/" rel="alternate"></link><updated>2015-04-05T22:48:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-04-05:posts/2015/04/artificial-neural-network-agaion/</id><summary type="html">&lt;p&gt;&lt;strong&gt;[WIP] 持續更改中&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="artificial-neural-network"&gt;
&lt;h2&gt;Artificial Neural Network&lt;/h2&gt;
&lt;p&gt;Artificial Neural Network，中文有時翻做「類神經網路」，
顧名思義就是想模擬生物大腦的神經系統來解決生物能迅速做到但電腦還不能做到的事情。&lt;/p&gt;
&lt;p&gt;其實當初就覺得有點興趣，想投入時間進去學一下，
所以在大二下的時候就有去修了系上一門叫「類神經網路」的課，
但是中間覺得老師上課實在太無聊 ...，後來就決定退掉，
那時候每次上課都只有個位數的學生到場 Orz ...&lt;/p&gt;
&lt;p&gt;這學期 (大三下) 去修了研究所的「電腦視覺」，
剛好也碰到一些跟類神經有關的地方，
再加上近期也一直在各個地方看到相關訊息，
於是還是來好好補強一下 :P (還債)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;早在 1943 年的時候，Warren McCulloch 和 Walter Pitts 就基於數學和演算法提出了類神經的計算模型，
被稱為 &amp;quot;threshold logic&amp;quot;。從這模型之後，類神經的研究就分成兩邊，一邊致力於模擬生物的大腦，
另一邊則專注在應用於人工智慧領域。&lt;/p&gt;
&lt;p&gt;在 1940 年代晚期，心理學家 Donald Hebb 基於突觸的可塑性提出了學習的假說，
被稱為 Hebbian learning。其理論為持續重複的刺激會讓突觸傳遞效能增加
(像是平常不斷做某個動作，那這個動作的反應時間就會降低)，
常被總結為 &amp;quot;Cells that fire together, wire together&amp;quot;。
Hebbian learning 被視為典型的非監督式學習，其後來的變種成為 long term potentiation (LTP) 的早期模型。
後來在 1948 年和 Turing's B-type machines (Unorganized machine) 開始運用在運算模型。&lt;/p&gt;
&lt;p&gt;1954 年，Farley 和 Wesley A. Clark 在 MIT 用實際的機器來模擬 Hebbian network。
其他類神經計算的機器由 Rochester, Holland, Habit, Duda 在 1956 年製造。&lt;/p&gt;
&lt;p&gt;1958 年，Frank Rosenblatt 提出了 perceptron (感知器)，
perceptron 是一個用於 pattern recognition 的演算法，
作法是利用簡單的加減法來做兩層的學習。
除了數學式子，Rosenblatt 也說明了基本的 perceptron 不支援一些處理，
例如 exclusive-or，exclusive-or 的問題到了 1975 年 Paul Werbos 提出 backpropagation 的作法才解決。&lt;/p&gt;
&lt;p&gt;類神經的發展在 Marvin Minsky 和 Seymour Papert 發表 machine learning 的研究後停滯，
因為裡頭提到了兩個相當重要的問題，
其中一個就是單層的 perceptron 不能解 exclusive-or 的問題，
另一個是電腦還沒複雜到足以有效率地應付類神經所需要的長時間運算。
研究就此緩慢了下來，直到電腦變得更有效率，
以及 1975 年 Paul Werbos 提出 backpropagation 的作法解決了 exclusive-or 的問題。&lt;/p&gt;
&lt;p&gt;1980 年代中期，parallel distributed processing 在 connectionism 的發展下流行起來
(parallel distributed processing 有時簡稱為 PDP，跟 DEC 出的 PDP 衝名啦 XD)，
David E. Rumelhart 和 James McClelland 在 1986 年提供了利用 connectionism 來模擬神經運作的完整說明。&lt;/p&gt;
&lt;p&gt;類神經在人工智慧領域一向被視為大腦神經運作的簡化模型，
但其實這模型和實際大腦運作的架構的相關性一直遭到質疑，
因為類神經沒有很明確地是模擬大腦哪個部份的功能。&lt;/p&gt;
&lt;p&gt;後來類神經在 machine learning 的領域上逐漸被 SVM (support vector machines)
和其他較簡單的方式 (例如 linear classifiers) 取代。
直到 2000 年代末期 deep learning 的到來才讓類神經又逐漸受到更多的注目。&lt;/p&gt;
&lt;p&gt;2009 年到 2012 年間，
來自 Swiss AI Lab IDSIA 的 Jürgen Schmidhuber 的研究團隊開發了
recurrent neural networks 和 deep feedforward neural networks
贏得了諸多 pattern recognition 和 machine learning 的比賽。
舉例來說，在 2009 年的 ICDAR (International Conference on Document Analysis and Recognition)，
Alex Graves 等人的 bi-directional 和 multi-dimensional long short term memory (LSTM)
就在沒有三種語言的背景知識下贏了三場手寫辨識比賽。&lt;/p&gt;
&lt;p&gt;Dan Ciresan 和 IDSIA 的同事做了利用 GPU 的快速實作，
也因此贏得了諸多比賽 (例如 IJCNN 2011 Traffic Sign Recognition Competition、
ISBI 2012 Segmentation of Neuronal Structures in Electron Microscopy Stacks challenge)。
他們的類神經網路是第一個在辨識上可以跟人類競爭的，
甚至在一些項目中可以達到超過人類的辨識率
(例如 traffic sign recognition (IJCNN 2012)、MNIST handwritten digits problem of Yann LeCun at NYU)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Deep_learning"&gt;Wikipedia - Deep learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Artificial_neural_network"&gt;Wikipedia - Artificial neural network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Unorganized_machine"&gt;Wikipedia - Unorganized machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Long-term_potentiation"&gt;Wikipedia - Long-term potentiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Backpropagation"&gt;Wikipedia - Backpropagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Long_short_term_memory"&gt;Wikipedia - Long short term memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Connectionism"&gt;Wikipedia - Connectionism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/MNIST_database"&gt;Wikipedia - MNIST database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="ANN"></category></entry><entry><title>2001: A Space Odyssey (2001 太空漫遊)</title><link href="/posts/2015/04/2001-a-space-odyssey/" rel="alternate"></link><updated>2015-04-03T15:02:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-04-03:posts/2015/04/2001-a-space-odyssey/</id><summary type="html">&lt;p&gt;《2001: A Space Odyssey》是一部 &lt;strong&gt;1968&lt;/strong&gt; 年上映的經典科幻片，
故事改編自 Arthur Clark 寫的一些短篇，
由 Arthur Clark (作家) 和 Stanley Kubrick (導演) 共同創作，
電影拍攝的同時 Arthur Clark 也在創作小說，
最後小說和電影在同一時期面世。&lt;/p&gt;
&lt;p&gt;電影於 1964 年開始拍攝，當時國際仍處於冷戰時期 (1947 ~ 1991)，而且正值太空競賽期間 (1957 ~ 1975)。
1961 年 4 月蘇聯才剛送上第一位太空人 (當時蘇聯的太空技術領先美國)，
種種因素迫使美國投入阿波羅計劃，以登上月球為目標，
美國的甘迺迪總統也在 1961 年 5 月宣佈將會在 1970 年之前將太空人送上月球並成功返回。
而後在 1969 年 7 月，Buzz Aldrin 和 Neil Armstrong 成為史上第一個登入月球的人類。&lt;/p&gt;
&lt;p&gt;《2001: A Space Odyssey》剛好在太空技術正開始發展的時間點，
人們開始對太空有許多的想像、寄望，
藉由這部電影可以看到當時對未來的各種想像，
也因此成為現今科幻片的經典代表。&lt;/p&gt;
&lt;p&gt;但是對於未來的想像難免過於樂觀，
電影想像的未來 &amp;quot;2001 年&amp;quot; 早就已經過了，
現在已經來到了 2015 年，
但是片中還是有很多技術尚未實現。&lt;/p&gt;
&lt;img alt="Voice" src="/img/space/space-voice.png" /&gt;
&lt;img alt="AI" src="/img/space/space-ai.png" /&gt;
&lt;img alt="AI Chess" src="/img/space/space-ai-chess.png" /&gt;
&lt;p&gt;&lt;strong&gt;語音辨識&lt;/strong&gt; ，這部電影有很多地方是建立在電腦已經能正確辨識人類說的話之上。
早在 1932 年，Bell Labs 就有這方面的研究。
1952 年，Bell Labs 建立了一個辨識系統，不過能力非常非常差。
後來因為經費因素而影響到了後續研究。
1960 年代晚期，開始出現使用 Hidden Markov Model (HMM) 來做語音辨識，
因此開始可以結合不同領域的知識來形成一個統一的機率模型 (像是聲學、語言、語法等等)。&lt;/p&gt;
&lt;p&gt;1971 年，DARPA 對語音辨識投資了 5 年的研究，BBN、IBM、CMU、Stanford Research Institute 都參與了這項計劃，
但是後續 DARPA 就不再投資這個部份了 (相比其他能源或醫療或登月相關計劃，認為這領域沒有那麼重要)。
1980 年代開始出現 n-gram 語言模型。
Sphinx (CMU Sphinx speech recognition engines) 由李開復 (台灣) 開發，
利用 HMM 和 n-gram 而形成，特色在於第一個做到 speaker-independent。
Sphinx 2 則是針對 performance 改過的版本，由黄学东 (美國) 開發，
在 1992 年 DARPA 的評估時被認為是當時效能最好的。&lt;/p&gt;
&lt;p&gt;2000 年，Lernout &amp;amp; Hauspie 取得了 Dragon Systems 這套系統，
成為當時業界的領導者，後來 Lernout &amp;amp; Hauspie 的 speech technonogy 被 ScanSoft 買下，
在 2005 成為 Nuance，之後與 Apple 合作，將此技術使用於 Siri 上。
2009 年開始有 deep learning 用運在語音辨識上，被稱為「自 1979 年後語音辨識準確度最戲劇性的變化」，
錯誤率下降了 30%。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人工智慧&lt;/strong&gt; ，片中的 AI (&lt;strong&gt;HAL 9000&lt;/strong&gt;) 已經能夠和人類下棋，
也能用一般的人類語言來對話，並且可以幫忙操控太空船的諸多部份，
甚至有自己的思考，會提出問題。&lt;/p&gt;
&lt;p&gt;AI 這領域從 1956 年位在 Dartmouth College 的一場 conference 後開始被廣泛討論，
而當初參與這研討會的成員也變成了 AI 研究的領導者。
之後發展冷冷熱熱，投資來來去去。
1997 年 5 月，IBM 的 Deep Blue 成為世界上首個在西洋棋上擊敗人類世界冠軍的 AI。
2011 年 2 月，IBM 的 Watson 則在 Jeopardy! 這個智力競賽中擊敗兩位紀錄保持人。
但到現在依舊還是無法完整模擬人類的大腦，AI 領域上還是有很多地方需要被克服。&lt;/p&gt;
&lt;img alt="Video Call" src="/img/space/space-video-call.png" /&gt;
&lt;p&gt;&lt;strong&gt;視訊電話&lt;/strong&gt; ，其實早期就有在發展 (甚至在 1876 年就有出現概念了)，曾經有做在電信網路上過，
到了後來網際網路發展成熟後就轉往用 TCP/IP 當底層來實作，
所以現今已經藉由網路讓 PC、手機等各個地方都可以使用視訊電話的服務。
(而網際網路的話在 1960 年代開始發展 ARPANET，到 1982 年 TCP/IP 成為 ARPANET 上的標準 protocol)&lt;/p&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://history.pansci.tw/post/115218661780/4-2-2001-1968"&gt;【科學史上的今天】4/2——《2001太空漫遊》首映&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/History_of_the_Internet"&gt;Wikipedia - History of the Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/History_of_videotelephony"&gt;Wikipedia - History of videotelephony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Speech_recognition"&gt;Wikipedia - Speech recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/History_of_artificial_intelligence"&gt;Wikipedia - History of artificial intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/AI_winter"&gt;Wikipedia - AI winter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/History_of_tablet_computers"&gt;Wikipedia - History of tablet computers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="AI"></category><category term="movie"></category></entry><entry><title>GitHub at NCTU - Here comes GitHub</title><link href="/posts/2015/03/github-at-nctu/" rel="alternate"></link><updated>2015-03-21T16:09:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-03-21:posts/2015/03/github-at-nctu/</id><summary type="html">&lt;p&gt;前陣子看到 &lt;a class="reference external" href="https://twitter.com/muanchiou/status/571684266490265601"&gt;訊息&lt;/a&gt; 說 GitHub 的人要來臺灣，
Ruinland 就在 3/4 寄信去問是否接受社團去接洽去安排活動 (其他好像都是學校或老師去接洽的)，
後來 Mu-An (目前 GitHub 裡唯一的臺灣人) 回信表示社團接洽也樂意前來，
結果 Ruinland 就在大半夜跑到我宿舍跟我說這件事，
於是我就回信談相關細節。
後來才知道原來他們之前有寄信到交大資工的 mailing list 詢問，
可是就 ... 沒下文，
後來還是嘗試幫 GitHub 和系上牽線，
不過最後系上那邊一直橋不隴，
所以就 ... 索性放棄，
不然跟 GitHub 那邊提的活動時間就不能定下來 (系上回信慢，感覺也不是很積極)，
最後活動定在 3/20 (五)，
約了和社團的大家一起去吃個飯再回學校給 Talk。&lt;/p&gt;
&lt;p&gt;在信件往來的同時，馬上請了 joyqul 幫忙畫宣傳圖，
於是我們有了精美的宣傳圖啦 ~ OwO//&lt;/p&gt;
&lt;img alt="GitHub at NCTU" src="/img/ccca-github.png" /&gt;
&lt;p&gt;活動的講師實際上是 John Britton，他說他長期在各個國家間旅遊，沒有固定的住處，
工作也都是遠端的，Airbnb 是他大多時候會住的地方 XD。&lt;/p&gt;
&lt;p&gt;Talk 的內容是偏向 Git 的 internal，著重在 &lt;tt class="docutils literal"&gt;.git&lt;/tt&gt; 裡發生的事情，
之後整理一下發在另外一篇。&lt;/p&gt;
</summary><category term="github"></category></entry><entry><title>Wayland - First Look</title><link href="/posts/2015/03/wayland-first-look/" rel="alternate"></link><updated>2015-03-12T20:16:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-03-12:posts/2015/03/wayland-first-look/</id><summary type="html">&lt;p&gt;去年 (2014) 年底有看了點 Wayland 相關的訊息，蒐集了些東西放在 GitHub 上，
不過一直沒時間繼續研究，希望之後有空能繼續研究 :P&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wdv4758h/wayland-resources"&gt;GitHub - wdv4758h/wayland-resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Wayland"></category></entry><entry><title>[留存] Why GNU grep is fast</title><link href="/posts/2015/03/why-gnu-grep-is-fast/" rel="alternate"></link><updated>2015-03-11T00:41:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-03-11:posts/2015/03/why-gnu-grep-is-fast/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html"&gt;Why GNU grep is fast (2010)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;用 Boyer-Moore (而且做點 loop unroll)&lt;/li&gt;
&lt;li&gt;避免在搜尋前複製 input bytes&lt;/li&gt;
&lt;li&gt;在 match 之前不找 newlines&lt;/li&gt;
&lt;li&gt;看 &amp;quot;Fast String Searching&amp;quot; (by Andrew Hume and Daniel Sunday, in the November 1991 issue of Software Practice &amp;amp; Experience) 裡的 Boyer-Moore implementation tricks&lt;/li&gt;
&lt;li&gt;Try to set things up (page-aligned buffers, page-sized read chunks, optionally use mmap) so the kernel can ALSO avoid copying the byte&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm"&gt;Wikipedia - Boyer–Moore string search algorithm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="grep"></category></entry><entry><title>libinput 0.8.0</title><link href="/posts/2015/01/libinput-0.8.0/" rel="alternate"></link><updated>2015-01-15T23:31:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-15:posts/2015/01/libinput-0.8.0/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lists.freedesktop.org/archives/wayland-devel/2015-January/019383.html"&gt;[ANNOUNCE] libinput 0.8.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剛剛在讀 RSS 的時候看到 libinput 有新 release 了，
新的 release 改進的部份主要在於滾動和觸空版支援&lt;/p&gt;
</summary><category term="libinput"></category></entry><entry><title>virtualenv 版本號異動</title><link href="/posts/2015/01/virtualenv-version-change/" rel="alternate"></link><updated>2015-01-04T16:22:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-04:posts/2015/01/virtualenv-version-change/</id><summary type="html">&lt;p&gt;剛剛要做系統更新的時候，
發現我這邊 Arch Linux 機器上的 virtualenv 要從 1.11.6-2 升到 12.0.5-1，
一看到覺得這版本會不會跳太大了 XD，
去翻了 &lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/changes.html"&gt;virtualenv - changes&lt;/a&gt;
才知道在 12 月底的時候有做過版本號規則的改動 XD，
從 1.11 變 12.0 www&lt;/p&gt;
</summary><category term="python"></category><category term="virtualenv"></category></entry><entry><title>Vim Plugin - rogue</title><link href="/posts/2015/01/vim-plugin-rogue/" rel="alternate"></link><updated>2015-01-01T21:32:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-01:posts/2015/01/vim-plugin-rogue/</id><summary type="html">&lt;p&gt;剛好看到一個 Vim 的 Plugin 叫作 &lt;tt class="docutils literal"&gt;rogue&lt;/tt&gt;
(GitHub repo 在這裡 &lt;a class="reference external" href="https://github.com/katono/rogue.vim"&gt;katono/rogue.vim&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;如果看到 &lt;strong&gt;rogue&lt;/strong&gt; 這個詞會有反應的，
極有可能知道 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Roguelike"&gt;roguelike&lt;/a&gt; 這個遊戲種類，
沒錯這個 Plugin 指的就是這種類的起源 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rogue_%28video_game%29"&gt;Rogue&lt;/a&gt; 這款遊戲，
這遊戲以及其衍生出的 &lt;strong&gt;roguelike&lt;/strong&gt; 的遊戲一直以來都包含著好玩的遊戲的重要要素 ~，
如果對於 roguelike 不熟悉也沒關係，
可以先看看這篇豐富的介紹文 &lt;a class="reference external" href="http://pre-sence.com/archives/roguelike-dossier"&gt;Roguelike 到底是啥&lt;/a&gt;
(其中的發展還涉及了當時的 Unix 以及 BSD 還有 curses 這個 library)，
roguelike 遊戲的元素到現在都還是處處可見，
早期知名的像是 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/NetHack"&gt;NetHack&lt;/a&gt;
(介紹文 : Jedi - &lt;a class="reference external" href="http://jedi.org/blog/archives/003676.html"&gt;如果你一生只打算做一件事的話，玩 NetHack&lt;/a&gt; )，
最近很紅的像是 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/The_Binding_of_Isaac_%28video_game%29"&gt;The Binding Of Issac&lt;/a&gt; ，
而這 Vim Plugin 的作者則是把 rogue 這款遊戲 (Clone 版本) porting 到 Vim 上了 ...&lt;/p&gt;
&lt;p&gt;用 Vundle 把 Plugin 裝完後只要在 Vim 裡下 &lt;tt class="docutils literal"&gt;:Rogue&lt;/tt&gt; 就可以開始遊戲 ...&lt;/p&gt;
&lt;p&gt;雖然這對我使用 Vim 來編輯一點幫助也沒有 XD，
但是看到有人對這遊戲如此熱愛就讓我想紀錄一下 ~&lt;/p&gt;
</summary><category term="vim"></category></entry><entry><title>[文章閱讀] 9 個 GIF 動畫，看懂 Web 演化史</title><link href="/posts/2015/01/web-history-9-gifs/" rel="alternate"></link><updated>2015-01-01T16:17:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-01:posts/2015/01/web-history-9-gifs/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://adon988.logdown.com/posts/246175-9-animation-read-the-web-history"&gt;9 個 GIF 動畫，看懂 Web 演化史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="www.fastcodesign.com/3039402/the-history-of-web-design-explained-in-9-gifs"&gt;原文 : The History Of Web Design Explained In 9 GIFs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.froont.com/brief-history-of-web-design-for-designers/"&gt;GIFs 來源 : A brief history of web design for designers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="web"></category><category term="gif"></category></entry><entry><title>D-Bus</title><link href="/posts/2014/12/d-bus/" rel="alternate"></link><updated>2014-12-27T01:45:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-27:posts/2014/12/d-bus/</id><summary type="html">&lt;div class="section" id="basic-linux-ipc"&gt;
&lt;h2&gt;Basic Linux IPC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Inter-process_communication"&gt;Wikipedia - Inter-process communication&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=8hxb0kwnzGI"&gt;[Linux.conf.au 2013] - An Introduction to Linux IPC Facilities&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/conf/lca2013/IPC_Overview-LCA-2013-printable.pdf"&gt;[Linux.conf.au 2013] - An Introduction to Linux IPC Facilities - slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;sockets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;FIFOs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;shared memory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="linux-ipc-communication" src="/img/linux/linux-ipc-communication.png" /&gt;
&lt;img alt="linux-ipc-synchronization" src="/img/linux/linux-ipc-synchronization.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="d-bus"&gt;
&lt;h2&gt;D-Bus&lt;/h2&gt;
&lt;p&gt;D-Bus is a message bus system for inter-process communication (&lt;tt class="docutils literal"&gt;IPC&lt;/tt&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/D-Bus"&gt;D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/D-Bus"&gt;Wikipedia - D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/IntroductionToDBus/"&gt;Freedesktop - Introduction to D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxfromscratch.org/blfs/view/svn/general/dbus.html"&gt;Linux From Scratch - D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dbus.freedesktop.org/doc/dbus-specification.html"&gt;D-Bus Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D-Bus is enabled automatically when using systemd because dbus is a dependency of systemd.&lt;/p&gt;
&lt;div class="section" id="what-s-d-bus"&gt;
&lt;h3&gt;What's D-Bus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;a powerful IPC system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;the closest thing to a standard in this area as can be found on Linux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;provides a nice method-call transaction mechanism&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;has fundamental inefficiencies of the user-space implementation&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;well suited to control tasks&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;works well to tell a sound server to change the volume&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;less so for anything that has to carry significant amounts of data&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;one would not want to try to send the actual audio data over the bus&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In D-Bus a call-return message requires &lt;tt class="docutils literal"&gt;10 message copies&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;4 message validations&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;4 context switches&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;D-Bus has &lt;tt class="docutils literal"&gt;no timestamps on messages&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;not available at early boot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;We need a better implementation&lt;/strong&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;kdbus&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="d-bus-architecture"&gt;
&lt;h3&gt;D-Bus - Architecture&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;libdbus&lt;/li&gt;
&lt;li&gt;dbus-daemon&lt;/li&gt;
&lt;li&gt;wrapper libraries based on particular application frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interesting :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In 2013 the systemd project rewrote libdbus in an effort to simplify the code, but it turned out to significantly increase the performance of D-Bus as well.
In preliminary benchmarks, BMW found that the systemd D-Bus library increased performance by 360%.
&lt;/pre&gt;
&lt;img alt="linux desktop architecture" src="/img/linux/dbus-architectural.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kdbus"&gt;
&lt;h2&gt;kdbus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=NgR6d54blrU"&gt;D-Bus in the kernel [linux.conf.au 2014]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://events.linuxfoundation.org/sites/events/files/slides/linuxconjapan2014.pdf"&gt;D-Bus in the Kernel - slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://lwn.net/Articles/551969/"&gt;ALS: Linux interprocess communication and kdbus (May 30, 2013)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://lwn.net/Articles/580194/"&gt;The unveiling of kdbus (Jan 13, 2014)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Linux Kernel only have primitives IPC : sockets, FIFOs, and shared memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;kdbus is a &lt;strong&gt;in-kernel implementation of D-Bus&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;can carry large amounts of data&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;even used for gigabyte-sized message streams&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;have zero-copy message passing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;worst case : &lt;tt class="docutils literal"&gt;2 copy operations&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;2 validations&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;2 context switches&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;all messages carry timestamps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;full credential information (user ID, process ID, SELinux label, control group information, capabilities, and much more) is passed with each message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;always available to the system (no need to wait for the D-Bus daemon to be started)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Linux security modules can hook into it directly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;various race conditions have been fixed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;API has simplified&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Kdbus is implemented as a &lt;tt class="docutils literal"&gt;character device&lt;/tt&gt; in the kernel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;signal broadcasting mechanism has been rewritten to use Bloom filters to select recipients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There is a user-space proxy server that can be used by older code that has not been rewritten to use the new API, so everything should just work on a kdbus-enabled system with no code changes required.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;the new &lt;tt class="docutils literal"&gt;memfd&lt;/tt&gt; syscall was merged into Linux kernel 3.17&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;memfd&lt;/tt&gt; is a mechanism similar to Android's &lt;tt class="docutils literal"&gt;ashmem&lt;/tt&gt; that allows &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zero-copy&lt;/span&gt;&lt;/tt&gt; message passing in KDBUS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Android &amp;quot;ashmem&amp;quot; subsystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Android Binder&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://lwn.net/Articles/619068/"&gt;Kdbus meets linux-kernel (Nov 4, 2014)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://gentooexperimental.org/~patrick/weblog/archives/2014-11.html#e2014-11-23T09_26_01.txt"&gt;D-Bus, FreeDesktop, and lots of madness&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://news.ycombinator.com/item?id=8648437"&gt;Hacker News - D-Bus, FreeDesktop, and lots of madness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.kroah.com/log/blog/2014/01/15/kdbus-details/"&gt;Kdbus Details - Greg Kroah-Hartman&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Binder vs. kdbus&lt;/li&gt;
&lt;li&gt;Binder is bound to the CPU, D-Bus (and hence kdbus), is bound to RAM&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://code.google.com/p/d-bus/source/browse/kdbus.txt"&gt;kdbus.txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="d-bus"></category><category term="ipc"></category><category term="kdbus"></category></entry><entry><title>Notification things</title><link href="/posts/2014/12/notification-things/" rel="alternate"></link><updated>2014-12-27T01:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-26:posts/2014/12/notification-things/</id><summary type="html">&lt;div class="section" id="linux"&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Desktop_notifications"&gt;Arch Wiki - Desktop Notifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="libnotify"&gt;
&lt;h3&gt;Libnotify&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.archlinux.org/packages/extra/x86_64/libnotify/"&gt;Arch Package - libnotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;desktop independent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;need a notification server&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="dependencies"&gt;
&lt;h4&gt;Dependencies&lt;/h4&gt;
&lt;div class="section" id="gdk-pixbuf2"&gt;
&lt;h5&gt;gdk-pixbuf2&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/GDK"&gt;Wikipedia - GDK&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;GIMP Drawing Kit&lt;/li&gt;
&lt;li&gt;GDK was originally developed on the X Window System for the GIMP&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GdkPixbuf is a toolkit for image loading and pixel buffer manipulation.&lt;/p&gt;
&lt;p&gt;In GTK+ version 2.22 from 2010-09-23 GdkPixbuf was split off from GDK into a separate package in preparation for the transition to GTK+ 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notification-servers"&gt;
&lt;h3&gt;Notification servers&lt;/h3&gt;
&lt;div class="section" id="bult-in"&gt;
&lt;h4&gt;Bult-in&lt;/h4&gt;
&lt;p&gt;The following desktop environments use their own implementations to display notifications, and you cannot replace them.
Their notification servers are started automatically on login to receive notifications from applications via &lt;tt class="docutils literal"&gt;DBus&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cinnamon&lt;/li&gt;
&lt;li&gt;Enlightenment&lt;/li&gt;
&lt;li&gt;GNOME&lt;/li&gt;
&lt;li&gt;KDE&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="standalone"&gt;
&lt;h4&gt;Standalone&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mac-os-x"&gt;
&lt;h2&gt;Mac OS X&lt;/h2&gt;
&lt;div class="section" id="growl"&gt;
&lt;h3&gt;Growl&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Growl_%28software%29"&gt;Wikipedia - Growl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://growl.info/"&gt;Growl - Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="browser"&gt;
&lt;h2&gt;Browser&lt;/h2&gt;
&lt;div class="section" id="firefox"&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/API/notification"&gt;MDN - Notification - Web API Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chromium"&gt;
&lt;h3&gt;Chromium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.chromium.org/developers/linux-technical-faq"&gt;Chromium - Linux Technical FAQ&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Why don't Chromium notifications use the D-BUS-based notifications system (aka libnotify / notification-daemon)?&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;HTML5 notifications can contain arbitrary HTML, which is not supported by the notification protocol. (This is the same reason we don't use Growl on OS X.)&lt;/li&gt;
&lt;li&gt;Chromium's notifications include a button that brings up an options menu, which is also not supported by the notification protocol.&lt;/li&gt;
&lt;li&gt;The glitzy Ubuntu notifications daemon, by design, does not allow the user to interact with notifications at all, which doesn't work when the notification HTML includes clickable links.&lt;/li&gt;
&lt;li&gt;It would be nice to extend the protocol to allow Chromium to integrate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="notification"></category></entry><entry><title>Coverity</title><link href="/posts/2014/12/coverity/" rel="alternate"></link><updated>2014-12-24T23:38:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/coverity/</id><summary type="html">&lt;p&gt;from Coverity :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In 2006, the Coverity Scan service was initiated with the U.S. Department of Homeland Security as the largest public-private sector research project in the world, focused on open source software quality and security. Coverity now manages the project, providing its development testing technology as a free service to the open source community to help them build quality and security into their software development process. Register your open source project for the Coverity Scan service, and follow us on Twitter to get the latest updates.
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://scan.coverity.com/"&gt;Coverity Scan Static Analysis&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Find and fix defects in your Java, C/C++ or C# open source project for free&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coverity"&gt;Wikipedia - Coverity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Projects that use this service&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Linux Kernel&lt;/li&gt;
&lt;li&gt;CPython&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example :&lt;/p&gt;
&lt;img alt="cpython-coverity" src="/img/coverity/cpython.png" /&gt;
</summary><category term="coverity"></category><category term="test"></category></entry><entry><title>Linux Standard Base, Filesystem Hierarchy Standard</title><link href="/posts/2014/12/linux-standard-base/" rel="alternate"></link><updated>2014-12-24T21:19:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/linux-standard-base/</id><summary type="html">&lt;div class="section" id="linux-standard-base-lsb"&gt;
&lt;h2&gt;Linux Standard Base (LSB)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linux_Standard_Base"&gt;Wikipedia - Linux Standard Base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxbase.org/betaspecs/lsb/"&gt;The DRAFT LSB 5.0 Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystem-hierarchy-standard-fhs"&gt;
&lt;h2&gt;Filesystem Hierarchy Standard (FHS)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;Wikipedia - Filesystem Hierarchy Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxbase.org/betaspecs/fhs/"&gt;Filesystem Hierarchy Specification - Beta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="linux"></category></entry><entry><title>Linux Kernel Booting Process</title><link href="/posts/2014/12/linux-kernel-booting-process/" rel="alternate"></link><updated>2014-12-24T20:02:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/linux-kernel-booting-process/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://lxr.free-electrons.com/source/Documentation/x86/boot.txt"&gt;Linux/Documentation/x86/boot.txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Vmlinux"&gt;Wikipedia - vmlinux&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;vm&lt;/tt&gt; is for virtual memory&lt;/li&gt;
&lt;li&gt;the Linux kernel in an statically linked executable file format&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;vmlinuz&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;compressed vmlinux&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://unix.stackexchange.com/questions/5518/what-is-the-difference-between-the-following-kernel-makefile-terms-vmlinux-vml"&gt;What is the difference between the following kernel Makefile terms: vmlinux, vmlinuz, vmlinux.bin, zimage &amp;amp; bzimage?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_boot_process"&gt;Arch Wiki - Arch boot process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37390677" width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/shimosawa/linux-kernel-booting-process-1-for-nlkb" title="Linux Kernel Booting Process (1) - For NLKB" target="_blank"&gt;Linux Kernel Booting Process (1) - For NLKB&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/shimosawa" target="_blank"&gt;shimosawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37390718" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/shimosawa/nlkb20140727" title="Linux Kernel Booting Process (2) - For NLKB" target="_blank"&gt;Linux Kernel Booting Process (2) - For NLKB&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/shimosawa" target="_blank"&gt;shimosawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;img alt="linux kernel boot" src="/img/linux/linux-kernel-boot.jpg" /&gt;
&lt;div class="section" id="bzimage"&gt;
&lt;h2&gt;bzImage&lt;/h2&gt;
&lt;p&gt;bzImage = big zImage&lt;/p&gt;
&lt;img alt="linux kernel file" src="/img/linux/linux-kernel-file.png" /&gt;
&lt;div class="section" id="linux-2-6-22"&gt;
&lt;h3&gt;Linux &amp;lt;= 2.6.22&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bbootsect (bootsect.o):&lt;/li&gt;
&lt;li&gt;bsetup (setup.o)&lt;/li&gt;
&lt;li&gt;bvmlinux (head.o, misc.o, piggy.o)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="bzimage" src="/img/linux/bzimage.png" /&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;piggy.o&lt;/tt&gt; contains the &lt;strong&gt;gzipped&lt;/strong&gt; &lt;tt class="docutils literal"&gt;vmlinux&lt;/tt&gt; file in its data section (&lt;tt class="docutils literal"&gt;ELF&lt;/tt&gt;) (see compressed/Makefile piggy.o).
All source files mentioned are in &lt;tt class="docutils literal"&gt;arch/i386/boot/&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-2-6-23"&gt;
&lt;h3&gt;Linux &amp;gt;= 2.6.23&lt;/h3&gt;
&lt;p&gt;merged &lt;tt class="docutils literal"&gt;bbootsect&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;bsetup&lt;/tt&gt; into one (&lt;tt class="docutils literal"&gt;header.o&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initramfs"&gt;
&lt;h2&gt;initramfs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/001954.html"&gt;深入理解 Linux 2.6 的 initramfs 機制 (上) - Jserv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Initramfs"&gt;Wikipedia - initramfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lxr.free-electrons.com/source/Documentation/filesystems/ramfs-rootfs-initramfs.txt"&gt;Linux/Documentation/filesystems/ramfs-rootfs-initramfs.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/mkinitcpio"&gt;Arch Wiki - mkinitcpio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="zlib"&gt;
&lt;h2&gt;zlib&lt;/h2&gt;
&lt;p&gt;an abstraction of the &lt;tt class="docutils literal"&gt;DEFLATE&lt;/tt&gt; compression algorithm used in the &lt;tt class="docutils literal"&gt;gzip&lt;/tt&gt; file compression program&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zlib"&gt;Wikipedia - zlib&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Applications&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Linux Kernel&lt;/li&gt;
&lt;li&gt;libpng&lt;/li&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;OpenSSH&lt;/li&gt;
&lt;li&gt;OpenSSL&lt;/li&gt;
&lt;li&gt;FFmpeg&lt;/li&gt;
&lt;li&gt;rsync&lt;/li&gt;
&lt;li&gt;dpkg&lt;/li&gt;
&lt;li&gt;Subversion&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;feature : code is portable, liberally licensed, and has a relatively small memory footprint&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux"></category></entry><entry><title>[Video] The Real Story Behind Wayland and X - Daniel Stone (linux.conf.au 2013)</title><link href="/posts/2014/12/the-real-story-behind-wayland-and-x/" rel="alternate"></link><updated>2014-12-08T01:39:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-08:posts/2014/12/the-real-story-behind-wayland-and-x/</id><summary type="html">&lt;p&gt;This talk is funny and easy to understand ~&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.freedesktop.org/~daniels/lca2013-wayland-x11.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/RIctzAQOe44" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Wayland"></category><category term="X11"></category><category term="Linux"></category></entry><entry><title>[JCConf] OpenJDK vs. Dalvik/ART virtual machine</title><link href="/posts/2014/12/openjdk-vs-dalvik-and-art-vm/" rel="alternate"></link><updated>2014-12-01T02:38:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-01:posts/2014/12/openjdk-vs-dalvik-and-art-vm/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://jcconf.tw/openjdk-vs-dalvik.html"&gt;JCConf 官網連結 (有 Video)&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="preface"&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這裡不提&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;JVM tuning&lt;/li&gt;
&lt;li&gt;JNI, GC, invokedynamic&lt;/li&gt;
&lt;li&gt;Production tweaking&lt;/li&gt;
&lt;li&gt;Android Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="content"&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
                                                   +----------------+
                                                   | CLDC-HI (Java) |
                                                   +----------------+
                                                           ^
                                                           |
+----------------+  +---------------------------+  +-------------------+
| Self VM (Self) |-&amp;gt;| Strongtalk VM (Smalltalk) |-&amp;gt;| HotSpot VM (Java) |
+----------------+  +---------------------------+  +-------------------+
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |                 +-----------------+
        |                          ---------------&amp;gt;  | V8 (Javascript) |
        ------------------------------------------&amp;gt;  +-----------------+
&lt;/pre&gt;
&lt;div class="section" id="jit"&gt;
&lt;h3&gt;JIT&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compiled when needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mixed-mode"&gt;
&lt;h3&gt;Mixed-Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Interpreted&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Bytecode-walking&lt;/li&gt;
&lt;li&gt;Artificial stack machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Compiled&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Direct native operations&lt;/li&gt;
&lt;li&gt;Native register machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling"&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Gather data about code while interpreting&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Invariants (types, constants, nulls)&lt;/li&gt;
&lt;li&gt;Statistics (branches, calls)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimizations"&gt;
&lt;h3&gt;Optimizations&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Method inlining&lt;/li&gt;
&lt;li&gt;Loop unrolling&lt;/li&gt;
&lt;li&gt;Lock coarsening/eliding&lt;/li&gt;
&lt;li&gt;Dead code elimination&lt;/li&gt;
&lt;li&gt;Duplicate code elimination&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Escape_analysis"&gt;Escape analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hotspot"&gt;
&lt;h3&gt;Hotspot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;client mode (C1) inlines, less aggressive&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Fewer opportunities to optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;server mode (C2) inlines aggressively&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Based on richer runtime profiling&lt;/li&gt;
&lt;li&gt;Profile until 10k calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Tiered&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Level 0 = Interpreter&lt;/li&gt;
&lt;li&gt;Level 1~3 = C1&lt;/li&gt;
&lt;li&gt;Level 4 = C2&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="from-interpreter-to-compiler"&gt;
&lt;h3&gt;from Interpreter to Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Bytecode interpreter&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;switch-threading&lt;/li&gt;
&lt;li&gt;indirect-threading&lt;/li&gt;
&lt;li&gt;token-threading&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-openjdk"&gt;
&lt;h3&gt;Summary : OpenJDK&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-dalvik-vm"&gt;
&lt;h3&gt;Introduction to Dalvik VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;因為硬體限制，不能像 HotSpot 一樣做那麼多優化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Dalvik 是 Register-based 的 VM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dalvik Executable (DEX)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;convert tool : dx&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Optimizing Dispatch&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;selective inlining
+ 打開 Java 程式執行的時候，CPU 就是不知道在忙什麼
+ 只是個印出 Hello World 的程式，發現 CPU 有點忙&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;dexopt : Instruction Rewritten&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="libart-android-runtime-library"&gt;
&lt;h3&gt;libART (Android RunTime Library)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Use Ahead-Of-Time (AOT) scheme instead of JIT&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Precompile Dalvik Bytecode into machine language during installation&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hotspot 和 Dalvik 完全不同 codebase，但設計原理很像，Hotspot 實作比較完整，Dalvik 有很多先天限制&lt;/li&gt;
&lt;li&gt;Android L 啟動時間變更久 (重新 scan bytecode 來生成 machine code)&lt;/li&gt;
&lt;li&gt;要兼顧效能和啟動時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Java"></category><category term="OpenJDK"></category><category term="Dalvik"></category><category term="ART"></category><category term="VM"></category></entry><entry><title>Arch Linux upgrade (11/11)</title><link href="/posts/2014/11/archlinux-upgrade-2014-11-11/" rel="alternate"></link><updated>2014-11-12T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-12:posts/2014/11/archlinux-upgrade-2014-11-11/</id><summary type="html">&lt;p&gt;It has been a while since last time I upgrade my notebook,
now I upgrade many software in my notebook including the Linux Kernel,
everything works well after upgrade :)&lt;/p&gt;
&lt;p&gt;I love rolling release :P&lt;/p&gt;
</summary><category term="linux"></category></entry><entry><title>[WIP][Software Testing] Intro.</title><link href="/posts/2014/11/software-testing-intro/" rel="alternate"></link><updated>2014-11-10T01:17:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/software-testing-intro/</id><summary type="html">&lt;p&gt;Note: &lt;strong&gt;本篇仍在未完成狀態&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.cs.nctu.edu.tw/~skhuang/st2014/"&gt;課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期中考: 第 5,6,7,8,9 章 (boundary value, equivalence class, decision table, path testing, data flow testing)&lt;/p&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro.&lt;/h2&gt;
&lt;div class="section" id="white-black"&gt;
&lt;h3&gt;white &amp;amp; black&lt;/h3&gt;
&lt;p&gt;測試大概可以分成 &lt;strong&gt;白箱測試 (white-box testing)&lt;/strong&gt; 與 &lt;strong&gt;黑箱測試 (black-box testing)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;white-box testing 又可以稱為 &lt;strong&gt;透明箱測試 (glass box testing)&lt;/strong&gt;，
因為可以看到內部結構，因此又稱為 &lt;strong&gt;結構測試 (structural testing)&lt;/strong&gt; 或 &lt;strong&gt;邏輯驅動測試 (logic-driven testing)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-case-adequacy-criteria"&gt;
&lt;h3&gt;test case adequacy criteria&lt;/h3&gt;
&lt;p&gt;test case adequacy criteria 討論的是 &amp;quot;需要多少的測試才足夠&amp;quot;，
這可以由涵蓋的 control-flow &amp;amp; data-flow 比例來衡量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;control-flow coverage (測量可以經過多少 execution path)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;statement coverage&lt;/li&gt;
&lt;li&gt;branch coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;data-flow coverage (definition &amp;amp; use &amp;amp; kill)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;all-du-paths (definition &amp;amp; use)&lt;/li&gt;
&lt;li&gt;all-uses&lt;/li&gt;
&lt;li&gt;all-defs
+ 如果每條 variable 的 dc-paths 都包含的話&lt;/li&gt;
&lt;li&gt;all-c-uses (computation)&lt;/li&gt;
&lt;li&gt;all-p-uses (predicate)&lt;/li&gt;
&lt;li&gt;all-c-uses/some-p-uses&lt;/li&gt;
&lt;li&gt;all-p-uses/some-c-uses&lt;/li&gt;
&lt;li&gt;dc-paths (definition &amp;amp; clear)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;test case 難寫通常也代表著程式太複雜，因此要降低結構複雜度，再來是避免 non-determinism&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Rapps-Weyuker hierarchy of data flow coverage metrics :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
                    +-----------+
                    | All-Paths |
                    +-----------+
                        |
                    +--------------+
                    | All-DU-Paths |
                    +--------------+
                        |
                    +----------+
                    | All-Uses |
                    +----------+
                        |
                        |
         |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
         |                              |
+------------------------+      +------------------------+
| All C-Uses some P-Uses |      | All P-Uses some C-Uses |
+------------------------+      +------------------------+
                                        |
                                        |
                        |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
                        |                        |
                    +----------+            +------------+
                    | All-Defs |            | All P-Uses |
                    +----------+            +------------+
                                                 |
                                            +-----------+
                                            | All Edges |
                                            +-----------+
                                                 |
                                            +-----------+
                                            | All Nodes |
                                            +-----------+
&lt;/pre&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="87%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;P-use&lt;/td&gt;
&lt;td&gt;use in predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-use&lt;/td&gt;
&lt;td&gt;use in computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;O-use&lt;/td&gt;
&lt;td&gt;use for output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;L-use&lt;/td&gt;
&lt;td&gt;use for location (pointers, subscripts)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;I-use&lt;/td&gt;
&lt;td&gt;iteration (internal counters, loop indices)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;I-def&lt;/td&gt;
&lt;td&gt;defined by input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A-def&lt;/td&gt;
&lt;td&gt;defined by assignment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Program_slicing"&gt;Wikipedia - Program Slicing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/romanofski/programslice"&gt;https://github.com/romanofski/programslice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects"&gt;http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Spyder&lt;/td&gt;
&lt;td&gt;ANSI C&lt;/td&gt;
&lt;td&gt;Dynamic&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://spaf.cerias.purdue.edu/Students/spyder.html"&gt;http://spaf.cerias.purdue.edu/Students/spyder.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Unravel&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CodeSonar&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Indus/Kaveri&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;JSlice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SeeSlice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Programslice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-to-decision-path-dd-path"&gt;
&lt;h3&gt;decision-to-decision path (DD-path)&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="coverage-py"&gt;
&lt;h3&gt;coverage.py&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;coverage report &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;coverageg report -m

Name    Stmts   Miss  Cover   Missing
-------------------------------------
hw1        &lt;span class="m"&gt;58&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    97%   49-50
&lt;span class="nb"&gt;test       &lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
-------------------------------------
TOTAL      &lt;span class="m"&gt;79&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    97%
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch5-boundary-value-testing"&gt;
&lt;h2&gt;Ch5 - Boundary Value Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1m05eRr-mqSQIrOb6V3rDLxb3Rtj8gO5CkxphlGSv06I/edit#slide=id.g3a0892a38_030"&gt;Ch5 課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch6-equivalence-class-testing"&gt;
&lt;h2&gt;Ch6 - Equivalence Class Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;weak normal&lt;/li&gt;
&lt;li&gt;strong normal&lt;/li&gt;
&lt;li&gt;weak robust&lt;/li&gt;
&lt;li&gt;strong robust&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch7-decision-table-based-testing"&gt;
&lt;h2&gt;Ch7 - Decision Table-based Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1zUOofTArt4Q-APf-Ne3kE_JUt5gXZFzQTIqBL0VOJqA/edit#slide=id.g4821ca451_016"&gt;CH7 課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch8-path-testing"&gt;
&lt;h2&gt;Ch8 - Path Testing&lt;/h2&gt;
&lt;div class="section" id="program-graphs"&gt;
&lt;h3&gt;Program Graphs&lt;/h3&gt;
&lt;p&gt;用 imperative 寫出來的程式的 program graphs 會是&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;directed graph&lt;/li&gt;
&lt;li&gt;nodes are statement fragements&lt;/li&gt;
&lt;li&gt;edges are flow of control&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dd-paths"&gt;
&lt;h3&gt;DD-Paths&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="test-coverage-metrics"&gt;
&lt;h3&gt;Test Coverage Metrics&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;node coverage&lt;/li&gt;
&lt;li&gt;edge coverage&lt;/li&gt;
&lt;li&gt;chain coverage&lt;/li&gt;
&lt;li&gt;path coverage&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/ned/coveragepy"&gt;https://bitbucket.org/ned/coveragepy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="miller-s-coverage-metrics"&gt;
&lt;h3&gt;Miller's Coverage Metrics&lt;/h3&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-178b"&gt;
&lt;h3&gt;DO-178B&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch9-data-flow-testing"&gt;
&lt;h2&gt;Ch9 - Data Flow Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define/Use Testing&lt;/li&gt;
&lt;li&gt;Slice-Based Testing&lt;/li&gt;
&lt;li&gt;Program Slicing Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重點: 變數在哪裡拿到 values、在哪裡被使用&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;unifying structure of &lt;strong&gt;test coverage&lt;/strong&gt; metrics&lt;/li&gt;
&lt;li&gt;program slice (1979 - Mark Weiser)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="define-reference-anomalies"&gt;
&lt;h3&gt;define/reference anomalies&lt;/h3&gt;
&lt;p&gt;檢查以下 issue&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;只有定義但沒有被使用的變數&lt;/li&gt;
&lt;li&gt;變數未定義就使用&lt;/li&gt;
&lt;li&gt;變數定義了多次&lt;/li&gt;
&lt;li&gt;變數在使用之前就被 deallocate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-node"&gt;
&lt;h3&gt;defining node&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="usage-node"&gt;
&lt;h3&gt;usage node&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="p-use-c-use"&gt;
&lt;h3&gt;P-use &amp;amp; C-use&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://teddy-chen-tw.blogspot.tw/2014/06/blog-post.html"&gt;白箱測試與黑箱測試（上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="testing"></category></entry><entry><title>[Psycho] Psychology Intro.</title><link href="/posts/2014/11/psycho-intro/" rel="alternate"></link><updated>2014-11-10T01:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/psycho-intro/</id><summary type="html">&lt;p&gt;修心理學通識的隨便紀錄 (?&lt;/p&gt;
&lt;div class="section" id="ch1-psychology-and-life"&gt;
&lt;h2&gt;Ch1 - Psychology and Life&lt;/h2&gt;
&lt;p&gt;Psychology 研究的是 &lt;strong&gt;個人行為和心智歷程&lt;/strong&gt; (behavior of individuals and their mental processes)&lt;/p&gt;
&lt;p&gt;Scientific method : 蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括)&lt;/p&gt;
&lt;p&gt;Behavior : 生物依照環境而產生的可觀察的行為&lt;/p&gt;
&lt;p&gt;描述 =&amp;gt; 解釋 =&amp;gt; 預測 =&amp;gt; 控制&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="35%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;behavioral data&lt;/td&gt;
&lt;td&gt;reports of observations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;explanations&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Internal factors&lt;/li&gt;
&lt;li&gt;External factors&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;predictions&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Causal Prediction (因果預測)&lt;/li&gt;
&lt;li&gt;Scientific Prediction&lt;ul&gt;
&lt;li&gt;由分析結果來判斷關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Interventions (介入)&lt;ul&gt;
&lt;li&gt;控制行為發生與否&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="psychology-s-historical-foundations"&gt;
&lt;h3&gt;Psychology's Historical Foundations&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="53%" /&gt;
&lt;col width="14%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Hermann Ebbinghaus&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;早期的實驗心理學家之一&lt;/li&gt;
&lt;li&gt;遺忘曲線&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;先天論者 vs. 經驗論者
(nativist vs. empiricist)&lt;/td&gt;
&lt;td&gt;Plato (柏拉圖) and Aristotle (亞里斯多德)
opposing views of how mind works&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;John Locke 洛克&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;empiricist view (經驗主義)&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;1632-1704&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Immanuel Kant 康德&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;nativist view&lt;/li&gt;
&lt;li&gt;心理會影響對世界的感受&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;1724-1804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;René Descartes (笛卡兒)&lt;/td&gt;
&lt;td&gt;人類可以用科學來理解&lt;/td&gt;
&lt;td&gt;1596-1650&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wilhelm Wundt&lt;/td&gt;
&lt;td&gt;First formal experimental psychology lab&lt;/td&gt;
&lt;td&gt;1879&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Edward Titchener&lt;/td&gt;
&lt;td&gt;建立美國早期的 psychology labs 之一&lt;/td&gt;
&lt;td&gt;1892&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;William James&lt;/td&gt;
&lt;td&gt;Principles of Psychology&lt;/td&gt;
&lt;td&gt;1890&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="comfort-food"&gt;
&lt;h3&gt;comfort food&lt;/h3&gt;
&lt;p&gt;吃下去後可以撫慰心情和精神的食物&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evolution-of-modern-psychology"&gt;
&lt;h3&gt;Evolution of Modern Psychology&lt;/h3&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;結構論學派&lt;/h4&gt;
&lt;p&gt;School of Structuralism&lt;/p&gt;
&lt;p&gt;創始人為德國心理學家馮德（W. Wundt）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;心理學是從個體本身的觀點研究其自覺的經驗。因此心理學的主要方法就是 &lt;strong&gt;內省法&lt;/strong&gt; 或自省法&lt;/li&gt;
&lt;li&gt;人類的意識經驗中包括三大元素，即感覺、意像、與感情&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;功能論學派&lt;/h4&gt;
&lt;p&gt;School of Functionalism&lt;/p&gt;
&lt;p&gt;美國心理學家 J. James 與 J. Dewey 二人首創&lt;/p&gt;
&lt;p&gt;受達爾文 (C. Darwin) 進化論中「適者生存」的理念&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;完形心理學&lt;/h4&gt;
&lt;p&gt;Gestalt Psychology (中文音義變成 &amp;quot;格式塔&amp;quot; ...)&lt;/p&gt;
&lt;p&gt;Gestalt 源自德文，意思是 &amp;quot;形狀&amp;quot;，意解為 &amp;quot;看清事物&amp;quot;&lt;/p&gt;
&lt;p&gt;Gestalt Psychology 的重要概念是 &lt;strong&gt;整體&lt;/strong&gt; (並非各個部份的總和)，興起於 20 世紀初的德國，
由 Kurt Koffka, Max Wertheimer, and Wolfgang Köhler 創立，
主要是在研究人類 &lt;strong&gt;知覺與意識&lt;/strong&gt; 上的問題，
反對結構學派 (Structuralism) 以自我觀察、自我描述等內省的方法分析意識經驗的成份，
也反對行為主義心理學派 (Behaviorism) 過份強調動物實驗，完全排斥心智歷程的作法&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;心理學七種取向&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="57%" /&gt;
&lt;col width="27%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Perspective&lt;/th&gt;
&lt;th class="head"&gt;Focus of Study&lt;/th&gt;
&lt;th class="head"&gt;Primary Research Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Psychodynamic&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Unconscious drives&lt;/li&gt;
&lt;li&gt;Conflicts&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Behaviorist&lt;/td&gt;
&lt;td&gt;Specific overt responses&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Humanistic&lt;/td&gt;
&lt;td&gt;Human expreience and potentials&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cognitive&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Mental processes&lt;/li&gt;
&lt;li&gt;Language&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Biological&lt;/td&gt;
&lt;td&gt;Brain and nervouse system processes&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Evolutionary&lt;/td&gt;
&lt;td&gt;Evolved psychological adaptations&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Sociocultural&lt;/td&gt;
&lt;td&gt;Cross-cultural patterns of attitudes and behaviors&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch2-research-methods-in-psychology"&gt;
&lt;h2&gt;Ch2 - Research Methods in Psychology&lt;/h2&gt;
&lt;div class="section" id="process-of-research"&gt;
&lt;h3&gt;Process of Research&lt;/h3&gt;
&lt;p&gt;理論 (Theory) : An organized set of concepts that explains a phenomenon or set of phenomena.&lt;/p&gt;
&lt;p&gt;決定論 (Determinism) : Doctrine that all events - physical, behavioral, andmental - are &amp;quot;determined&amp;quot; by specific causal factors that are potentially knowable&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;step 1&lt;/td&gt;
&lt;td&gt;Initial phase of research: Theory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;step 2&lt;/td&gt;
&lt;td&gt;Develop ahypothesis 假說&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;step 3&lt;/td&gt;
&lt;td&gt;Design the study 研究設計&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="scientific-method"&gt;
&lt;h4&gt;Scientific Method&lt;/h4&gt;
&lt;p&gt;蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括)&lt;/p&gt;
&lt;p&gt;目標是要得出最多的客觀 conclusions&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="observer-bias"&gt;
&lt;h4&gt;Observer Bias&lt;/h4&gt;
&lt;p&gt;因為動機和預期造成的測試偏差&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="standardization"&gt;
&lt;h4&gt;Standardization&lt;/h4&gt;
&lt;p&gt;標準化&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="operational-definition"&gt;
&lt;h4&gt;Operational definition&lt;/h4&gt;
&lt;p&gt;操作型定義是將依些事物以某種操作表示出來&lt;/p&gt;
&lt;p&gt;所有研究裡的變數都必須是操作型定義給定的&lt;/p&gt;
&lt;p&gt;ex: 「花生果醬三明治」的操作性定義是「使用抹刀先將花生醬塗抹到一片麵包上，再將果醬塗抹在花生醬上，最後蓋上另一片厚度相同的麵包後所得到的成果。」&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="research-variable"&gt;
&lt;h4&gt;Research Variable&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Independent Variable (獨變項/自變項) (研究者操弄的變數)&lt;/li&gt;
&lt;li&gt;Dependent Variable (依變項)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-methods"&gt;
&lt;h4&gt;Experimental Methods&lt;/h4&gt;
&lt;p&gt;研究者操弄 independent variable 來看對 dependent variable 的影響，
用來解決因果模糊性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Control Procedures&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Double-blind control 雙盲控制&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first simple"&gt;
&lt;li&gt;目的是避免研究結果受安慰劑效應或觀察者期望效應所影響&lt;/li&gt;
&lt;li&gt;受試驗的對象及研究人員並不知道哪些對象屬於對照組，哪些屬於實驗組&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="last literal-block"&gt;
在藥物測試中經常使用雙盲測試。病人被隨機編入對照組及實驗組。
對照組被給予安慰劑，而實驗組給予真正藥物。
無論是病人或觀察病人的實驗人員都不知道誰得到真正的藥物，直至研究結束為止。
不過部份的試驗會較難做成雙盲，
例如：如果治療效果非常顯著，或治療的副作用非常明顯，實驗人員便可能猜想到哪組是對照。
&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Placebo control 安慰劑控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Between-subjects designs 受試者間設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每個參與者隨機分配到不同測試環境&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Within-subjects designs 受試者內設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每個參與者可以自己控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sample 樣本&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Population 中被選為受試者的 subset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Representative Sample 代表性樣本&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Population 中被選為受試者的 subset 中和特徵非常符合的部份&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Population 母群&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-explanations"&gt;
&lt;h4&gt;Alternative explanations&lt;/h4&gt;
&lt;p&gt;替代解釋&lt;/p&gt;
&lt;p&gt;可以由以下幾種而得&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Confounding variables (混淆變項)&lt;/li&gt;
&lt;li&gt;Expectancy effects (預期效應)&lt;/li&gt;
&lt;li&gt;Placebo effect (安慰劑效應)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="correlational-methods"&gt;
&lt;h4&gt;Correlational Methods&lt;/h4&gt;
&lt;p&gt;相關法&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Correlational Coefficient&lt;/li&gt;
&lt;li&gt;Correlational Methods&lt;/li&gt;
&lt;li&gt;正相關&lt;/li&gt;
&lt;li&gt;負相關&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="psychological-measurement"&gt;
&lt;h4&gt;Psychological Measurement&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Validity&lt;/li&gt;
&lt;li&gt;Self-report Measures&lt;/li&gt;
&lt;li&gt;Behavior Measure&lt;/li&gt;
&lt;li&gt;Direct observations&lt;/li&gt;
&lt;li&gt;Naturalistic observations&lt;/li&gt;
&lt;li&gt;Archival Data&lt;/li&gt;
&lt;li&gt;Case Study&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ethical-issues-in-research"&gt;
&lt;h4&gt;Ethical Issues in Research&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;研究的倫理議題&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
+----------+
| 告知同意 |
+----------+
    |
+-----------------+
| 風險 / 獲得評估 |
+-----------------+
    |
+----------+
| 刻意瞞騙 |
+----------+
    |
+----------+
| 事後釋疑 |
+----------+
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch3-the-biological-and-evolutionary-basis-of-behavior"&gt;
&lt;h2&gt;Ch3 - The Biological and Evolutionary Basis of Behavior&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nature vs. Nurture (先天 vs. 後天)&lt;/li&gt;
&lt;li&gt;Heredity vs.  Environment (遺傳 vs. 環境)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nervous-system"&gt;
&lt;h3&gt;Nervous system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Neuron&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dendrites 樹突&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Receive stimulation from sensory receptors&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Soma 細胞體&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Cell body, contains nucleus&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Axon 軸突&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Long extended fiber along which neural impulse travels&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;圖 ??&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Synapse"&gt;http://en.wikipedia.org/wiki/Synapse&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Synapse 突觸&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不同神經元間或神經元與細胞間溝通的接頭&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Synapse Transmission&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Neurotransmitters (神經傳導物質)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Catecholamines (兒茶酚胺)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Norepinephrine (NE) (正腎上腺素)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dopamine (DA) (多巴胺)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;在精神分裂症患者身上可以看到高於正常值的多巴胺&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Glutamate (Glu) (麩胺酸)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;腦中最常見的興奮性神經傳導物質&lt;/li&gt;
&lt;li&gt;和情緒反應、學習和記憶有關&lt;/li&gt;
&lt;li&gt;與藥物、酒精、尼古丁成癮有關&lt;/li&gt;
&lt;li&gt;腦內 Glu 量的失衡與精神疾病有關連,例如精神分裂症&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;GABA (gamma-aminobutyric acid) (迦馬胺基丁酸)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;腦中最常見的抑制性神經傳導物質&lt;/li&gt;
&lt;li&gt;GAMA 太低會產生焦慮感&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Acetylcholine (Ach) (乙醯膽鹼)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;和記憶有關 (ex: 阿茲海默症)&lt;/li&gt;
&lt;li&gt;在運動神經元和肌肉纖維交接處,使骨骼肌興奮而收縮 (ex: 美洲箭毒、肉毒桿菌)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Serotonin (5-HT) (血清素)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;分泌血清素的神經元位於腦幹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;與激發 / 喚起和自動化歷程有關&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;迷幻藥 LSD 抑制血清素神經元的作用 , 產生各種幻覺&lt;/li&gt;
&lt;li&gt;抗憂鬱藥物「百憂解」可以增強血清素的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Endorphins (腦內啡)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;神經調節物質&lt;/li&gt;
&lt;li&gt;控制情緒行為 (焦慮、害怕、緊張、愉悅)&lt;/li&gt;
&lt;li&gt;與鴉片類藥物、嗎啡受體部位相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Sympathetic nervous system (交感神經系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;應對緊急狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Parasympathetic nervous system (副交感神經系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;處理 routine 的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="biology-and-behavior"&gt;
&lt;h3&gt;Biology and Behavior&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="brain-structure"&gt;
&lt;h3&gt;Brain Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Limbic system (邊緣系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;regulates emotions and motivated behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Hippocampus (海馬回)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;記憶&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Amygdala (杏仁核)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;情緒、攻擊&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Hypothalamus (下視丘)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;manage body's interanl state&lt;/li&gt;
&lt;li&gt;體溫調節、性興奮&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Thalamus (視丘)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;relay sensory information&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cerebellum (小腦)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;regulates coordinated movement&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Brain stem (腦幹)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;set brain's general alterness level and warning system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Medulla (延腦)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;breath, blood pressure, heartbeat&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Pons (橋腦)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reticular Formation (網狀組織)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Spinal cord (脊髓)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;pathway for neural fibers traveling to and from brain&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cerebral cortex (大腦皮質)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;involve in complex mental processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sleep-cycle"&gt;
&lt;h3&gt;Sleep Cycle&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stage 1&lt;/li&gt;
&lt;li&gt;Stage 2&lt;/li&gt;
&lt;li&gt;Stage 3&lt;/li&gt;
&lt;li&gt;Stage 4&lt;/li&gt;
&lt;li&gt;Rapid EyeMovements (REM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch5-mind-consciousness-and-alternatestates"&gt;
&lt;h2&gt;Ch5 - Mind, Consciousness, and AlternateStates&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="others"&gt;
&lt;h2&gt;Others&lt;/h2&gt;
&lt;div class="section" id="pygmalion-effect"&gt;
&lt;h3&gt;Pygmalion Effect&lt;/h3&gt;
&lt;p&gt;指人在被付予更高期望以後，他們會表現的更好的一種現象&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29"&gt;http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://phiphicake.blogspot.tw/2009/04/blog-post_13.html"&gt;http://phiphicake.blogspot.tw/2009/04/blog-post_13.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid"&gt;http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/"&gt;http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="psycho"></category></entry><entry><title>[Psycho] Psychology Intro. 2</title><link href="/posts/2014/11/psycho-intro-2/" rel="alternate"></link><updated>2015-01-03T15:53:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/psycho-intro-2/</id><summary type="html">&lt;p&gt;修心理學通識的隨便紀錄 (?&lt;/p&gt;
&lt;p&gt;教材 (非修課) :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ncu.edu.tw/~jimmyjue/lge/program2/p205/2a.pdf"&gt;學習與記憶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ncu.edu.tw/~jimmyjue/lge/program2/p205/2b.pdf"&gt;青少年發展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ncu.edu.tw/~jimmyjue/lge/program2/p205/3b.pdf"&gt;人格心理學&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;學習&lt;/h2&gt;
&lt;p&gt;學習 : 由經驗所造成的行為模式上的相對的永久性變化&lt;/p&gt;
&lt;p&gt;preformance distinction : 學到的不見得會表現出來&lt;/p&gt;
&lt;p&gt;習慣化 : 降低 response time&lt;/p&gt;
&lt;p&gt;敏感化 : 提升反應程度&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;行為主義與行為分析&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="24%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="54%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;John Watson&lt;/td&gt;
&lt;td&gt;1878 ~ 1958&lt;/td&gt;
&lt;td&gt;Father of American behaviorism&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;B.F. Skinner&lt;/td&gt;
&lt;td&gt;1904 ~ 1990&lt;/td&gt;
&lt;td&gt;Operant conditioning model&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;行為分析 : 專注於發現環境對行為的影響&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;古典制約&lt;/h3&gt;
&lt;p&gt;Classical Conditioning: Learning Predictable Signals&lt;/p&gt;
&lt;p&gt;based on 已經有的反應去做制約&lt;/p&gt;
&lt;div class="section" id="ivan-pavlov-s-dog"&gt;
&lt;h4&gt;Ivan Pavlov's dog&lt;/h4&gt;
&lt;p&gt;from wikipedia :&lt;/p&gt;
&lt;p&gt;狗能夠對食物自然而然的分泌唾液，此時 Ivan Pavlov 將食物看作非制約刺激（US）、唾液分泌看作非制約反應（UR），並將兩者的關係稱為非制約反射。而如果在提供食物之前的幾秒鐘發出一些作為中性刺激（NS）的聲響，將會使得這個聲響轉變為制約刺激（CS），能夠單獨在沒有食物的狀況下引起作為制約反應（CR）的唾液分泌，兩者的關係則被稱做制約反射。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;食物 (US) =&amp;gt; 唾液分泌（UR）&lt;/div&gt;
&lt;div class="line"&gt;食物 (US) + 聲音 (NS) =&amp;gt; 唾液分泌（UR）&lt;/div&gt;
&lt;div class="line"&gt;聲音 (CS) =&amp;gt; 唾液分泌（CR）&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;名詞解釋&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;非制約刺激（unconditioned stimulus，US) ： 不需經過學習就能引起反應的 刺激 ， 如上述狗食&lt;/li&gt;
&lt;li&gt;非制約反應（uncond itioned response，UR) ： 不需經過學習就能對非制約刺 激起的反應 ， 如上述狗對食物所流的口水&lt;/li&gt;
&lt;li&gt;制約刺激（conditioned stimulus，CS）： 本為中性刺激 ， 與非制約刺激連結 ， 能引起反應的刺激 ， 如上述聲音&lt;/li&gt;
&lt;li&gt;制約反應（conditioned response，CR）： 由制約刺激所引起的反應 ， 如上述 狗對聲音所流的口水&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="conditioning" src="/img/psycho/conditioning.png" /&gt;
&lt;img alt="Strength of the CR" src="/img/psycho/strength-of-cr.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;操作制約&lt;/h3&gt;
&lt;p&gt;Operant Conditioning: Learning About Consequences&lt;/p&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;正增強&lt;/h4&gt;
&lt;p&gt;行為後的獎賞&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;負增強&lt;/h4&gt;
&lt;p&gt;厭惡而欲避免&lt;/p&gt;
&lt;p&gt;ex: 陽光很大，出門會帶太陽眼鏡&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;處罰&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;正處罰&lt;/li&gt;
&lt;li&gt;負處罰&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;制約的歷程&lt;/h3&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;刺激類化&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;刺激區辨&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="taste-aversion-learning"&gt;
&lt;h3&gt;Taste-aversion Learning&lt;/h3&gt;
&lt;p&gt;味道嫌惡學習&lt;/p&gt;
&lt;p&gt;Garcia effect&lt;/p&gt;
&lt;p&gt;ex: 接受化療的癌症患者會對食物產生噁心，因為其化療往往在進食後進行，由此使癌症患者感到是食物導致其化療痛苦&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;觀察學習&lt;/h3&gt;
&lt;p&gt;見賢思齊，見不賢內自省&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bandura-s-research"&gt;
&lt;h3&gt;Bandura's Research&lt;/h3&gt;
&lt;p&gt;觀察學習&lt;/p&gt;
&lt;p&gt;BoBo Doll Study&lt;/p&gt;
&lt;p&gt;在該實驗中，Bandura 選用兒童作為實驗對象，因為通常兒童很少有社會條件反射。班杜拉試圖使兒童分別受到成人榜樣的攻擊性行為與非攻擊性行為的影響。然後將這些兒童置於沒有成人榜樣的新環境中，以觀察他們是否模仿了成人榜樣的攻擊性行為與非攻擊性行為。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.xuite.net/kc6191/study/22375433-%E7%8F%AD%E6%9D%9C%EF%A4%A5%28Albert+Bandura%29+-+%E7%A4%BE%E6%9C%83%E5%AD%B8%E7%BF%92%EF%A5%81%28social+learning+theory%29"&gt;班杜拉 (Albert Bandura) - 社會學習論 (social learning theory)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="video"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/128Ts5r9NRE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/NjTxQy_U3ac" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;記憶&lt;/h2&gt;
&lt;p&gt;7 +- 2 working memory chunks&lt;/p&gt;
&lt;img alt="Memory" src="/img/psycho/infoprocess.jpg" /&gt;
&lt;p&gt;events =&amp;gt; Sensory Memory =&amp;gt; Working Memory (include Short-term Memory) =&amp;gt; Long-term Memory&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;explicit memory : 取得資訊需要有意識的回想&lt;/li&gt;
&lt;li&gt;implicit memory : 取得資訊不需要有意識的的回想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Types :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Declarative Memory&lt;/li&gt;
&lt;li&gt;Procedural Memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dimensions of Long-Term Memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Long-term Memory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Declarative Memory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Episodic Memory (個人事件記憶/情節記憶)&lt;/li&gt;
&lt;li&gt;Semantic Memory (語意記憶)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Procedural Memory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Serial Position Effect&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Primacy Effect&lt;/li&gt;
&lt;li&gt;Recency Effect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Forget&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Proactive interference (順向干擾(對未來記憶的干擾))&lt;/li&gt;
&lt;li&gt;Retroactive interference (逆向干擾(對過去記憶的干擾))&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/bSycdIx-C48" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/HVWbrNls-Kw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;智力&lt;/h2&gt;
&lt;p&gt;Psychological Assessment 心理評量&lt;/p&gt;
&lt;p&gt;Formal Assessment : 信度、效度、標準化&lt;/p&gt;
&lt;p&gt;Galton's idea of Intelligence&lt;/p&gt;
&lt;p&gt;Theories of Intelligence&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Crystallized Intelligence 結晶智力&lt;/li&gt;
&lt;li&gt;Fluid Intelligence 流體智力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sternberg’s Triarchic Theory (1999) (智力三元論)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Analytical intelligence 分析智力&lt;/li&gt;
&lt;li&gt;Creative intelligence 創造智力&lt;/li&gt;
&lt;li&gt;Practical intelligence 實用智力&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/9xTz3QjcloI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/75g4d5sF3xI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h2&gt;人類發展&lt;/h2&gt;
&lt;p&gt;Developmental Psychology 發展心理學&lt;/p&gt;
&lt;p&gt;Locomotion&lt;/p&gt;
&lt;img alt="認知發展階段" src="/img/psycho/cognitive-developmental-theory.jpg" /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;research design&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Longitudinal Design 縱貫設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;長時間研究同年齡的受試者&lt;/li&gt;
&lt;li&gt;受試者流失 dropout,造成不同時間資料比較的困難&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cross-Sectional Design 橫向設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;某一時間研究不同年齡組&lt;/li&gt;
&lt;li&gt;世代效應 cohort effect: 不同年齡組受到不同的歷史的影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Piaget's theory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;認知發展理論&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;認知發展的基礎：基模，同化，調節，不平衡狀態&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;基模：知識的組織與結構&lt;/li&gt;
&lt;li&gt;同化：以已有的知識解釋來自環境中的各種刺激&lt;/li&gt;
&lt;li&gt;調節：個體同化外界事物時，受外界影響，知識組織產生變化&lt;/li&gt;
&lt;li&gt;不平衡狀態：個體知識結構與外界刺激間因不一致產生不平衡狀態，使個體有進一步學習的動機&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;認知發展階段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cognitive development in adulthood&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;流體智力&lt;/li&gt;
&lt;li&gt;晶體智力&lt;/li&gt;
&lt;li&gt;選擇性最適化加上補償替代方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Erikson's theory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;社會心理發展階段&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Attachment 依附關係&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Attachment_theory"&gt;Attachment theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Parenting style&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Identity formation 認同形成&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;James Marcia&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Identity diffusion 認同散亂&lt;/li&gt;
&lt;li&gt;Foreclosure 提早結束&lt;/li&gt;
&lt;li&gt;Moratorium 認同找尋中(延緩)&lt;/li&gt;
&lt;li&gt;Identity achievement 認同完成/成就&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Expanded on Erikson's analysis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Moral (道德) Development&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Lawrence Kohlberg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lawrence_Kohlberg%27s_stages_of_moral_development"&gt;Lawrence Kohlberg's stages of moral development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Level 1&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Stage 1 : 避免懲罰&lt;/li&gt;
&lt;li&gt;Stage 2 : 贏得獎勵，強調報酬/交換&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Level 2&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Stage 3 : 贏得讚許，避免被反對，作個 &amp;quot;好人&amp;quot;&lt;/li&gt;
&lt;li&gt;Stage 4 : 被 &amp;quot;法律與秩序&amp;quot; 規範&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Level 3&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Stage 5 : 被公眾福利，&amp;quot;社會契約&amp;quot; 規範&lt;/li&gt;
&lt;li&gt;Stage 6 : 被自己建立的抽象道德原則規範&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="visual-cliff"&gt;
&lt;h3&gt;visual cliff&lt;/h3&gt;
&lt;p&gt;發展心理學的一個著名實驗，用來研究人類和動物的深度知覺，設計者為 Eleanor Gibson 和 Richard Walk&lt;/p&gt;
&lt;iframe src="//player.vimeo.com/video/77934" width="WIDTH" height="HEIGHT" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="erikson-s-theory"&gt;
&lt;h3&gt;Erikson's theory&lt;/h3&gt;
&lt;p&gt;社會心理發展階段&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Erikson%27s_stages_of_psychosocial_development"&gt;Erikson's stages of psychosocial development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stage 1 ~ 8&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parenting-styles"&gt;
&lt;h3&gt;Parenting Styles&lt;/h3&gt;
&lt;img alt="Parenting Styles" src="/img/psycho/parenting-styles.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="psycho"></category></entry><entry><title>ZIP unsupported compression method 99</title><link href="/posts/2014/11/zip-unsupported-99/" rel="alternate"></link><updated>2014-11-04T23:51:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-04:posts/2014/11/zip-unsupported-99/</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;前陣子朋友碰到有設密碼的 zip 檔不能用 unzip 來解開，&lt;/div&gt;
&lt;div class="line"&gt;會出現 &amp;quot;does not support compression method 99&amp;quot; 的錯誤，&lt;/div&gt;
&lt;div class="line"&gt;原因是這些檔案用 AES 加密，&lt;/div&gt;
&lt;div class="line"&gt;對 unzip 來說是新 method 所以不支援，&lt;/div&gt;
&lt;div class="line"&gt;這時候只好用其他支援的工具解開啦，&lt;/div&gt;
&lt;div class="line"&gt;例如 : 7z&lt;/div&gt;
&lt;/div&gt;
</summary><category term="zip"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 3</title><link href="/posts/2014/10/pythoner-read-ruby-book-3/" rel="alternate"></link><updated>2014-10-11T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/pythoner-read-ruby-book-3/</id><summary type="html">&lt;div class="section" id="ch-8-regular-expression"&gt;
&lt;h2&gt;ch 8 Regular Expression&lt;/h2&gt;
&lt;p&gt;毫無反應就是 regular expression&lt;/p&gt;
&lt;p&gt;書上是介紹 Ruby 裡的 re，基本上長的就是 Perl 樣 (X&lt;/p&gt;
&lt;p&gt;基本 re 觀念都差不多&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Ruby&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;lt;.*?&amp;gt;)/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&amp;lt;.*?&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書上提到 Ruby 1.9 的 re 使用了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Oniguruma"&gt;Oniguruma&lt;/a&gt; 這個 engine，
Ruby 2.0 後轉到 Oniguruma 的 fork : &lt;a class="reference external" href="https://github.com/k-takata/Onigmo"&gt;Onigmo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 的話可以看 &lt;a class="reference external" href="https://docs.python.org/3/library/re.html"&gt;re 的 document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這章節最後最後提到 DSL (Domain Specific Language)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-1-integer"&gt;
&lt;h2&gt;ch 9-1 Integer&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 C 裡，型態為 int 的狀態下，5 / 2 的結果會是 2&lt;/li&gt;
&lt;li&gt;int 有大小上限&lt;/li&gt;
&lt;li&gt;bitwise operation&lt;/li&gt;
&lt;li&gt;bitmask&lt;/li&gt;
&lt;li&gt;2's complement&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-2-float"&gt;
&lt;h2&gt;ch 9-2 Float&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed point number (不好用)&lt;/li&gt;
&lt;li&gt;IEEE 754&lt;/li&gt;
&lt;li&gt;電腦中的浮點數沒有結合律 (誤差會擴大)&lt;/li&gt;
&lt;li&gt;誤差會累積&lt;/li&gt;
&lt;li&gt;Inf, 0, NaN&lt;/li&gt;
&lt;li&gt;運算的值的絕對值相差過大時，計算會造成誤差&lt;/li&gt;
&lt;li&gt;cancellation error (相減兩個相近的數字時造成的誤差)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.234567889943719&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt;
&lt;span class="mf"&gt;1.23456789&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.0123456&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.0123444&lt;/span&gt;
&lt;span class="mf"&gt;1.1999999999998123e-06&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 2</title><link href="/posts/2014/10/pythoner-read-ruby-book-2/" rel="alternate"></link><updated>2014-10-10T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-2/</id><summary type="html">&lt;div class="section" id="ch-2-5-duck-typing"&gt;
&lt;h2&gt;ch 2-5 Duck Typing&lt;/h2&gt;
&lt;p&gt;duck typing 實在很常聽到，尤其自己常寫的是 Python XD&lt;/p&gt;
&lt;p&gt;在講到 type 時，常聽到的有 static 和 dynamic，static 的話不用執行就可以知道，
dynamic 的話要執行下去才能確認&lt;/p&gt;
&lt;p&gt;硬體看得懂的是二進位數字，其他寫程式用到的型別都是建立在這之上的，
如果沒有做成更好用的 type 的話會造成程式撰寫上的負擔，
於是 Fortran 提供了型別 (整數資料、浮點數陣列等等)，
於是有了 static type (宣告型別)&lt;/p&gt;
&lt;div class="section" id="lisp-dynamic-type"&gt;
&lt;h3&gt;Lisp &amp;amp; Dynamic type&lt;/h3&gt;
&lt;p&gt;在 Fortran 出現後幾年，出現了 Lisp，
1958 年的 Lisp 只有兩種型別 : list、atom，不是 list 的都是 atom&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cons cell&lt;/li&gt;
&lt;li&gt;car, cdr&lt;/li&gt;
&lt;li&gt;S-expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lisp 的 list 裡事先無法知道 cons cell 裡面指到的是 cons cell 還是 atom，
本質上可說是 polymorphism 的 data structure，
所以 Lisp 採用的是 &amp;quot;資料本身還有描述自己型別的資訊&amp;quot;，又稱為動態型別&lt;/p&gt;
&lt;pre class="literal-block"&gt;
  cons cell

+-----+-----+
| car | cdr |
+-----+-----+
   |     |
   |     |
 +---+  +-----+-----+
 | 5 |  | car | cdr |
 +---+  +-----+-----+
 atom      |     |
           |     |
        +----+  nil
        | 13 |  atom
        +----+
         atom
&lt;/pre&gt;
&lt;p&gt;Static Type 起自 Fortran、Dynamic Type 起自 Lisp，
在最初的物件導向語言 Simula 裡，出現了和 Dynamic Type 類似的型別 Ref (Simula 中除了物件之外都是靜態型別)，
之後從 Simula 的物件導向概念延生出的 Smalltalk 和 Lisp 一樣全面採用動態型別，
1980 年代前半，受到 Simula 影響而誕生了 C++，重要概念 : &amp;quot;subclass 可以視為 base class 的 instance&amp;quot;&lt;/p&gt;
&lt;p&gt;Duck Typing 的概念是: &amp;quot;走路像鴨子，看起來像鴨子，那就可以把他當成鴨子&amp;quot;&lt;/p&gt;
&lt;p&gt;Dynamic Type 裡避免名去檢查型別，而改以檢查是否有某 method&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>血月之 Stellarium</title><link href="/posts/2014/10/stellarium/" rel="alternate"></link><updated>2014-10-10T19:13:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/stellarium/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stellarium.org/"&gt;Stellarium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;月全蝕的時候從朋友那知道的 Open Source 軟體，
看起來蠻棒的 XD&lt;/p&gt;
</summary><category term=""></category></entry><entry><title>心理學概論 之 Chomsky</title><link href="/posts/2014/10/psychology-intro-chomsky/" rel="alternate"></link><updated>2014-10-10T18:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/psychology-intro-chomsky/</id><summary type="html">&lt;p&gt;這禮拜二在上心理學概論的時候，上到打瞌睡 zzz，
都是因為整天都有課 (晚上也有)，前面又上完體育課很累 ...&lt;/p&gt;
&lt;p&gt;就在半睡半醒中，突然聽到了 Chomsky !&lt;/p&gt;
&lt;p&gt;頓時精神力上升，腦中馬上浮現 Chomsky Normal Form，
馬上抬頭看一下 slide，上面寫著 Noam Chomsky，
立馬 Google ...&lt;/p&gt;
&lt;p&gt;果然是同個人啊 ...&lt;/p&gt;
&lt;p&gt;在上心理學的時候可以想到正規也是個奇妙的狀況 Orz&lt;/p&gt;
</summary><category term="psychology"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 1</title><link href="/posts/2014/10/pythoner-read-ruby-book-1/" rel="alternate"></link><updated>2014-10-10T16:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-1/</id><summary type="html">&lt;p&gt;這邊是讀了書上內容的節錄和獨後自己查的資料&lt;/p&gt;
&lt;p&gt;目前心得 : 可以看到一些觀念，但是有些例子就 ... (尤其是少部份有提到 Python 的)&lt;/p&gt;
&lt;div class="section" id="ch-14-1-functional-programming"&gt;
&lt;h2&gt;ch 14-1 - functional programming&lt;/h2&gt;
&lt;p&gt;是的沒錯，我第一個翻的章節是 chapter 14 ...&lt;/p&gt;
&lt;p&gt;Fortran 設計者為 John Backus (John Backus 還發明了 BNF)，
其在 1997 年 Turing Award 上發表的語言 &amp;quot;FP&amp;quot; 被認為是 Functional Programming 的起點&lt;/p&gt;
&lt;p&gt;Feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Higher-order function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;pure function (no side effect)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Referential transparency&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="lisp"&gt;
&lt;h3&gt;Lisp&lt;/h3&gt;
&lt;p&gt;Lisp 的基礎是 Alonzo Church 提的 lambda calculus，也支援 Higher-order function&lt;/p&gt;
&lt;p&gt;Lisp 具有一些 functional 的特性，但不是純粹的 functional&lt;/p&gt;
&lt;p&gt;Lisp 最大的特色是 S-expression&lt;/p&gt;
&lt;p&gt;另一個特色是 list (LISP = LISt Processing)，Lisp 把節點稱為 cons cell，
cons 是從建立新 cell 的 function : cons (construct) 而來，
而一開始的 Lisp 環境把第一個資料放在 address register，第二個放在 data register，
所以 car = content of address register、cdr = content of data register，
構成 list 的資料成為 atom (symbol or number)&lt;/p&gt;
&lt;p&gt;cons cell:&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;cdr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lisp 的 list 底下結構是 singly linked-list&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="haskell"&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;p&gt;Haskell Curry 的 Combinatory logic 和 Alonzo Church 的 lambda calculus 幾乎相同的東西&lt;/p&gt;
&lt;p&gt;Haskell feature:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no side effect&lt;/li&gt;
&lt;li&gt;Higher-order function&lt;/li&gt;
&lt;li&gt;partial function application&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;type inference&lt;/li&gt;
&lt;li&gt;list comprehension&lt;/li&gt;
&lt;li&gt;block by indent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell 有靜態多型的型別系統和 type inference，可以在接近 duck typing 的情況下，
在編譯時完成 type checking&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocaml"&gt;
&lt;h3&gt;OCaml&lt;/h3&gt;
&lt;p&gt;OCaml 歷史比 Haskell 早，誕生於法國&lt;/p&gt;
&lt;p&gt;和 Haskell 相比有些不同:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;has side effect&lt;/li&gt;
&lt;li&gt;no lazy evaluation&lt;/li&gt;
&lt;li&gt;module system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OCaml 想要 lazy evaluation 時可以明確標示&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="erlang"&gt;
&lt;h3&gt;Erlang&lt;/h3&gt;
&lt;p&gt;Erlang 是為了平行處理而設計的，設計受到 Prolog 影響&lt;/p&gt;
&lt;p&gt;dynamic type, no lazy evaluation&lt;/p&gt;
&lt;p&gt;以 actor 理論為基礎&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Block&lt;/li&gt;
&lt;li&gt;Proc object&lt;/li&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;enumerator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/"&gt;What Is the Difference Between a Block, a Proc, and a Lambda in Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="c1"&gt;# block is everything between the do and end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;lam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# The &amp;#39;&amp;amp;&amp;#39; tells ruby to turn the proc into a block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-2-code-generation"&gt;
&lt;h3&gt;ch 14-2 Code Generation&lt;/h3&gt;
&lt;p&gt;nothing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-3-memory-management"&gt;
&lt;h3&gt;ch 14-3 Memory Management&lt;/h3&gt;
&lt;p&gt;因為一些概念之前有看過了，所以這邊算是複習和加強 XD&lt;/p&gt;
&lt;p&gt;Garbage Collection 的誕生是在 1960 年代，
起因於 Lisp 需要產生大量 cons cell object，不能明確管理各個 object&lt;/p&gt;
&lt;p&gt;GC 衡量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;GC 所佔的時間比例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Pause Time&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;平均 pause time&lt;/li&gt;
&lt;li&gt;最長的 pause time&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="no-gc"&gt;
&lt;h4&gt;no GC&lt;/h4&gt;
&lt;p&gt;例如 C 或 C++，programmer 自己管理 memory，自己 malloc/free、new/delete&lt;/p&gt;
&lt;p&gt;programmer 沒把程式寫好會造成:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;dangling pointer (因為把還在用的 free 掉了)&lt;/li&gt;
&lt;li&gt;memory leak (該 free 的沒 free 到)&lt;/li&gt;
&lt;li&gt;double free&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要檢查這些問題可以使用 valgrind&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gc-algorithm"&gt;
&lt;h4&gt;GC algorithm&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="50%" /&gt;
&lt;col width="31%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Problem&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;reference counting&lt;/td&gt;
&lt;td&gt;用一數字紀錄被 reference 的次數，最容易實作&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;cycle reference&lt;/li&gt;
&lt;li&gt;不適合平行處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; sweep&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，沒標到的清掉&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;objects 量上升時，速度容易下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; compact&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，
接著把標過的集合起來，
如此一來 memory 操作就有了區域性，
讓快取之類的機制效率提高&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;比 mark &amp;amp; sweep 慢&lt;/li&gt;
&lt;li&gt;不能使用保守 GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;copying&lt;/td&gt;
&lt;td&gt;把還在用的複製一份到新的 memory 區域 (會分成新和舊)，
接著把舊區域整個清掉&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Generational&lt;/td&gt;
&lt;td&gt;多數 objects 會在短時間內變成 garbage，所以可以用 age 做不同處理，
會分成 minor GC 和 major GC，
有 write barrier (紀錄 old object 裡用到 young object 的狀況，這紀錄稱為 remembered set)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Conservative&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;在 C 這種本來沒有 GC 的語言，compile 後就沒有區分 integer 和 pointer 的資訊，
因為 CPU 不需要，這時可以使用 Conservative 實作，概念是 &amp;quot;碰到 address 相同時，
代表可能被引用，視為存活&amp;quot;&lt;/p&gt;
&lt;p class="last"&gt;(heap 會整個被掃過)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Incremental&lt;/td&gt;
&lt;td&gt;把 GC 操作切割，以降低每次 GC 的最長時間，也用了 write barrier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Concurrent&lt;/td&gt;
&lt;td&gt;機制和 Incremental GC 類似，利用 write barrier 維持狀態資訊，實作時也可能有專用的 GC thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bitmap Marking&lt;/td&gt;
&lt;td&gt;Linux 這類 Unix-like 在 fork 時 memory addres 是 copy-on-write 的，
可以避免不必要的 page copy，但是和 GC 的搭配不太好，GC 在改動時就會大量複製，
Bitmap Marking 就是用來降低複製 page 的次數，不時直接對 object 做標記，
而是有另外的空間用於標記，所以複製的只有標記用的 Bitmap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-4-ruby-with-c"&gt;
&lt;h2&gt;ch 14-4 Ruby with C&lt;/h2&gt;
&lt;p&gt;介紹 Ruby 如何和 C 一起用&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-5-open-source"&gt;
&lt;h2&gt;ch 14-5 Open Source&lt;/h2&gt;
&lt;p&gt;Open Source 發展簡史&lt;/p&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>People who make VMs</title><link href="/posts/2014/09/vm-people/" rel="alternate"></link><updated>2014-09-28T13:25:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-28:posts/2014/09/vm-people/</id><summary type="html">&lt;p&gt;剛剛碰巧看到一個 &lt;a class="reference external" href="http://stackoverflow.com/questions/5168718/what-blocks-ruby-python-to-get-javascript-v8-speed/5172833#5172833"&gt;StackOverflow 上的回應&lt;/a&gt; ，
原來 V8 的 team 和 HotSpot JVM 的有很大重複，還有其他像是 Self VM、Animorphic Smalltalk VM、OOVM 都是，
而其中的 tech lead 叫 Lars Bak。&lt;/p&gt;
&lt;p&gt;Lars Bak 是 Dart 語言的創始人 (Dart 語言是 Google 想用來取代 Javascript 的一個語言) 也是 V8 和 Java HostSpot JVM 的領導，對於 VM 的技術有非常多的經驗，住在丹麥的 Aarhus 的農舍。&lt;/p&gt;
&lt;p&gt;剛好有找到一篇報導，請見下面連結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.ft.com/cms/s/0/03775904-177c-11de-8c9d-0000779fd2ac.html"&gt;The genius behind Google's browser&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hksilicon.com/kb/articles/6993/Lars-BakGoogle-Chrome"&gt;對岸翻譯版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="vm"></category></entry><entry><title>Incremental Garbage Collector</title><link href="/posts/2014/09/incremental-gc/" rel="alternate"></link><updated>2014-09-26T21:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/incremental-gc/</id><summary type="html">&lt;div class="section" id="pause-time"&gt;
&lt;h2&gt;前情提要 - Pause Time&lt;/h2&gt;
&lt;p&gt;在 CPython 中使用的是 reference count，所以當 count 變成 0 時就必須把空間回收，
當一個巨大的 object 要被回收時，就會產生不小的 pause time，但是這個時間是 deterministic 的。
reference count 有個問題就是 reference cycle，為了找出 cycle 就必須爬過所有 objects，
但是這就會產生 nondeterministic GC pause。&lt;/p&gt;
&lt;p&gt;reference count 是把回收的 cost 分開在各個時間點，而 tracing 的 GC 是把回收的 cost 集中在某一段時期，
回收所需時間可能不低，在這之中得把程式 pause，可能會讓使用者感覺到停頓，
而 Incremental GC 想做的就是把這段過程拆分成好幾個小步驟，
分別在不同時間執行 (打散)，讓程式執行更平順。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tech.mozilla.com.tw/posts/1605/你丟我撿！神奇的-firefox-內部記憶體回收機制"&gt;你丟我撿！神奇的 Firefox 內部記憶體回收機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/dmandelin/2012/07/20/incremental-gc-now-in-firefox-aurora/"&gt;Incremental GC now in Firefox Aurora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/javascript/2012/08/28/incremental-gc-in-firefox-16/"&gt;Incremental GC in Firefox 16!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2013/10/incremental-garbage-collector-in-pypy.html"&gt;Incremental Garbage Collector in PyPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="gc"></category></entry><entry><title>Chart.js 簡單的畫出 Chart</title><link href="/posts/2014/02/chart-js/" rel="alternate"></link><updated>2014-02-22T14:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-22:posts/2014/02/chart-js/</id><summary type="html">&lt;script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"&gt;&lt;/script&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; 是利用 HTML5 的 canvas 去畫的，
而 Chart.js 這個 library 本身是 open source 的 (MIT license) (&lt;a class="reference external" href="https://github.com/nnnick/Chart.js"&gt;Chart.js - github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;所以到底要怎麼用呢？&lt;/p&gt;
&lt;p&gt;其實要用這個 library 很簡單，
首先要先把 Chart.js (或 Chart.min.js) include 進來 (這邊先用 CDN 上的做範例，要擺到自己機器上的再去修改 src)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再來是要有畫布啦 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著是給資料然後畫圖 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#F38630&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#E0E4CC&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#69D2E7&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//Get the context of the canvas element we want to select&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myNewChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;canvas id="myChart" width="400" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
    var data = [
        {
            value: 30,
            color:"#F38630"
        },
        {
            value : 50,
            color : "#E0E4CC"
        },
        {
            value : 100,
            color : "#69D2E7"
        }
    ];
    var ctx = document.getElementById("myChart").getContext("2d");
    var myNewChart = new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;p&gt;Chart.js 目前有六種 Charts，
可以在 &lt;a class="reference external" href="http://www.chartjs.org/docs/"&gt;官方文件&lt;/a&gt; 看到相關的設定、資料格式，
每個 Chart 除了本身的資料外，還有一些 option 可以調整，
例如要不要 animation 啦、要不要顯示 label 啦 ... etc&lt;/p&gt;
&lt;div class="section" id="chart"&gt;
&lt;h2&gt;六種 Chart&lt;/h2&gt;
&lt;div class="section" id="line-chart"&gt;
&lt;h3&gt;Line Chart&lt;/h3&gt;
&lt;canvas id="LineChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("LineChart").getContext("2d");
new Chart(ctx).Line(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="bar-chart"&gt;
&lt;h3&gt;Bar Chart&lt;/h3&gt;
&lt;canvas id="BarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("BarChart").getContext("2d");
new Chart(ctx).Bar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="radar-chart"&gt;
&lt;h3&gt;Radar chart&lt;/h3&gt;
&lt;canvas id="RadarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["Eating","Drinking","Sleeping","Designing","Coding","Partying","Running"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("RadarChart").getContext("2d");
new Chart(ctx).Radar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="polar-area-chart"&gt;
&lt;h3&gt;Polar area chart&lt;/h3&gt;
&lt;canvas id="PolarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value : 30,
        color: "#D97041"
    },
    {
        value : 90,
        color: "#C7604C"
    },
    {
        value : 24,
        color: "#21323D"
    },
    {
        value : 58,
        color: "#9D9B7F"
    },
    {
        value : 82,
        color: "#7D4F6D"
    },
    {
        value : 8,
        color: "#584A5E"
    }
];
var ctx = document.getElementById("PolarChart").getContext("2d");
new Chart(ctx).PolarArea(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="pie-chart"&gt;
&lt;h3&gt;Pie chart&lt;/h3&gt;
&lt;canvas id="PieChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F38630"
    },
    {
        value : 50,
        color : "#E0E4CC"
    },
    {
        value : 100,
        color : "#69D2E7"
    }
];
var ctx = document.getElementById("PieChart").getContext("2d");
new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="doughnut-chart"&gt;
&lt;h3&gt;Doughnut chart&lt;/h3&gt;
&lt;canvas id="DoughnutChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F7464A"
    },
    {
        value : 50,
        color : "#E2EAE9"
    },
    {
        value : 100,
        color : "#D4CCC5"
    },
    {
        value : 40,
        color : "#949FB1"
    },
    {
        value : 120,
        color : "#4D5360"
    }

];
var ctx = document.getElementById("DoughnutChart").getContext("2d");
new Chart(ctx).Doughnut(data);
&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Javascript"></category></entry><entry><title>[回憶] 2012 年夏 ~ 2014 年春</title><link href="/posts/2014/02/recall-2012-summer-2014-spring/" rel="alternate"></link><updated>2014-02-18T21:00:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-18:posts/2014/02/recall-2012-summer-2014-spring/</id><summary type="html">&lt;p&gt;一年半內除了學校的課程能學到些什麼？&lt;/p&gt;
&lt;p&gt;不多也不少，這樣而已&lt;/p&gt;
&lt;p&gt;(想到什麼就紀錄些什麼吧)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起頭&lt;/h2&gt;
&lt;p&gt;2012 年夏，正值升大學的時期，雖然進了資工系，但其實什麼都還不會，
暑假期間開始常上 BBS，後來看到上面的色碼還有其他的控制碼覺得很有趣，
接著就開始在上面試了一下，然後又看到某人在上面搞出一堆神奇的東西 (?)，
再來是開到上面的 vim mode (當時還不會用 vim)，
這算是初步接觸到 vim 的地方之一吧 XD (另外是鳥哥寫的文章)。&lt;/p&gt;
&lt;p&gt;之後拿到了社團 server 上的帳號，開始連進去亂試指令 w，
從此掉進無底的坑洞 (X，這時間大概有時候會翻翻鳥哥吧，
到了學校後開始接觸 FreeBSD，
就裝來玩玩看，翻翻 FreeBSD handbook，開始認識 configure、make、ports ... etc，
當時在 FreeBSD 上用的是 tcsh (因為社團 server 預設是 tcsh，所以先接觸到 XD)，
因為一些原因開始看怎麼寫 shell script (Bourne Shell 的)，
慢慢知道有 sed、awk 這些東西，
開始使用 regular expression (已經想不起來從哪個時間點開始了)。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;寫到這裡開始回去翻以前寫在 BBS 的文章回想 XD&lt;/p&gt;
&lt;p&gt;阿對一開始還去玩了 pi 的貪吃蛇 ~&lt;/p&gt;
&lt;p&gt;哦哦哦！BBS 上看到的有石頭文、guest 發文、... (?)&lt;/p&gt;
&lt;p&gt;原來暑假就有翻過 regular expression，只是沒有碰到要使用的地方就不熟 XD，
後來有在用就比較 OK 了 ~&lt;/p&gt;
&lt;p&gt;喔對，BBS 有聊天指令 XD&lt;/p&gt;
&lt;p&gt;看到移位碼就想起之前試一試發現，
原本應該擋掉的名片檔移位碼在我亂試的情況下發現有 bug XDDDD，
後來被 PO 到 sysop，之後又修掉了。&lt;/p&gt;
&lt;p&gt;原來當初 9 月開始就有去過 PyHUG，但是當時完全不會 Python zzz&lt;/p&gt;
&lt;p&gt;找到了 ~ &lt;strong&gt;2012/10/17 拋棄 Windows，轉用 Linux&lt;/strong&gt; ，
當時裝了 Ubuntu，DE 預設是 Unity，用沒多久後換成 Gnome 2，大概就這樣用了一學期。
寒假換成 LXDE 又用了一學期，中間好像有試過 Gnome 3 一陣子吧，
一下學期末把 WM 換成了 awesome wm，然後就離不開 awesome 一直到現在，
一下結束的暑假把 Ubuntu 換成了 Arch Linux ，變成 Arch Linux + awesome。&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;說到 Vim 啊 ...&lt;/p&gt;
&lt;p&gt;一開始其實看到很多次，但是都沒有真的把它拿來用，所以不熟 zzz。
後來毅然決然把所有編輯純文字的東西都只用 vim ，一陣子後就習慣整個操作，
不過當時對 hjkl 的移動還不是很熟，索性在 .vimrc 裡把方向鍵 map 掉，
只用 hjkl 移動，後來也就習慣了。&lt;/p&gt;
&lt;p&gt;一上結束的寒假稍微看了一下 .vimrc 的設定，調了一些東西和試了一些 plugin (雖然最後大多把 plugin 關了 XD)，
做的設定中幾個最常用到的是 paste mode 切換的快捷鍵、儲存時自動移除行尾多餘空白、下次開啟時回到關閉前的位置 ... etc。&lt;/p&gt;
&lt;p&gt;plugin 部份的話用 Vundle 管理很方便，在加上一小段 script 後，
到新的地方只要打開 vim 就會自動裝好 vundle，
接著就可以利用 vundle 很快的把你的 plugin 裝起來，
利用 vundle 後 update plugin 也一樣只需要一個 command。&lt;/p&gt;
&lt;p&gt;現在只要是純文字的東西我都用 vim，可以說是離不開了 XD，就連這篇文章也是我用 vim 打出來的 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;到底是從什麼時候開始比較常寫 Python 的我又忘了 (X&lt;/p&gt;
&lt;p&gt;剛開始因為別人介紹，陸陸續續有看一點 Python 的東西，社課後知道了 list、tuple，
不過這時還是沒有在使用它，後來假期有人約讀書會所以看了 Python tutorial 的前部份。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假 (不知道是不是這個時期開始)，因為在跟高中同學打 game，
那遊戲在有人踩到紀錄點時會存資料在 host user，
而在某次遊戲中有人不小心在很糟糕的時間點踩到了，
結果只能回溯到那悲慘的時間點，
後來我就想說寫個程式讓他去 check 有新紀錄時就 backup 一次，
就開始用 Python 寫個小程式去 check，
東查西查，開始對 Python 變比較熟一點，
後來為了能一次 check 多個檔案又嘗試了 Python 的 multiprocessing，
而另一個同學則是去寫了簡單的 GUI，
在看了他的 code 並幫忙修改後，稍微對 Python 的 class 有點感覺了，
然後這也是我第一次使用內建的 tkinter 做簡單的 GUI。&lt;/p&gt;
&lt;p&gt;之後開始愈來愈常寫 Python，慢慢的學會愈來愈多東西 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;筆記&lt;/h2&gt;
&lt;p&gt;做筆記的方式嘛 ...&lt;/p&gt;
&lt;p&gt;高中用過 Evernote 記了一點東西(不多)，
後來大一有陣子是 Google Docs + Markdown (本機)。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假聽到 Sphinx 這玩意，
看起來還不錯，也看到別人寫出來的東西，
所以就開始變成寫 reStructuredText 、用 Sphinx generate HTML，
不過 Markdown 也還是有再用 (這篇就是用 Markdown 寫的)，
所以目前是 Markdown &amp;amp; reStructuredText 亂用中 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h2&gt;Version Control&lt;/h2&gt;
&lt;p&gt;我現在常用的 Version Control 是 git，
一開始也是不熟 (看了看還是沒常用)，後來把一些東西用 git 上去後，
變成只熟 add &amp;amp; commit (X，後來碰到一些狀況而對 checkout、push、partial add、cherry-pick、stash 比較熟一點，
目前是基本操作還 OK 啦 (自己說&lt;/p&gt;
&lt;p&gt;mercurial ...，目前無緣 XD，只在別人教的時候試過一次，不過因為已經慣用 git 了，所以 ... XD&lt;/p&gt;
&lt;p&gt;cvs 只在抓 FreeBSD kernel source 的時候用過 zzz&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;一個無底洞 (X&lt;/p&gt;
&lt;p&gt;我掉進去後就再也出不來了 XD&lt;/p&gt;
&lt;p&gt;因為已經太融入生活了，不知道該說什麼 ~&lt;/p&gt;
&lt;p&gt;現在用 Arch Linux 用的很開心  O w O&lt;/p&gt;
&lt;p&gt;改天想到再補東西吧 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="freebsd"&gt;
&lt;h2&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;FreeBSD 的部份算是配合修課做了點基本的學習，
內容大概有 FTP、Samba、ZFS、FAMP (FreeBSD + Apache + MySQL + PHP)、
NFS、amd (Berkeley Automounter)、NIS、PF、NAT、DHCP、SSL/TLS、Proxy、DNS、Postfix ...&lt;/p&gt;
&lt;p&gt;這些算是有基本的接觸過了 (有架出東西)，最不熟的大概是最後的 Mail Server 部份吧 zzz，
東西弄起來有點麻煩，最後交作業的時候 ClamAV 偵測病毒信件的部份沒弄好 = =。&lt;/p&gt;
&lt;p&gt;以前課程有 VPN，修課的時候剛好沒有，想之後找時間架來玩玩。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-css-javascript"&gt;
&lt;h2&gt;HTML, CSS, Javascript&lt;/h2&gt;
&lt;p&gt;這邊要從一下結束的暑假開始，
社團決定大家要一起用 Django 寫社團網站，
這時候就開始摸索 Django 和認識基本的 HTML，
不過 CSS 部份是由另一位負責，所以沒接觸。&lt;/p&gt;
&lt;p&gt;後來進 OH 去用 Django 改寫目前的網站，
OH 原本的網站是套 Bootstrap 2，我在做新網站的時候改用了 Bootstrap 3，
接著就因為 Bootstrap 3 改了很多地方，所以要到處去修 Orz，
中間調樣式的時候開始認識一些 CSS 的東西，
某些地方因為用到 Javascript 所以也開始有了點接觸。&lt;/p&gt;
&lt;p&gt;2014 2月，開始想用 GitHub Pages 來寫 blog，
於是開始使用 Pelican 這個 Python 寫的 static site generator，
因為可以用 Markdown 和 reStructuredText 所以可以很開心的用 vim 寫文章 ~~~&lt;/p&gt;
&lt;p&gt;在使用 Pelican 寫 blog 後，想說順便來試著自己寫個 theme 來看看，
所以就開始寫更多的 CSS，中間在調某些功能的時候用到了 Javascript，
所以也寫了一小段的 Javascript code。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h2&gt;Database&lt;/h2&gt;
&lt;p&gt;Database 的話只會一點點簡單的 SQL 語法，
大多是寫東西需要去查的，用一用就知道了幾個，
只用過 SQLite、MySQL、MariaDB，不過都不熟就是了 XD，
因為碰到的東西重點都不是在調 Database，
很多都只是接上去而已。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c"&gt;
&lt;h2&gt;C&lt;/h2&gt;
&lt;p&gt;說實話，C 其實只會些基本的東西，沒有很熟 XD&lt;/p&gt;
&lt;p&gt;現在只想到好幾個月前在 Wikipedia 的 Multiple dispatch 頁面看到的 C code 感覺還蠻有趣的 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;C++&lt;/h2&gt;
&lt;p&gt;一下的 OOP 課開始頻繁接觸 C++，
因為老師的課程安排，所以學了一些 C++11 的東西，
老師在 constructor 那部份講了好一陣子，
後來作業的關係寫了自己的 vector 和 list Orz，
還記得那時候在講 new，new operator、operator new、placement new ...&lt;/p&gt;
&lt;p&gt;某次作業好像用到了 C++11 加進來的 lambda expression。&lt;/p&gt;
&lt;p&gt;其實老師的講義寫了很多東西，只是我還沒能好好吸收起來 ...，
只好一定要好好補起來 = =&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;曾經在某陣子因為寫 C++ 作業的關係看了些 Makefile 的東西，
也寫了些簡單的 Makefile ...，不過現在差不多忘了 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="awk"&gt;
&lt;h2&gt;awk&lt;/h2&gt;
&lt;p&gt;awk 好像寫過那麼一下 ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sed"&gt;
&lt;h2&gt;sed&lt;/h2&gt;
&lt;p&gt;sed 好像在某次作業用過，還有自己寫的 shell script 裡用過，
不過基本上 ... 不熟 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-script-bourne-shell"&gt;
&lt;h2&gt;shell script (Bourne Shell)&lt;/h2&gt;
&lt;p&gt;shell script 少數時候會因需求寫一點，
不過都是寫純 Bourne Shell 的 (X，
Bash 的只有在 .bashrc 裡寫過 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lua"&gt;
&lt;h2&gt;lua&lt;/h2&gt;
&lt;p&gt;接觸到 lua 是因為轉用 awesome wm 的關係 XD，
awesome wm 的設定檔是用 lua 寫的，
所以改的時候會看到一些 lua 語法 ~，
前陣子在看 coroutine 的時候又看到用 lua 去說明的文章，
不過說那麼多其實還是沒在寫 lua XD (根本沒好好學過)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="perl"&gt;
&lt;h2&gt;Perl&lt;/h2&gt;
&lt;p&gt;Perl 只有在寫作業 (irc bot、大量寄信程式、登入時間統計) 的時候用過，
寫完之後就沒用過了 (X，現在可以說是完全不會了 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;有想要接觸 Functional 的東西耶&lt;/p&gt;
&lt;p&gt;之後想找時間學 Haskell ~ (曾經在某天翻過，連基本的都差不多忘光了 XD&lt;/p&gt;
&lt;p&gt;最近寫 Python 開始慢慢使用 lambda、filter、map、reduce (X&lt;/p&gt;
&lt;/div&gt;
</summary><category term="recall"></category></entry><entry><title>XMLHttpRequest</title><link href="/posts/2014/02/XMLHttpRequest/" rel="alternate"></link><updated>2014-02-11T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-11:posts/2014/02/XMLHttpRequest/</id><summary type="html">&lt;p&gt;有了 XMLHttpRequest 就讓我們可以利用 Javascript 去做 request&lt;/p&gt;
&lt;p&gt;以下直接用一段 Javascript 去說明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是建立 XMLHttpRequest 物件，再來撰寫 readyState 改變時所要做的動作 ( &lt;strong&gt;onreadystatechange&lt;/strong&gt; )，
open method 去指定要做的 request，再來呼叫 send method 送出&lt;/p&gt;
&lt;div class="section" id="xmlhttprequest"&gt;
&lt;h2&gt;在收到回應後，XMLHttpRequest 物件會設定的一些屬性&lt;/h2&gt;
&lt;div class="section" id="readystate"&gt;
&lt;h3&gt;readyState&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;0 (UNSENT)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The object has been constructed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;1 (OPENED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The open() method has been successfully invoked. During this state request headers can be set using setRequestHeader() and the request can be made using the send() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;2 (HEADERS_RECEIVED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All redirects (if any) have been followed and all HTTP headers of the final response have been received. Several response members of the object are now available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;3 (LOADING)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The response entity body is being received.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;4 (DONE)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此才在 onreadystatechange 裡做了 readyState 判斷，
on readyState change 顧名思義就是 readyState 有變動時會去 call 這個 method，
所以加上 readyState 的判斷後變成只有處理完後 &amp;quot;readyState 是 4 &amp;quot; 時才做動作&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status"&gt;
&lt;h3&gt;Status&lt;/h3&gt;
&lt;p&gt;就是 HTTP 的 Status Code&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsetext"&gt;
&lt;h3&gt;responseText&lt;/h3&gt;
&lt;p&gt;收到的內容&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsexml"&gt;
&lt;h3&gt;responseXML&lt;/h3&gt;
&lt;p&gt;收到的內容 (XML 格式)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/XMLHttpRequest"&gt;XMLHttpRequest - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;Ajax (programming)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="XMLHttpRequest"></category><category term="ajax"></category></entry><entry><title>closure 概念</title><link href="/posts/2014/02/closure/" rel="alternate"></link><updated>2014-02-07T21:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-07:posts/2014/02/closure/</id><summary type="html">&lt;p&gt;Closure 擁有非區域變數且非參數的變數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個例子可以看到 x 是個 func 的區域變數，但是在 f 當中又用到 x，
對於 f 來說 x 既不是區域變數又不是參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python 3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 12&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;Closure (computer programming) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109906-javascript-closure"&gt;[JavaScript] Closure 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109890-closure-javascript-closure-private"&gt;[Closure] JavaScript使用 Closure模擬出 Private Member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://openhome.cc/Gossip/JavaScript/Closure.html"&gt;JavaScript Essence: Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="closure"></category><category term="program"></category></entry><entry><title>coroutine 概念</title><link href="/posts/2014/02/coroutine/" rel="alternate"></link><updated>2014-02-06T21:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/coroutine/</id><summary type="html">&lt;p&gt;直接往下到 Reference 看別人寫的文章比較好 (X&lt;/p&gt;
&lt;p&gt;coroutine 是由 Melvin Conway 在 1960 年代所提出來&lt;/p&gt;
&lt;div class="section" id="coroutine"&gt;
&lt;h2&gt;Coroutine 基本概念&lt;/h2&gt;
&lt;p&gt;Coroutine 可以視為 &lt;strong&gt;可以中斷及繼續執行的 function call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在程式語言中，通常這種中斷會用 &lt;strong&gt;yield&lt;/strong&gt; 來表示，中斷時程式狀態會被保留，下次就恢復到該狀態繼續執行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generator"&gt;
&lt;h2&gt;Generator&lt;/h2&gt;
&lt;p&gt;generator 又稱為 semicoroutine&lt;/p&gt;
&lt;p&gt;雖然 generator 一樣可以中斷、繼續，但是 coroutine 可以指定從哪裡繼續執行，而 generator 不行，generator 只能回到上次中斷處&lt;/p&gt;
&lt;p&gt;但是 coroutine 可以用 generator 實作出來&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coroutines-in-python"&gt;
&lt;h2&gt;Coroutines in Python&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/"&gt;Improve Your Python: 'yield' and Generators Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio-task.html"&gt;Tasks and coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/"&gt;Coroutine: 入門篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/implement-iterators-by-coroutine/"&gt;使用 Coroutine 實作 Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine/"&gt;使用 Coroutine 改寫狀態機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine-part-2/"&gt;使用 Coroutine 改寫狀態機－續&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/001848.html"&gt;使用 coroutine 實做 user-level thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coroutine"&gt;Coroutine - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="coroutine"></category><category term="program"></category></entry></feed>