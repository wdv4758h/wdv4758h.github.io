<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2014-10-22T13:10:00+08:00</updated><entry><title>Python virtualenv upgrade</title><link href="/posts/2014/10/python-virtualenv-upgrade/" rel="alternate"></link><updated>2014-10-22T13:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-22:posts/2014/10/python-virtualenv-upgrade/</id><summary type="html">&lt;p&gt;If you want to upgrade main Python program in virtualenv,
then just run the creation command again.&lt;/p&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
virtualenv env
virtualenv env-pypy3 -p /usr/bin/pypy3
&lt;/pre&gt;
</summary><category term="Python"></category></entry><entry><title>RPython Intro.</title><link href="/posts/2014/10/RPython/" rel="alternate"></link><updated>2014-10-21T08:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-21:posts/2014/10/RPython/</id><summary type="html">&lt;p&gt;(not complete)&lt;/p&gt;
&lt;div class="section" id="what-s-rpython"&gt;
&lt;h2&gt;What's RPython&lt;/h2&gt;
&lt;p&gt;RPython is a subset of Python&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="83%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;RPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Static (not Manifest Typing, but Type Inference)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython"&gt;http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not all code in the PyPy repository is RPython.
For example, there are code generators (e.g. in rlib.parsing) that run at compile time and produce RPython code,
but are not RPython (frequently with a &amp;quot;NOT_RPYTHON&amp;quot; docstring, by the way).
Also, large parts of the standard library are written in full Python (mostly taken straight from CPython).&lt;/p&gt;
&lt;p&gt;To make a C code generator, code on interpreter level has to restrict to a subset of Python.
(Code on application level cat still use full Python)&lt;/p&gt;
&lt;p&gt;PyPy is &lt;strong&gt;not source-to-source translations&lt;/strong&gt;, it start translation from live &lt;strong&gt;python code objects&lt;/strong&gt; .&lt;/p&gt;
&lt;div class="section" id="type-inference-static-typing"&gt;
&lt;h3&gt;Type Inference &amp;amp; Static Typing&lt;/h3&gt;
&lt;p&gt;Types are not stated explicitly, they are infered, so RPython is static typing.&lt;/p&gt;
&lt;p&gt;Static typing doesn't mean the type has to be written out (that's &lt;strong&gt;manifest typing&lt;/strong&gt;),
it means each expression has a single type that never changes.&lt;/p&gt;
&lt;div class="section" id="analysis"&gt;
&lt;h4&gt;Analysis&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We cann't infer a (non-generic) type for a function like above,
the return type depends on arguments,
so the return type is determined by analysis the arguments (when the function is called)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rpythonic"&gt;
&lt;h3&gt;RPythonic&lt;/h3&gt;
&lt;div class="section" id="flow-restrictions"&gt;
&lt;h4&gt;Flow restrictions&lt;/h4&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;variable&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;globals are considered constants (global instances don't have this restriction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control structures&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;definitions&lt;/td&gt;
&lt;td&gt;run-time definition of classes or functions is not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;generators&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;exceptions&lt;/td&gt;
&lt;td&gt;fully supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="object-restrictions"&gt;
&lt;h4&gt;Object restrictions&lt;/h4&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;int, float, bool&lt;/td&gt;
&lt;td&gt;works&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;strings&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;no variable-length tuples&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;lists&lt;/td&gt;
&lt;td&gt;annotator can figure out most of the time that your list is fixed-size,
even when you use list comprehension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dicts&lt;/td&gt;
&lt;td&gt;unique key type only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;functions&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="integer-types"&gt;
&lt;h4&gt;Integer Types&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-a-python-vm-with-rpython"&gt;
&lt;h2&gt;build a Python VM with RPython&lt;/h2&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category></entry><entry><title>Try the jitviewer</title><link href="/posts/2014/10/jitviewer/" rel="alternate"></link><updated>2014-10-15T17:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-15:posts/2014/10/jitviewer/</id><summary type="html">&lt;div class="section" id="the-jitviewer"&gt;
&lt;h2&gt;the jitviewer&lt;/h2&gt;
&lt;div class="section" id="target"&gt;
&lt;h3&gt;target&lt;/h3&gt;
&lt;p&gt;analysis log from PyPy, and display Python bytecode &amp;amp; jit operations via the web&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;install&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;jitviewer is a PyPy2 only program now (it need rpython)&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv env-pypy -p /usr/bin/pypy
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;active the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;env-pypy/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;get the PyPy2 source code (for rpython)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://bitbucket.org/pypy/pypy/downloads/pypy-2.4.0-src.tar.bz2
tar -xvf pypy-2.4.0-src.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;install jitviewer&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install jitviewer
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;set the env&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYTHONPATH pypy-2.4.0-src
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;run the sample&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jitviewer.py --log log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-log-of-pypy"&gt;
&lt;h3&gt;create log of PyPy&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYPYLOG jit-log-opt,jit-backend-counts:myprogram.log
pypy -c your_program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="with-pypy3"&gt;
&lt;h3&gt;with PyPy3&lt;/h3&gt;
&lt;p&gt;As jitviewer is a PyPy2 only program now (2014-10-15),
you should run your program by PyPy3 and output the log,
then use jitviewer with PyPy2 to analysis the log.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expect-in-the-future"&gt;
&lt;h3&gt;expect in the future&lt;/h3&gt;
&lt;p&gt;There are something that I think it should have ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;PyPy3 compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jitviewer with PyPy3 is not working now,
the smaller part is the syntax in jitviewer (something like print function),
the bigger part is the rpython module ...&lt;/p&gt;
&lt;p&gt;At the moment, rpython has a lot of Python 2 only syntax (even in PyPy3 source code).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CPython compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means to remove the depenency of rpython.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h3&gt;note&lt;/h3&gt;
&lt;p&gt;The PyPy does not modify the output of Python bytecodes,
so the Python bytecodes output from CPython's dis module or PyPy's are the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>PTT - Python 版 - transpose 問題</title><link href="/posts/2014/10/ptt-python-transpose/" rel="alternate"></link><updated>2014-10-11T23:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/ptt-python-transpose/</id><summary type="html">&lt;p&gt;這篇在解 PTT Python 版上的一個問題 (#1KEG5cfG)&lt;/p&gt;
&lt;p&gt;基本上就是要做 transpose，但是資料長度不依，
所以就來試試囉 : &lt;a class="reference external" href="https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0"&gt;https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下都以 Python 3 為考量，而且以 zip 為出發點來解這個問題。&lt;/p&gt;
&lt;p&gt;如果是一個完整 n x m 的資料，
類似的工作可以用 zip 就完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在的狀況不是完整 n x m 的資料，而是長短不一的，
一種解是用 itertools 裡的 zip_longest，
參數是 iterables 還有 fillvalue (預設是 None)，
fillvalue 會拿來填滿資料短缺的部份。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;it&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 跟前面文章借測資&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊會把不夠的地方都補 None，
所以輸出會是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1, None)
(2, 2, 2, 2, 2, 2, None, None)
(3, 3, 3, 3, 3, 3, None, None)
(4, 4, 4, 4, 4, None, None, None)
(5, 5, 5, 5, None, None, None, None)
(6, 6, 6, None, None, None, None, None)
(7, 7, 7, None, None, None, None, None)
(8, 8, None, None, None, None, None, None)
(9, None, None, None, None, None, None, None)
&lt;/pre&gt;
&lt;p&gt;如果前面那種剛好符合需求，那就可以開心的拿來用了，
如果真的不想要看到多補的那些資料，就再把結果處理過。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterfalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此一來結果就變成:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1)
(2, 2, 2, 2, 2, 2)
(3, 3, 3, 3, 3, 3)
(4, 4, 4, 4, 4)
(5, 5, 5, 5)
(6, 6, 6)
(7, 7, 7)
(8, 8)
(9,)
&lt;/pre&gt;
&lt;p&gt;不過上面處理是以輸入 data 裡沒有 None 為前提的 XD
資料裡面可能有 None 的話就另外用別的值囉。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 3</title><link href="/posts/2014/10/pythoner-read-ruby-book-3/" rel="alternate"></link><updated>2014-10-11T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/pythoner-read-ruby-book-3/</id><summary type="html">&lt;div class="section" id="ch-8-regular-expression"&gt;
&lt;h2&gt;ch 8 Regular Expression&lt;/h2&gt;
&lt;p&gt;毫無反應就是 regular expression&lt;/p&gt;
&lt;p&gt;書上是介紹 Ruby 裡的 re，基本上長的就是 Perl 樣 (X&lt;/p&gt;
&lt;p&gt;基本 re 觀念都差不多&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Ruby&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;lt;.*?&amp;gt;)/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&amp;lt;.*?&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書上提到 Ruby 1.9 的 re 使用了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Oniguruma"&gt;Oniguruma&lt;/a&gt; 這個 engine，
Ruby 2.0 後轉到 Oniguruma 的 fork : &lt;a class="reference external" href="https://github.com/k-takata/Onigmo"&gt;Onigmo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 的話可以看 &lt;a class="reference external" href="https://docs.python.org/3/library/re.html"&gt;re 的 document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這章節最後最後提到 DSL (Domain Specific Language)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-1-integer"&gt;
&lt;h2&gt;ch 9-1 Integer&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 C 裡，型態為 int 的狀態下，5 / 2 的結果會是 2&lt;/li&gt;
&lt;li&gt;int 有大小上限&lt;/li&gt;
&lt;li&gt;bitwise operation&lt;/li&gt;
&lt;li&gt;bitmask&lt;/li&gt;
&lt;li&gt;2's complement&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-2-float"&gt;
&lt;h2&gt;ch 9-2 Float&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed point number (不好用)&lt;/li&gt;
&lt;li&gt;IEEE 754&lt;/li&gt;
&lt;li&gt;電腦中的浮點數沒有結合律 (誤差會擴大)&lt;/li&gt;
&lt;li&gt;誤差會累積&lt;/li&gt;
&lt;li&gt;Inf, 0, NaN&lt;/li&gt;
&lt;li&gt;運算的值的絕對值相差過大時，計算會造成誤差&lt;/li&gt;
&lt;li&gt;cancellation error (相減兩個相近的數字時造成的誤差)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.234567889943719&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt;
&lt;span class="mf"&gt;1.23456789&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.0123456&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.0123444&lt;/span&gt;
&lt;span class="mf"&gt;1.1999999999998123e-06&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 2</title><link href="/posts/2014/10/pythoner-read-ruby-book-2/" rel="alternate"></link><updated>2014-10-10T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-2/</id><summary type="html">&lt;div class="section" id="ch-2-5-duck-typing"&gt;
&lt;h2&gt;ch 2-5 Duck Typing&lt;/h2&gt;
&lt;p&gt;duck typing 實在很常聽到，尤其自己常寫的是 Python XD&lt;/p&gt;
&lt;p&gt;在講到 type 時，常聽到的有 static 和 dynamic，static 的話不用執行就可以知道，
dynamic 的話要執行下去才能確認&lt;/p&gt;
&lt;p&gt;硬體看得懂的是二進位數字，其他寫程式用到的型別都是建立在這之上的，
如果沒有做成更好用的 type 的話會造成程式撰寫上的負擔，
於是 Fortran 提供了型別 (整數資料、浮點數陣列等等)，
於是有了 static type (宣告型別)&lt;/p&gt;
&lt;div class="section" id="lisp-dynamic-type"&gt;
&lt;h3&gt;Lisp &amp;amp; Dynamic type&lt;/h3&gt;
&lt;p&gt;在 Fortran 出現後幾年，出現了 Lisp，
1958 年的 Lisp 只有兩種型別 : list、atom，不是 list 的都是 atom&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cons cell&lt;/li&gt;
&lt;li&gt;car, cdr&lt;/li&gt;
&lt;li&gt;S-expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lisp 的 list 裡事先無法知道 cons cell 裡面指到的是 cons cell 還是 atom，
本質上可說是 polymorphism 的 data structure，
所以 Lisp 採用的是 &amp;quot;資料本身還有描述自己型別的資訊&amp;quot;，又稱為動態型別&lt;/p&gt;
&lt;pre class="literal-block"&gt;
  cons cell

+-----+-----+
| car | cdr |
+-----+-----+
   |     |
   |     |
 +---+  +-----+-----+
 | 5 |  | car | cdr |
 +---+  +-----+-----+
 atom      |     |
           |     |
        +----+  nil
        | 13 |  atom
        +----+
         atom
&lt;/pre&gt;
&lt;p&gt;Static Type 起自 Fortran、Dynamic Type 起自 Lisp，
在最初的物件導向語言 Simula 裡，出現了和 Dynamic Type 類似的型別 Ref (Simula 中除了物件之外都是靜態型別)，
之後從 Simula 的物件導向概念延生出的 Smalltalk 和 Lisp 一樣全面採用動態型別，
1980 年代前半，受到 Simula 影響而誕生了 C++，重要概念 : &amp;quot;subclass 可以視為 base class 的 instance&amp;quot;&lt;/p&gt;
&lt;p&gt;Duck Typing 的概念是: &amp;quot;走路像鴨子，看起來像鴨子，那就可以把他當成鴨子&amp;quot;&lt;/p&gt;
&lt;p&gt;Dynamic Type 裡避免名去檢查型別，而改以檢查是否有某 method&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>血月之 Stellarium</title><link href="/posts/2014/10/stellarium/" rel="alternate"></link><updated>2014-10-10T19:13:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/stellarium/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stellarium.org/"&gt;Stellarium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;月全蝕的時候從朋友那知道的 Open Source 軟體，
看起來蠻棒的 XD&lt;/p&gt;
</summary><category term=""></category></entry><entry><title>心理學概論 之 Chomsky</title><link href="/posts/2014/10/psychology-intro-chomsky/" rel="alternate"></link><updated>2014-10-10T18:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/psychology-intro-chomsky/</id><summary type="html">&lt;p&gt;這禮拜二在上心理學概論的時候，上到打瞌睡 zzz，
都是因為整天都有課 (晚上也有)，前面又上完體育課很累 ...&lt;/p&gt;
&lt;p&gt;就在半睡半醒中，突然聽到了 Chomsky !&lt;/p&gt;
&lt;p&gt;頓時精神力上升，腦中馬上浮現 Chomsky Normal Form，
馬上抬頭看一下 slide，上面寫著 Noam Chomsky，
立馬 Google ...&lt;/p&gt;
&lt;p&gt;果然是同個人啊 ...&lt;/p&gt;
&lt;p&gt;在上心理學的時候可以想到正規也是個奇妙的狀況 Orz&lt;/p&gt;
</summary><category term="psychology"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 1</title><link href="/posts/2014/10/pythoner-read-ruby-book-1/" rel="alternate"></link><updated>2014-10-10T16:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-1/</id><summary type="html">&lt;p&gt;這邊是讀了書上內容的節錄和獨後自己查的資料&lt;/p&gt;
&lt;p&gt;目前心得 : 可以看到一些觀念，但是有些例子就 ... (尤其是少部份有提到 Python 的)&lt;/p&gt;
&lt;div class="section" id="ch-14-1-functional-programming"&gt;
&lt;h2&gt;ch 14-1 - functional programming&lt;/h2&gt;
&lt;p&gt;是的沒錯，我第一個翻的章節是 chapter 14 ...&lt;/p&gt;
&lt;p&gt;Fortran 設計者為 John Backus (John Backus 還發明了 BNF)，
其在 1997 年 Turing Award 上發表的語言 &amp;quot;FP&amp;quot; 被認為是 Functional Programming 的起點&lt;/p&gt;
&lt;p&gt;Feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Higher-order function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;pure function (no side effect)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Referential transparency&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="lisp"&gt;
&lt;h3&gt;Lisp&lt;/h3&gt;
&lt;p&gt;Lisp 的基礎是 Alonzo Church 提的 lambda calculus，也支援 Higher-order function&lt;/p&gt;
&lt;p&gt;Lisp 具有一些 functional 的特性，但不是純粹的 functional&lt;/p&gt;
&lt;p&gt;Lisp 最大的特色是 S-expression&lt;/p&gt;
&lt;p&gt;另一個特色是 list (LISP = LISt Processing)，Lisp 把節點稱為 cons cell，
cons 是從建立新 cell 的 function : cons (construct) 而來，
而一開始的 Lisp 環境把第一個資料放在 address register，第二個放在 data register，
所以 car = content of address register、cdr = content of data register，
構成 list 的資料成為 atom (symbol or number)&lt;/p&gt;
&lt;p&gt;cons cell:&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;cdr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lisp 的 list 底下結構是 singly linked-list&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="haskell"&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;p&gt;Haskell Curry 的 Combinatory logic 和 Alonzo Church 的 lambda calculus 幾乎相同的東西&lt;/p&gt;
&lt;p&gt;Haskell feature:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no side effect&lt;/li&gt;
&lt;li&gt;Higher-order function&lt;/li&gt;
&lt;li&gt;partial function application&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;type inference&lt;/li&gt;
&lt;li&gt;list comprehension&lt;/li&gt;
&lt;li&gt;block by indent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell 有靜態多型的型別系統和 type inference，可以在接近 duck typing 的情況下，
在編譯時完成 type checking&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocaml"&gt;
&lt;h3&gt;OCaml&lt;/h3&gt;
&lt;p&gt;OCaml 歷史比 Haskell 早，誕生於法國&lt;/p&gt;
&lt;p&gt;和 Haskell 相比有些不同:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;has side effect&lt;/li&gt;
&lt;li&gt;no lazy evaluation&lt;/li&gt;
&lt;li&gt;module system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OCaml 想要 lazy evaluation 時可以明確標示&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="erlang"&gt;
&lt;h3&gt;Erlang&lt;/h3&gt;
&lt;p&gt;Erlang 是為了平行處理而設計的，設計受到 Prolog 影響&lt;/p&gt;
&lt;p&gt;dynamic type, no lazy evaluation&lt;/p&gt;
&lt;p&gt;以 actor 理論為基礎&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Block&lt;/li&gt;
&lt;li&gt;Proc object&lt;/li&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;enumerator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/"&gt;What Is the Difference Between a Block, a Proc, and a Lambda in Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="c1"&gt;# block is everything between the do and end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;lam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# The &amp;#39;&amp;amp;&amp;#39; tells ruby to turn the proc into a block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-2-code-generation"&gt;
&lt;h3&gt;ch 14-2 Code Generation&lt;/h3&gt;
&lt;p&gt;nothing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-3-memory-management"&gt;
&lt;h3&gt;ch 14-3 Memory Management&lt;/h3&gt;
&lt;p&gt;因為一些概念之前有看過了，所以這邊算是複習和加強 XD&lt;/p&gt;
&lt;p&gt;Garbage Collection 的誕生是在 1960 年代，
起因於 Lisp 需要產生大量 cons cell object，不能明確管理各個 object&lt;/p&gt;
&lt;p&gt;GC 衡量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;GC 所佔的時間比例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Pause Time&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;平均 pause time&lt;/li&gt;
&lt;li&gt;最長的 pause time&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="no-gc"&gt;
&lt;h4&gt;no GC&lt;/h4&gt;
&lt;p&gt;例如 C 或 C++，programmer 自己管理 memory，自己 malloc/free、new/delete&lt;/p&gt;
&lt;p&gt;programmer 沒把程式寫好會造成:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;dangling pointer (因為把還在用的 free 掉了)&lt;/li&gt;
&lt;li&gt;memory leak (該 free 的沒 free 到)&lt;/li&gt;
&lt;li&gt;double free&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要檢查這些問題可以使用 valgrind&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gc-algorithm"&gt;
&lt;h4&gt;GC algorithm&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="50%" /&gt;
&lt;col width="31%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Problem&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;reference counting&lt;/td&gt;
&lt;td&gt;用一數字紀錄被 reference 的次數，最容易實作&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;cycle reference&lt;/li&gt;
&lt;li&gt;不適合平行處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; sweep&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，沒標到的清掉&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;objects 量上升時，速度容易下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; compact&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，
接著把標過的集合起來，
如此一來 memory 操作就有了區域性，
讓快取之類的機制效率提高&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;比 mark &amp;amp; sweep 慢&lt;/li&gt;
&lt;li&gt;不能使用保守 GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;copying&lt;/td&gt;
&lt;td&gt;把還在用的複製一份到新的 memory 區域 (會分成新和舊)，
接著把舊區域整個清掉&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Generational&lt;/td&gt;
&lt;td&gt;多數 objects 會在短時間內變成 garbage，所以可以用 age 做不同處理，
會分成 minor GC 和 major GC，
有 write barrier (紀錄 old object 裡用到 young object 的狀況，這紀錄稱為 remembered set)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Conservative&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;在 C 這種本來沒有 GC 的語言，compile 後就沒有區分 integer 和 pointer 的資訊，
因為 CPU 不需要，這時可以使用 Conservative 實作，概念是 &amp;quot;碰到 address 相同時，
代表可能被引用，視為存活&amp;quot;&lt;/p&gt;
&lt;p class="last"&gt;(heap 會整個被掃過)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Incremental&lt;/td&gt;
&lt;td&gt;把 GC 操作切割，以降低每次 GC 的最長時間，也用了 write barrier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Concurrent&lt;/td&gt;
&lt;td&gt;機制和 Incremental GC 類似，利用 write barrier 維持狀態資訊，實作時也可能有專用的 GC thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bitmap Marking&lt;/td&gt;
&lt;td&gt;Linux 這類 Unix-like 在 fork 時 memory addres 是 copy-on-write 的，
可以避免不必要的 page copy，但是和 GC 的搭配不太好，GC 在改動時就會大量複製，
Bitmap Marking 就是用來降低複製 page 的次數，不時直接對 object 做標記，
而是有另外的空間用於標記，所以複製的只有標記用的 Bitmap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-4-ruby-with-c"&gt;
&lt;h2&gt;ch 14-4 Ruby with C&lt;/h2&gt;
&lt;p&gt;介紹 Ruby 如何和 C 一起用&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-5-open-source"&gt;
&lt;h2&gt;ch 14-5 Open Source&lt;/h2&gt;
&lt;p&gt;Open Source 發展簡史&lt;/p&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>People who make VMs</title><link href="/posts/2014/09/vm-people/" rel="alternate"></link><updated>2014-09-28T13:25:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-28:posts/2014/09/vm-people/</id><summary type="html">&lt;p&gt;剛剛碰巧看到一個 &lt;a class="reference external" href="http://stackoverflow.com/questions/5168718/what-blocks-ruby-python-to-get-javascript-v8-speed/5172833#5172833"&gt;StackOverflow 上的回應&lt;/a&gt; ，
原來 V8 的 team 和 HotSpot JVM 的有很大重複，還有其他像是 Self VM、Animorphic Smalltalk VM、OOVM 都是，
而其中的 tech lead 叫 Lars Bak。&lt;/p&gt;
&lt;p&gt;Lars Bak 是 Dart 語言的創始人 (Dart 語言是 Google 想用來取代 Javascript 的一個語言) 也是 V8 和 Java HostSpot JVM 的領導，對於 VM 的技術有非常多的經驗，住在丹麥的 Aarhus 的農舍。&lt;/p&gt;
&lt;p&gt;剛好有找到一篇報導，請見下面連結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.ft.com/cms/s/0/03775904-177c-11de-8c9d-0000779fd2ac.html"&gt;The genius behind Google's browser&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hksilicon.com/kb/articles/6993/Lars-BakGoogle-Chrome"&gt;對岸翻譯版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="vm"></category></entry><entry><title>Incremental Garbage Collector</title><link href="/posts/2014/09/incremental-gc/" rel="alternate"></link><updated>2014-09-26T21:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/incremental-gc/</id><summary type="html">&lt;div class="section" id="pause-time"&gt;
&lt;h2&gt;前情提要 - Pause Time&lt;/h2&gt;
&lt;p&gt;在 CPython 中使用的是 reference count，所以當 count 變成 0 時就必須把空間回收，
當一個巨大的 object 要被回收時，就會產生不小的 pause time，但是這個時間是 deterministic 的。
reference count 有個問題就是 reference cycle，為了找出 cycle 就必須爬過所有 objects，
但是這就會產生 nondeterministic GC pause。&lt;/p&gt;
&lt;p&gt;reference count 是把回收的 cost 分開在各個時間點，而 tracing 的 GC 是把回收的 cost 集中在某一段時期，
回收所需時間可能不低，在這之中得把程式 pause，可能會讓使用者感覺到停頓，
而 Incremental GC 想做的就是把這段過程拆分成好幾個小步驟，
分別在不同時間執行 (打散)，讓程式執行更平順。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tech.mozilla.com.tw/posts/1605/你丟我撿！神奇的-firefox-內部記憶體回收機制"&gt;你丟我撿！神奇的 Firefox 內部記憶體回收機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/dmandelin/2012/07/20/incremental-gc-now-in-firefox-aurora/"&gt;Incremental GC now in Firefox Aurora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/javascript/2012/08/28/incremental-gc-in-firefox-16/"&gt;Incremental GC in Firefox 16!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2013/10/incremental-garbage-collector-in-pypy.html"&gt;Incremental Garbage Collector in PyPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="gc"></category></entry><entry><title>Generational Garbage Collection for SpiderMonkey</title><link href="/posts/2014/09/ggc-spidermonkey/" rel="alternate"></link><updated>2014-09-26T12:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/ggc-spidermonkey/</id><summary type="html">&lt;p&gt;原文章 : &lt;a class="reference external" href="https://hacks.mozilla.org/2014/09/generational-garbage-collection-in-firefox/"&gt;Generational Garbage Collection in Firefox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天看到上面那篇 SpiderMonkey 的 Generational Garbage Collection 的文章，
就讀一讀理解一下並做些紀錄&lt;/p&gt;
&lt;div class="section" id="generational-garbage-collection"&gt;
&lt;h2&gt;Generational garbage collection&lt;/h2&gt;
&lt;p&gt;Generational garbage collection 的核心觀念就是 &amp;quot;大多數的物件的生命都很短&amp;quot;，
所以就修改原本的 GC 設計，依照不同的存在時間有不同的處理方式，
對於 Tracing 的 GC 會需要去掃過物件來檢查是否有物件已經成為 Garbage，
當程式會製造出大量的物件時，檢查的時間就會上升，這時如果用已經存在的時間來區分，
而做不同的處理方式時，多數的短期物件就可以更快的被回收，也不必頻繁檢查會長期存在的物件。&lt;/p&gt;
&lt;p&gt;原文章裡的 SpiderMonkey 利用了這種方式來讓 temporary objects 的 penalty 下降&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nursery-tenured"&gt;
&lt;h2&gt;Nursery &amp;amp; Tenured&lt;/h2&gt;
&lt;p&gt;多數的 objects 都會 allocate 到一個叫做 Nursery 的 memory region，
當 Nursery 滿的時候，只檢查 Nursery 裡的 objects，此時多數的 short-lived temporary objects 就會被清掉，
而這樣的檢查相對於原本 (檢查全部的 objects) 也來的快&lt;/p&gt;
&lt;p&gt;此時，依然存活的 objects 就會被放到 Tenured region&lt;/p&gt;
&lt;p&gt;Tenured heap 仍然會回收 grabage，但是頻率會比 Nursery 來的低&lt;/p&gt;
&lt;p&gt;最終然會需要原整的 GC，但是頻率也會比 Nursery GC 來的低&lt;/p&gt;
&lt;p&gt;所以就分成下面這種情況&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="14%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Garbage Collection&lt;/th&gt;
&lt;th class="head"&gt;Scan Place&lt;/th&gt;
&lt;th class="head"&gt;frequency&lt;/th&gt;
&lt;th class="head"&gt;speed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;minor GCs&lt;/td&gt;
&lt;td&gt;Nursery&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;fast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;major GCs&lt;/td&gt;
&lt;td&gt;full heap&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;slow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="68%" /&gt;
&lt;col width="32%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;memory region&lt;/th&gt;
&lt;th class="head"&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Nursery&lt;/td&gt;
&lt;td&gt;young&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tenured&lt;/td&gt;
&lt;td&gt;old&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Tenured object 裡面可能有指向 Nursery object 的資料
(Nursery objects 因為某些 Tenured objects 而持續 alive)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;解法一&lt;/h3&gt;
&lt;p&gt;掃過整個 Tenured heap 來找出指到 Nursery objects 的 pointer，
但是這麼做的話就違背了 GGC 的設計本意，所以需要更 cheap 的解決方案&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;解法二&lt;/h3&gt;
&lt;p&gt;先注意到，在 heap graph 中 Tenured 指向 Nursery 的 edges 不會存在很久，
因為接下來 minor GC 就會把 Nursery 中的 survivors 移到 Tenured heap&lt;/p&gt;
&lt;p&gt;所以我們在意的是從上次 minor/major GC 後，有更動過的 Tenured objects，
而這些 objects 的數量相對來說就會比較少&lt;/p&gt;
&lt;p&gt;因此我們做的是在更動 Tenured objects 時，檢查是否有 Nursery pointers，
如果有的話就把這些 cross-generational edges 紀錄到 &lt;strong&gt;store buffer&lt;/strong&gt; ，
這樣的事情稱為 write barrier&lt;/p&gt;
&lt;p&gt;在 minor GC 時，我們就跑過一遍 store buffer 裡的資料並且把裡面的 Nursery objects 標記為存在&lt;/p&gt;
&lt;p&gt;(edge 的來源都需要被使用，因為當 Nursery objects 被標記為存在之後，將會移往 Tenured area，
所以原本的 Tenured (裡面有指向 Nursery 的 pointer) 也需要被 update&lt;/p&gt;
&lt;p&gt;minor GC 需要的執行時間決定於新 cross-generational edges 和 Nursery 裡的 objects 數量，
當然，追蹤 store buffer records 或是單純的檢查是否要新增 record 都會讓 normal heap access 有些許的效能損失，
所以某些 code 可能在 GGC 裡會變慢一些&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="gc"></category></entry><entry><title>Python coding style</title><link href="/posts/2014/09/python-coding-style/" rel="alternate"></link><updated>2014-09-13T15:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-13:posts/2014/09/python-coding-style/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;不能不提的 &lt;a class="reference external" href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://google-styleguide.googlecode.com/svn/trunk/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Python"></category></entry><entry><title>Levenshtein distance</title><link href="/posts/2014/09/levenshtein-distance/" rel="alternate"></link><updated>2014-09-10T01:16:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-10:posts/2014/09/levenshtein-distance/</id><summary type="html">&lt;p&gt;第一次碰這類的東西，做些筆記 XD&lt;/p&gt;
&lt;div class="section" id="edit-distance"&gt;
&lt;h2&gt;edit distance&lt;/h2&gt;
&lt;p&gt;edit distance = 更動多少次數後，兩字串會一樣&lt;/p&gt;
&lt;p&gt;計算方式有很多種&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="34%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;insertion&lt;/th&gt;
&lt;th class="head"&gt;deletion&lt;/th&gt;
&lt;th class="head"&gt;substitution&lt;/th&gt;
&lt;th class="head"&gt;transposition (換位)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Hamming distance&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Longest Common Subsequence&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Levenshtein distance&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Damerau-Levenshtein distance&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="levenshtein-distance"&gt;
&lt;h2&gt;Levenshtein distance&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Levenshtein_distance"&gt;http://en.wikipedia.org/wiki/Levenshtein_distance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance"&gt;http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Levenshtein distance 是用來評估兩 sequence 差別度的一種 string metric，
兩個字串的 Levenshtein distance 就是一個字串變成另一個字串的最小字元編輯次數 (insert, delete, substitute)，
由俄國科學家 Vladimir Levenshtein 在 1965 年提出&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;substitution : s &lt;strong&gt;a&lt;/strong&gt; t -&amp;gt; s &lt;strong&gt;i&lt;/strong&gt; t&lt;/li&gt;
&lt;li&gt;insertion : st -&amp;gt; s &lt;strong&gt;i&lt;/strong&gt; t&lt;/li&gt;
&lt;li&gt;deletion : si &lt;strong&gt;a&lt;/strong&gt; t -&amp;gt; sit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看一段簡單的 Python code 來了解運算:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
               &lt;span class="n"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;傳入 min function 的有 3 個，
第一個是兩邊都減一個字元，如果減去字元不一樣就把次數加 1 (substitute)，
第二個是 a 減去一個字元並且次數加一，這可以看成 a 字串的 delete 或是在 b 前面 insert 了和 a match 的字元，
第三個跟第二個雷同&lt;/p&gt;
&lt;p&gt;當然，這個寫法很沒有效率，做了很多次不必要的遞迴，用 CPython (Python 3.4) 下去跑測試，
丟個簡單的字串當測試 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lev('fasfasf',&lt;/span&gt; 'afvq')&lt;/tt&gt; 這個做法大約要 1.9 ms&lt;/p&gt;
&lt;p&gt;簡單地用 lru cache 來做 DP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@lru_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                   &lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用 lru cache 來簡單地做 DP 後，剛剛的測試現在大約變成 370 µs&lt;/p&gt;
&lt;p&gt;當然，還有很多改進空間，像是&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;自己實際寫 DP&lt;/li&gt;
&lt;li&gt;判斷字串相同就直接回傳 0 (對於有很多相同子字串的情況可以用字串比對的 cost 換掉一些遞迴)&lt;/li&gt;
&lt;li&gt;減去頭尾相同的子字串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要速度的話: &lt;a class="reference external" href="https://github.com/ztane/python-Levenshtein"&gt;python-Levenshtein&lt;/a&gt;
，C 寫的 Python extension，剛剛的測試丟下去大概會變成 300 ns 以內&lt;/p&gt;
&lt;p&gt;計算的 cost 大約會是 O(len(a) * len(b))，所以在幫助 fuzzy string searching 的時候，
比較的字串同常會比較小，以便於提升速度&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;其他性質&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;lower bound : 兩字串的長度差&lt;/li&gt;
&lt;li&gt;upper bound : 較長的字串的長度&lt;/li&gt;
&lt;li&gt;只有當字串相等時會是 0&lt;/li&gt;
&lt;li&gt;當字串長度相同時，Hamming distance 會是 Levenshtein distance 的 upper bound&lt;/li&gt;
&lt;li&gt;[三角不等式] 兩個字串的 Levenshtein distance 不會大於分別和第三個字串的 Levenshtein distance 的合&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;使用情境&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;spell checkers&lt;/li&gt;
&lt;li&gt;OCR&lt;/li&gt;
&lt;li&gt;assist natural language translation based on translation memory&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Record_linkage"&gt;http://en.wikipedia.org/wiki/Record_linkage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="Fuzzy"></category></entry><entry><title>About Stackless Python</title><link href="/posts/2014/02/stackless-python/" rel="alternate"></link><updated>2014-02-24T19:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-24:posts/2014/02/stackless-python/</id><summary type="html">&lt;p&gt;Stackless Python 背後的由來以及現況 ~&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/588958/what-are-the-drawbacks-of-stackless-python/590412#590412"&gt;聽故事去&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>Chart.js 簡單的畫出 Chart</title><link href="/posts/2014/02/chart-js/" rel="alternate"></link><updated>2014-02-22T14:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-22:posts/2014/02/chart-js/</id><summary type="html">&lt;script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"&gt;&lt;/script&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; 是利用 HTML5 的 canvas 去畫的，
而 Chart.js 這個 library 本身是 open source 的 (MIT license) (&lt;a class="reference external" href="https://github.com/nnnick/Chart.js"&gt;Chart.js - github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;所以到底要怎麼用呢？&lt;/p&gt;
&lt;p&gt;其實要用這個 library 很簡單，
首先要先把 Chart.js (或 Chart.min.js) include 進來 (這邊先用 CDN 上的做範例，要擺到自己機器上的再去修改 src)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再來是要有畫布啦 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著是給資料然後畫圖 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#F38630&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#E0E4CC&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#69D2E7&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//Get the context of the canvas element we want to select&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myNewChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;canvas id="myChart" width="400" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
    var data = [
        {
            value: 30,
            color:"#F38630"
        },
        {
            value : 50,
            color : "#E0E4CC"
        },
        {
            value : 100,
            color : "#69D2E7"
        }
    ];
    var ctx = document.getElementById("myChart").getContext("2d");
    var myNewChart = new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;p&gt;Chart.js 目前有六種 Charts，
可以在 &lt;a class="reference external" href="http://www.chartjs.org/docs/"&gt;官方文件&lt;/a&gt; 看到相關的設定、資料格式，
每個 Chart 除了本身的資料外，還有一些 option 可以調整，
例如要不要 animation 啦、要不要顯示 label 啦 ... etc&lt;/p&gt;
&lt;div class="section" id="chart"&gt;
&lt;h2&gt;六種 Chart&lt;/h2&gt;
&lt;div class="section" id="line-chart"&gt;
&lt;h3&gt;Line Chart&lt;/h3&gt;
&lt;canvas id="LineChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("LineChart").getContext("2d");
new Chart(ctx).Line(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="bar-chart"&gt;
&lt;h3&gt;Bar Chart&lt;/h3&gt;
&lt;canvas id="BarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("BarChart").getContext("2d");
new Chart(ctx).Bar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="radar-chart"&gt;
&lt;h3&gt;Radar chart&lt;/h3&gt;
&lt;canvas id="RadarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["Eating","Drinking","Sleeping","Designing","Coding","Partying","Running"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("RadarChart").getContext("2d");
new Chart(ctx).Radar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="polar-area-chart"&gt;
&lt;h3&gt;Polar area chart&lt;/h3&gt;
&lt;canvas id="PolarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value : 30,
        color: "#D97041"
    },
    {
        value : 90,
        color: "#C7604C"
    },
    {
        value : 24,
        color: "#21323D"
    },
    {
        value : 58,
        color: "#9D9B7F"
    },
    {
        value : 82,
        color: "#7D4F6D"
    },
    {
        value : 8,
        color: "#584A5E"
    }
];
var ctx = document.getElementById("PolarChart").getContext("2d");
new Chart(ctx).PolarArea(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="pie-chart"&gt;
&lt;h3&gt;Pie chart&lt;/h3&gt;
&lt;canvas id="PieChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F38630"
    },
    {
        value : 50,
        color : "#E0E4CC"
    },
    {
        value : 100,
        color : "#69D2E7"
    }
];
var ctx = document.getElementById("PieChart").getContext("2d");
new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="doughnut-chart"&gt;
&lt;h3&gt;Doughnut chart&lt;/h3&gt;
&lt;canvas id="DoughnutChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F7464A"
    },
    {
        value : 50,
        color : "#E2EAE9"
    },
    {
        value : 100,
        color : "#D4CCC5"
    },
    {
        value : 40,
        color : "#949FB1"
    },
    {
        value : 120,
        color : "#4D5360"
    }

];
var ctx = document.getElementById("DoughnutChart").getContext("2d");
new Chart(ctx).Doughnut(data);
&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Javascript"></category></entry><entry><title>自製 template tags 和 filters</title><link href="/posts/2014/02/django-templatetags/" rel="alternate"></link><updated>2014-02-20T00:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-20:posts/2014/02/django-templatetags/</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起手式&lt;/h2&gt;
&lt;p&gt;要建立自己的 template tags 之前，要先在一個 app 資料架底下建立 &amp;quot;templatetags&amp;quot; 資料夾，
如果這些 tags 是跟 app A 有關的話，那很理所當然可以放在 app A 資料夾下的 &amp;quot;templatetags&amp;quot;，
如果是比較不能區分的話，可以建立一個 app 專門放 template tags。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意要有 __init__.py 來讓 Python 把這個資料夾當作 package&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自製的 tags 和 filter 就放在 templatetags 資料夾底下的檔案，
檔案名字就是在 template 要 load 時的名字&lt;/p&gt;
&lt;p&gt;結構可能長這樣:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;App/&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;__init__.py&lt;/div&gt;
&lt;div class="line"&gt;models.py&lt;/div&gt;
&lt;div class="line"&gt;templatetags/&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;__init__.py&lt;/div&gt;
&lt;div class="line"&gt;abc.py&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;view.py&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在 template 裡要用到 abc.py 這個檔案裡寫的 tags、filter 時，
就在 template 裡 &amp;quot;{% load abc %}&amp;quot;&lt;/p&gt;
&lt;p&gt;有包含 custom tags 的 app 要加到 &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt; 裡 &lt;strong&gt;{% load %}&lt;/strong&gt; 才會 work。&lt;/p&gt;
&lt;p&gt;(security feature: 你可以在一台機器上裝多個 template libraries 而不讓它們可以 access 機器上的每個 Django 的程式)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;鍛冶&lt;/h2&gt;
&lt;p&gt;要能製造出一個 valid 的 tag library 首先要有一個叫作 &lt;strong&gt;register&lt;/strong&gt; 的 &lt;strong&gt;template.Library&lt;/strong&gt; instance&lt;/p&gt;
&lt;p&gt;所以開頭會長這樣 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="filters"&gt;
&lt;h3&gt;filters&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="tags"&gt;
&lt;h3&gt;tags&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"&gt;Custom template tags and filters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Django default tags &amp;amp; filters&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;django/template/defaultfilters.py&lt;/li&gt;
&lt;li&gt;django/template/defaulttags.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Django"></category></entry><entry><title>[回憶] 2012 年夏 ~ 2014 年春</title><link href="/posts/2014/02/recall-2012-summer-2014-spring/" rel="alternate"></link><updated>2014-02-18T21:00:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-18:posts/2014/02/recall-2012-summer-2014-spring/</id><summary type="html">&lt;p&gt;一年半內除了學校的課程能學到些什麼？&lt;/p&gt;
&lt;p&gt;不多也不少，這樣而已&lt;/p&gt;
&lt;p&gt;(想到什麼就紀錄些什麼吧)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起頭&lt;/h2&gt;
&lt;p&gt;2012 年夏，正值升大學的時期，雖然進了資工系，但其實什麼都還不會，
暑假期間開始常上 BBS，後來看到上面的色碼還有其他的控制碼覺得很有趣，
接著就開始在上面試了一下，然後又看到某人在上面搞出一堆神奇的東西 (?)，
再來是開到上面的 vim mode (當時還不會用 vim)，
這算是初步接觸到 vim 的地方之一吧 XD (另外是鳥哥寫的文章)。&lt;/p&gt;
&lt;p&gt;之後拿到了社團 server 上的帳號，開始連進去亂試指令 w，
從此掉進無底的坑洞 (X，這時間大概有時候會翻翻鳥哥吧，
到了學校後開始接觸 FreeBSD，
就裝來玩玩看，翻翻 FreeBSD handbook，開始認識 configure、make、ports ... etc，
當時在 FreeBSD 上用的是 tcsh (因為社團 server 預設是 tcsh，所以先接觸到 XD)，
因為一些原因開始看怎麼寫 shell script (Bourne Shell 的)，
慢慢知道有 sed、awk 這些東西，
開始使用 regular expression (已經想不起來從哪個時間點開始了)。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;寫到這裡開始回去翻以前寫在 BBS 的文章回想 XD&lt;/p&gt;
&lt;p&gt;阿對一開始還去玩了 pi 的貪吃蛇 ~&lt;/p&gt;
&lt;p&gt;哦哦哦！BBS 上看到的有石頭文、guest 發文、... (?)&lt;/p&gt;
&lt;p&gt;原來暑假就有翻過 regular expression，只是沒有碰到要使用的地方就不熟 XD，
後來有在用就比較 OK 了 ~&lt;/p&gt;
&lt;p&gt;喔對，BBS 有聊天指令 XD&lt;/p&gt;
&lt;p&gt;看到移位碼就想起之前試一試發現，
原本應該擋掉的名片檔移位碼在我亂試的情況下發現有 bug XDDDD，
後來被 PO 到 sysop，之後又修掉了。&lt;/p&gt;
&lt;p&gt;原來當初 9 月開始就有去過 PyHUG，但是當時完全不會 Python zzz&lt;/p&gt;
&lt;p&gt;找到了 ~ &lt;strong&gt;2012/10/17 拋棄 Windows，轉用 Linux&lt;/strong&gt; ，
當時裝了 Ubuntu，DE 預設是 Unity，用沒多久後換成 Gnome 2，大概就這樣用了一學期。
寒假換成 LXDE 又用了一學期，中間好像有試過 Gnome 3 一陣子吧，
一下學期末把 WM 換成了 awesome wm，然後就離不開 awesome 一直到現在，
一下結束的暑假把 Ubuntu 換成了 Arch Linux ，變成 Arch Linux + awesome。&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;說到 Vim 啊 ...&lt;/p&gt;
&lt;p&gt;一開始其實看到很多次，但是都沒有真的把它拿來用，所以不熟 zzz。
後來毅然決然把所有編輯純文字的東西都只用 vim ，一陣子後就習慣整個操作，
不過當時對 hjkl 的移動還不是很熟，索性在 .vimrc 裡把方向鍵 map 掉，
只用 hjkl 移動，後來也就習慣了。&lt;/p&gt;
&lt;p&gt;一上結束的寒假稍微看了一下 .vimrc 的設定，調了一些東西和試了一些 plugin (雖然最後大多把 plugin 關了 XD)，
做的設定中幾個最常用到的是 paste mode 切換的快捷鍵、儲存時自動移除行尾多餘空白、下次開啟時回到關閉前的位置 ... etc。&lt;/p&gt;
&lt;p&gt;plugin 部份的話用 Vundle 管理很方便，在加上一小段 script 後，
到新的地方只要打開 vim 就會自動裝好 vundle，
接著就可以利用 vundle 很快的把你的 plugin 裝起來，
利用 vundle 後 update plugin 也一樣只需要一個 command。&lt;/p&gt;
&lt;p&gt;現在只要是純文字的東西我都用 vim，可以說是離不開了 XD，就連這篇文章也是我用 vim 打出來的 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;到底是從什麼時候開始比較常寫 Python 的我又忘了 (X&lt;/p&gt;
&lt;p&gt;剛開始因為別人介紹，陸陸續續有看一點 Python 的東西，社課後知道了 list、tuple，
不過這時還是沒有在使用它，後來假期有人約讀書會所以看了 Python tutorial 的前部份。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假 (不知道是不是這個時期開始)，因為在跟高中同學打 game，
那遊戲在有人踩到紀錄點時會存資料在 host user，
而在某次遊戲中有人不小心在很糟糕的時間點踩到了，
結果只能回溯到那悲慘的時間點，
後來我就想說寫個程式讓他去 check 有新紀錄時就 backup 一次，
就開始用 Python 寫個小程式去 check，
東查西查，開始對 Python 變比較熟一點，
後來為了能一次 check 多個檔案又嘗試了 Python 的 multiprocessing，
而另一個同學則是去寫了簡單的 GUI，
在看了他的 code 並幫忙修改後，稍微對 Python 的 class 有點感覺了，
然後這也是我第一次使用內建的 tkinter 做簡單的 GUI。&lt;/p&gt;
&lt;p&gt;之後開始愈來愈常寫 Python，慢慢的學會愈來愈多東西 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;筆記&lt;/h2&gt;
&lt;p&gt;做筆記的方式嘛 ...&lt;/p&gt;
&lt;p&gt;高中用過 Evernote 記了一點東西(不多)，
後來大一有陣子是 Google Docs + Markdown (本機)。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假聽到 Sphinx 這玩意，
看起來還不錯，也看到別人寫出來的東西，
所以就開始變成寫 reStructuredText 、用 Sphinx generate HTML，
不過 Markdown 也還是有再用 (這篇就是用 Markdown 寫的)，
所以目前是 Markdown &amp;amp; reStructuredText 亂用中 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h2&gt;Version Control&lt;/h2&gt;
&lt;p&gt;我現在常用的 Version Control 是 git，
一開始也是不熟 (看了看還是沒常用)，後來把一些東西用 git 上去後，
變成只熟 add &amp;amp; commit (X，後來碰到一些狀況而對 checkout、push、partial add、cherry-pick、stash 比較熟一點，
目前是基本操作還 OK 啦 (自己說&lt;/p&gt;
&lt;p&gt;mercurial ...，目前無緣 XD，只在別人教的時候試過一次，不過因為已經慣用 git 了，所以 ... XD&lt;/p&gt;
&lt;p&gt;cvs 只在抓 FreeBSD kernel source 的時候用過 zzz&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;一個無底洞 (X&lt;/p&gt;
&lt;p&gt;我掉進去後就再也出不來了 XD&lt;/p&gt;
&lt;p&gt;因為已經太融入生活了，不知道該說什麼 ~&lt;/p&gt;
&lt;p&gt;現在用 Arch Linux 用的很開心  O w O&lt;/p&gt;
&lt;p&gt;改天想到再補東西吧 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="freebsd"&gt;
&lt;h2&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;FreeBSD 的部份算是配合修課做了點基本的學習，
內容大概有 FTP、Samba、ZFS、FAMP (FreeBSD + Apache + MySQL + PHP)、
NFS、amd (Berkeley Automounter)、NIS、PF、NAT、DHCP、SSL/TLS、Proxy、DNS、Postfix ...&lt;/p&gt;
&lt;p&gt;這些算是有基本的接觸過了 (有架出東西)，最不熟的大概是最後的 Mail Server 部份吧 zzz，
東西弄起來有點麻煩，最後交作業的時候 ClamAV 偵測病毒信件的部份沒弄好 = =。&lt;/p&gt;
&lt;p&gt;以前課程有 VPN，修課的時候剛好沒有，想之後找時間架來玩玩。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-css-javascript"&gt;
&lt;h2&gt;HTML, CSS, Javascript&lt;/h2&gt;
&lt;p&gt;這邊要從一下結束的暑假開始，
社團決定大家要一起用 Django 寫社團網站，
這時候就開始摸索 Django 和認識基本的 HTML，
不過 CSS 部份是由另一位負責，所以沒接觸。&lt;/p&gt;
&lt;p&gt;後來進 OH 去用 Django 改寫目前的網站，
OH 原本的網站是套 Bootstrap 2，我在做新網站的時候改用了 Bootstrap 3，
接著就因為 Bootstrap 3 改了很多地方，所以要到處去修 Orz，
中間調樣式的時候開始認識一些 CSS 的東西，
某些地方因為用到 Javascript 所以也開始有了點接觸。&lt;/p&gt;
&lt;p&gt;2014 2月，開始想用 GitHub Pages 來寫 blog，
於是開始使用 Pelican 這個 Python 寫的 static site generator，
因為可以用 Markdown 和 reStructuredText 所以可以很開心的用 vim 寫文章 ~~~&lt;/p&gt;
&lt;p&gt;在使用 Pelican 寫 blog 後，想說順便來試著自己寫個 theme 來看看，
所以就開始寫更多的 CSS，中間在調某些功能的時候用到了 Javascript，
所以也寫了一小段的 Javascript code。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h2&gt;Database&lt;/h2&gt;
&lt;p&gt;Database 的話只會一點點簡單的 SQL 語法，
大多是寫東西需要去查的，用一用就知道了幾個，
只用過 SQLite、MySQL、MariaDB，不過都不熟就是了 XD，
因為碰到的東西重點都不是在調 Database，
很多都只是接上去而已。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c"&gt;
&lt;h2&gt;C&lt;/h2&gt;
&lt;p&gt;說實話，C 其實只會些基本的東西，沒有很熟 XD&lt;/p&gt;
&lt;p&gt;現在只想到好幾個月前在 Wikipedia 的 Multiple dispatch 頁面看到的 C code 感覺還蠻有趣的 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;C++&lt;/h2&gt;
&lt;p&gt;一下的 OOP 課開始頻繁接觸 C++，
因為老師的課程安排，所以學了一些 C++11 的東西，
老師在 constructor 那部份講了好一陣子，
後來作業的關係寫了自己的 vector 和 list Orz，
還記得那時候在講 new，new operator、operator new、placement new ...&lt;/p&gt;
&lt;p&gt;某次作業好像用到了 C++11 加進來的 lambda expression。&lt;/p&gt;
&lt;p&gt;其實老師的講義寫了很多東西，只是我還沒能好好吸收起來 ...，
只好一定要好好補起來 = =&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;曾經在某陣子因為寫 C++ 作業的關係看了些 Makefile 的東西，
也寫了些簡單的 Makefile ...，不過現在差不多忘了 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="awk"&gt;
&lt;h2&gt;awk&lt;/h2&gt;
&lt;p&gt;awk 好像寫過那麼一下 ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sed"&gt;
&lt;h2&gt;sed&lt;/h2&gt;
&lt;p&gt;sed 好像在某次作業用過，還有自己寫的 shell script 裡用過，
不過基本上 ... 不熟 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-script-bourne-shell"&gt;
&lt;h2&gt;shell script (Bourne Shell)&lt;/h2&gt;
&lt;p&gt;shell script 少數時候會因需求寫一點，
不過都是寫純 Bourne Shell 的 (X，
Bash 的只有在 .bashrc 裡寫過 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lua"&gt;
&lt;h2&gt;lua&lt;/h2&gt;
&lt;p&gt;接觸到 lua 是因為轉用 awesome wm 的關係 XD，
awesome wm 的設定檔是用 lua 寫的，
所以改的時候會看到一些 lua 語法 ~，
前陣子在看 coroutine 的時候又看到用 lua 去說明的文章，
不過說那麼多其實還是沒在寫 lua XD (根本沒好好學過)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="perl"&gt;
&lt;h2&gt;Perl&lt;/h2&gt;
&lt;p&gt;Perl 只有在寫作業 (irc bot、大量寄信程式、登入時間統計) 的時候用過，
寫完之後就沒用過了 (X，現在可以說是完全不會了 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;有想要接觸 Functional 的東西耶&lt;/p&gt;
&lt;p&gt;之後想找時間學 Haskell ~ (曾經在某天翻過，連基本的都差不多忘光了 XD&lt;/p&gt;
&lt;p&gt;最近寫 Python 開始慢慢使用 lambda、filter、map、reduce (X&lt;/p&gt;
&lt;/div&gt;
</summary><category term="recall"></category></entry><entry><title>XMLHttpRequest</title><link href="/posts/2014/02/XMLHttpRequest/" rel="alternate"></link><updated>2014-02-11T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-11:posts/2014/02/XMLHttpRequest/</id><summary type="html">&lt;p&gt;有了 XMLHttpRequest 就讓我們可以利用 Javascript 去做 request&lt;/p&gt;
&lt;p&gt;以下直接用一段 Javascript 去說明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是建立 XMLHttpRequest 物件，再來撰寫 readyState 改變時所要做的動作 ( &lt;strong&gt;onreadystatechange&lt;/strong&gt; )，
open method 去指定要做的 request，再來呼叫 send method 送出&lt;/p&gt;
&lt;div class="section" id="xmlhttprequest"&gt;
&lt;h2&gt;在收到回應後，XMLHttpRequest 物件會設定的一些屬性&lt;/h2&gt;
&lt;div class="section" id="readystate"&gt;
&lt;h3&gt;readyState&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;0 (UNSENT)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The object has been constructed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;1 (OPENED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The open() method has been successfully invoked. During this state request headers can be set using setRequestHeader() and the request can be made using the send() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;2 (HEADERS_RECEIVED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All redirects (if any) have been followed and all HTTP headers of the final response have been received. Several response members of the object are now available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;3 (LOADING)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The response entity body is being received.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;4 (DONE)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此才在 onreadystatechange 裡做了 readyState 判斷，
on readyState change 顧名思義就是 readyState 有變動時會去 call 這個 method，
所以加上 readyState 的判斷後變成只有處理完後 &amp;quot;readyState 是 4 &amp;quot; 時才做動作&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status"&gt;
&lt;h3&gt;Status&lt;/h3&gt;
&lt;p&gt;就是 HTTP 的 Status Code&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsetext"&gt;
&lt;h3&gt;responseText&lt;/h3&gt;
&lt;p&gt;收到的內容&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsexml"&gt;
&lt;h3&gt;responseXML&lt;/h3&gt;
&lt;p&gt;收到的內容 (XML 格式)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/XMLHttpRequest"&gt;XMLHttpRequest - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;Ajax (programming)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="XMLHttpRequest"></category><category term="ajax"></category></entry><entry><title>closure 概念</title><link href="/posts/2014/02/closure/" rel="alternate"></link><updated>2014-02-07T21:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-07:posts/2014/02/closure/</id><summary type="html">&lt;p&gt;Closure 擁有非區域變數且非參數的變數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個例子可以看到 x 是個 func 的區域變數，但是在 f 當中又用到 x，
對於 f 來說 x 既不是區域變數又不是參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python 3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 12&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;Closure (computer programming) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109906-javascript-closure"&gt;[JavaScript] Closure 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109890-closure-javascript-closure-private"&gt;[Closure] JavaScript使用 Closure模擬出 Private Member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://openhome.cc/Gossip/JavaScript/Closure.html"&gt;JavaScript Essence: Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="closure"></category><category term="program"></category></entry><entry><title>coroutine 概念</title><link href="/posts/2014/02/coroutine/" rel="alternate"></link><updated>2014-02-06T21:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/coroutine/</id><summary type="html">&lt;p&gt;直接往下到 Reference 看別人寫的文章比較好 (X&lt;/p&gt;
&lt;p&gt;coroutine 是由 Melvin Conway 在 1960 年代所提出來&lt;/p&gt;
&lt;div class="section" id="coroutine"&gt;
&lt;h2&gt;Coroutine 基本概念&lt;/h2&gt;
&lt;p&gt;Coroutine 可以視為 &lt;strong&gt;可以中斷及繼續執行的 function call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在程式語言中，通常這種中斷會用 &lt;strong&gt;yield&lt;/strong&gt; 來表示，中斷時程式狀態會被保留，下次就恢復到該狀態繼續執行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generator"&gt;
&lt;h2&gt;Generator&lt;/h2&gt;
&lt;p&gt;generator 又稱為 semicoroutine&lt;/p&gt;
&lt;p&gt;雖然 generator 一樣可以中斷、繼續，但是 coroutine 可以指定從哪裡繼續執行，而 generator 不行，generator 只能回到上次中斷處&lt;/p&gt;
&lt;p&gt;但是 coroutine 可以用 generator 實作出來&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coroutines-in-python"&gt;
&lt;h2&gt;Coroutines in Python&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/"&gt;Improve Your Python: 'yield' and Generators Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio-task.html"&gt;Tasks and coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/"&gt;Coroutine: 入門篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/implement-iterators-by-coroutine/"&gt;使用 Coroutine 實作 Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine/"&gt;使用 Coroutine 改寫狀態機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine-part-2/"&gt;使用 Coroutine 改寫狀態機－續&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/001848.html"&gt;使用 coroutine 實做 user-level thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coroutine"&gt;Coroutine - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="coroutine"></category><category term="program"></category></entry><entry><title>Python - @wraps</title><link href="/posts/2014/02/python-wraps/" rel="alternate"></link><updated>2014-02-06T11:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/python-wraps/</id><summary type="html">&lt;p&gt;在這邊先假設看這篇文章的都知道 decorator&lt;/p&gt;
&lt;p&gt;在使用 decorator 時，若沒有經過處理，可能會造成 function 的 property 改變，例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   haha , this is in haha function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 func1 的 &lt;cite&gt;__name__&lt;/cite&gt; 和 &lt;cite&gt;__doc__&lt;/cite&gt; 都改變了，這通常不是我們想要的，還有可能在 debug 的時候造成麻煩&lt;/p&gt;
&lt;p&gt;因此 Python 有了 wraps 這個 decorator 去處理這個問題 (在 functools 裡)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   func1 , this is in func1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，加上了 &amp;#64;wraps 後維持了 function 本來的 property ~&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>初次使用 Pelican</title><link href="/posts/2014/02/pelican/" rel="alternate"></link><updated>2014-02-01T14:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-01:posts/2014/02/pelican/</id><summary type="html">&lt;p&gt;首先，什麼是 &lt;a class="reference external" href="http://docs.getpelican.com/en/"&gt;Pelican&lt;/a&gt; 呢？
Pelican 是個 Python 寫的靜態網站 generator，
你可以使用 Markdown, reStructuredText, AsciiDoc 等 markup language 作為撰寫的格式，
然後經由 Pelican 去生成靜態的網頁，經由這種方式，可以方便地使用你喜歡的文字編輯器去撰寫你的文章，
還可以結合 Version Control 去管理，
而由於生成的網頁是靜態的，所以可以放到 Github Pages 或者其他可以放置靜態網頁的地方去 Host，無疑是個很方便的模式。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Pelican 初步設定&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="theme"&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="disqus-support"&gt;
&lt;h2&gt;Disqus Support&lt;/h2&gt;
&lt;p&gt;Pelican 要支援 Disqus 非常簡單，首先只要在你的 Disqus 新增好你的網站，獲得你的 Disqul url 後，
只要在你的 pelicanconf.py 裡新增 DISQUS_SITENAME = 'your-disqus-url' 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;my-blog.disqus.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="Python"></category></entry></feed>