<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dv 名字很難念</title><link>/</link><description></description><atom:link href="/feeds/python.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 22 Oct 2014 13:10:00 +0800</lastBuildDate><item><title>Python virtualenv upgrade</title><link>/posts/2014/10/python-virtualenv-upgrade/</link><description>&lt;p&gt;If you want to upgrade main Python program in virtualenv,
then just run the creation command again.&lt;/p&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
virtualenv env
virtualenv env-pypy3 -p /usr/bin/pypy3
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Wed, 22 Oct 2014 13:10:00 +0800</pubDate><guid>tag:,2014-10-22:posts/2014/10/python-virtualenv-upgrade/</guid><category>Python</category></item><item><title>RPython Intro.</title><link>/posts/2014/10/RPython/</link><description>&lt;p&gt;(not complete)&lt;/p&gt;
&lt;div class="section" id="what-s-rpython"&gt;
&lt;h2&gt;What's RPython&lt;/h2&gt;
&lt;p&gt;RPython is a subset of Python&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="83%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;RPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Static (not Manifest Typing, but Type Inference)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython"&gt;http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not all code in the PyPy repository is RPython.
For example, there are code generators (e.g. in rlib.parsing) that run at compile time and produce RPython code,
but are not RPython (frequently with a &amp;quot;NOT_RPYTHON&amp;quot; docstring, by the way).
Also, large parts of the standard library are written in full Python (mostly taken straight from CPython).&lt;/p&gt;
&lt;p&gt;To make a C code generator, code on interpreter level has to restrict to a subset of Python.
(Code on application level cat still use full Python)&lt;/p&gt;
&lt;p&gt;PyPy is &lt;strong&gt;not source-to-source translations&lt;/strong&gt;, it start translation from live &lt;strong&gt;python code objects&lt;/strong&gt; .&lt;/p&gt;
&lt;div class="section" id="type-inference-static-typing"&gt;
&lt;h3&gt;Type Inference &amp;amp; Static Typing&lt;/h3&gt;
&lt;p&gt;Types are not stated explicitly, they are infered, so RPython is static typing.&lt;/p&gt;
&lt;p&gt;Static typing doesn't mean the type has to be written out (that's &lt;strong&gt;manifest typing&lt;/strong&gt;),
it means each expression has a single type that never changes.&lt;/p&gt;
&lt;div class="section" id="analysis"&gt;
&lt;h4&gt;Analysis&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We cann't infer a (non-generic) type for a function like above,
the return type depends on arguments,
so the return type is determined by analysis the arguments (when the function is called)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rpythonic"&gt;
&lt;h3&gt;RPythonic&lt;/h3&gt;
&lt;div class="section" id="flow-restrictions"&gt;
&lt;h4&gt;Flow restrictions&lt;/h4&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;variable&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;globals are considered constants (global instances don't have this restriction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control structures&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;definitions&lt;/td&gt;
&lt;td&gt;run-time definition of classes or functions is not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;generators&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;exceptions&lt;/td&gt;
&lt;td&gt;fully supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="object-restrictions"&gt;
&lt;h4&gt;Object restrictions&lt;/h4&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;int, float, bool&lt;/td&gt;
&lt;td&gt;works&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;strings&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;no variable-length tuples&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;lists&lt;/td&gt;
&lt;td&gt;annotator can figure out most of the time that your list is fixed-size,
even when you use list comprehension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dicts&lt;/td&gt;
&lt;td&gt;unique key type only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;functions&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="integer-types"&gt;
&lt;h4&gt;Integer Types&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-a-python-vm-with-rpython"&gt;
&lt;h2&gt;build a Python VM with RPython&lt;/h2&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Tue, 21 Oct 2014 08:50:00 +0800</pubDate><guid>tag:,2014-10-21:posts/2014/10/RPython/</guid><category>PyPy</category></item><item><title>Try the jitviewer</title><link>/posts/2014/10/jitviewer/</link><description>&lt;div class="section" id="the-jitviewer"&gt;
&lt;h2&gt;the jitviewer&lt;/h2&gt;
&lt;div class="section" id="target"&gt;
&lt;h3&gt;target&lt;/h3&gt;
&lt;p&gt;analysis log from PyPy, and display Python bytecode &amp;amp; jit operations via the web&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;install&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;jitviewer is a PyPy2 only program now (it need rpython)&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv env-pypy -p /usr/bin/pypy
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;active the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;env-pypy/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;get the PyPy2 source code (for rpython)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://bitbucket.org/pypy/pypy/downloads/pypy-2.4.0-src.tar.bz2
tar -xvf pypy-2.4.0-src.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;install jitviewer&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install jitviewer
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;set the env&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYTHONPATH pypy-2.4.0-src
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;run the sample&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jitviewer.py --log log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-log-of-pypy"&gt;
&lt;h3&gt;create log of PyPy&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYPYLOG jit-log-opt,jit-backend-counts:myprogram.log
pypy -c your_program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="with-pypy3"&gt;
&lt;h3&gt;with PyPy3&lt;/h3&gt;
&lt;p&gt;As jitviewer is a PyPy2 only program now (2014-10-15),
you should run your program by PyPy3 and output the log,
then use jitviewer with PyPy2 to analysis the log.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expect-in-the-future"&gt;
&lt;h3&gt;expect in the future&lt;/h3&gt;
&lt;p&gt;There are something that I think it should have ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;PyPy3 compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jitviewer with PyPy3 is not working now,
the smaller part is the syntax in jitviewer (something like print function),
the bigger part is the rpython module ...&lt;/p&gt;
&lt;p&gt;At the moment, rpython has a lot of Python 2 only syntax (even in PyPy3 source code).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CPython compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means to remove the depenency of rpython.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h3&gt;note&lt;/h3&gt;
&lt;p&gt;The PyPy does not modify the output of Python bytecodes,
so the Python bytecodes output from CPython's dis module or PyPy's are the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Wed, 15 Oct 2014 17:20:00 +0800</pubDate><guid>tag:,2014-10-15:posts/2014/10/jitviewer/</guid><category>book</category></item><item><title>PTT - Python 版 - transpose 問題</title><link>/posts/2014/10/ptt-python-transpose/</link><description>&lt;p&gt;這篇在解 PTT Python 版上的一個問題 (#1KEG5cfG)&lt;/p&gt;
&lt;p&gt;基本上就是要做 transpose，但是資料長度不依，
所以就來試試囉 : &lt;a class="reference external" href="https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0"&gt;https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下都以 Python 3 為考量，而且以 zip 為出發點來解這個問題。&lt;/p&gt;
&lt;p&gt;如果是一個完整 n x m 的資料，
類似的工作可以用 zip 就完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在的狀況不是完整 n x m 的資料，而是長短不一的，
一種解是用 itertools 裡的 zip_longest，
參數是 iterables 還有 fillvalue (預設是 None)，
fillvalue 會拿來填滿資料短缺的部份。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;it&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 跟前面文章借測資&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊會把不夠的地方都補 None，
所以輸出會是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1, None)
(2, 2, 2, 2, 2, 2, None, None)
(3, 3, 3, 3, 3, 3, None, None)
(4, 4, 4, 4, 4, None, None, None)
(5, 5, 5, 5, None, None, None, None)
(6, 6, 6, None, None, None, None, None)
(7, 7, 7, None, None, None, None, None)
(8, 8, None, None, None, None, None, None)
(9, None, None, None, None, None, None, None)
&lt;/pre&gt;
&lt;p&gt;如果前面那種剛好符合需求，那就可以開心的拿來用了，
如果真的不想要看到多補的那些資料，就再把結果處理過。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterfalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此一來結果就變成:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1)
(2, 2, 2, 2, 2, 2)
(3, 3, 3, 3, 3, 3)
(4, 4, 4, 4, 4)
(5, 5, 5, 5)
(6, 6, 6)
(7, 7, 7)
(8, 8)
(9,)
&lt;/pre&gt;
&lt;p&gt;不過上面處理是以輸入 data 裡沒有 None 為前提的 XD
資料裡面可能有 None 的話就另外用別的值囉。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Sat, 11 Oct 2014 23:33:00 +0800</pubDate><guid>tag:,2014-10-11:posts/2014/10/ptt-python-transpose/</guid><category>python</category></item><item><title>Python coding style</title><link>/posts/2014/09/python-coding-style/</link><description>&lt;ul class="simple"&gt;
&lt;li&gt;不能不提的 &lt;a class="reference external" href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://google-styleguide.googlecode.com/svn/trunk/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Sat, 13 Sep 2014 15:20:00 +0800</pubDate><guid>tag:,2014-09-13:posts/2014/09/python-coding-style/</guid><category>Python</category></item><item><title>About Stackless Python</title><link>/posts/2014/02/stackless-python/</link><description>&lt;p&gt;Stackless Python 背後的由來以及現況 ~&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/588958/what-are-the-drawbacks-of-stackless-python/590412#590412"&gt;聽故事去&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Mon, 24 Feb 2014 19:44:00 +0800</pubDate><guid>tag:,2014-02-24:posts/2014/02/stackless-python/</guid><category>Python</category></item><item><title>Python - @wraps</title><link>/posts/2014/02/python-wraps/</link><description>&lt;p&gt;在這邊先假設看這篇文章的都知道 decorator&lt;/p&gt;
&lt;p&gt;在使用 decorator 時，若沒有經過處理，可能會造成 function 的 property 改變，例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   haha , this is in haha function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 func1 的 &lt;cite&gt;__name__&lt;/cite&gt; 和 &lt;cite&gt;__doc__&lt;/cite&gt; 都改變了，這通常不是我們想要的，還有可能在 debug 的時候造成麻煩&lt;/p&gt;
&lt;p&gt;因此 Python 有了 wraps 這個 decorator 去處理這個問題 (在 functools 裡)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   func1 , this is in func1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，加上了 &amp;#64;wraps 後維持了 function 本來的 property ~&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Thu, 06 Feb 2014 11:30:00 +0800</pubDate><guid>tag:,2014-02-06:posts/2014/02/python-wraps/</guid><category>Python</category></item><item><title>初次使用 Pelican</title><link>/posts/2014/02/pelican/</link><description>&lt;p&gt;首先，什麼是 &lt;a class="reference external" href="http://docs.getpelican.com/en/"&gt;Pelican&lt;/a&gt; 呢？
Pelican 是個 Python 寫的靜態網站 generator，
你可以使用 Markdown, reStructuredText, AsciiDoc 等 markup language 作為撰寫的格式，
然後經由 Pelican 去生成靜態的網頁，經由這種方式，可以方便地使用你喜歡的文字編輯器去撰寫你的文章，
還可以結合 Version Control 去管理，
而由於生成的網頁是靜態的，所以可以放到 Github Pages 或者其他可以放置靜態網頁的地方去 Host，無疑是個很方便的模式。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Pelican 初步設定&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="theme"&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="disqus-support"&gt;
&lt;h2&gt;Disqus Support&lt;/h2&gt;
&lt;p&gt;Pelican 要支援 Disqus 非常簡單，首先只要在你的 Disqus 新增好你的網站，獲得你的 Disqul url 後，
只要在你的 pelicanconf.py 裡新增 DISQUS_SITENAME = 'your-disqus-url' 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;my-blog.disqus.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wdv4758h</dc:creator><pubDate>Sat, 01 Feb 2014 14:33:00 +0800</pubDate><guid>tag:,2014-02-01:posts/2014/02/pelican/</guid><category>pelican</category><category>Python</category></item></channel></rss>