<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2015-04-16T00:23:00+08:00</updated><entry><title>Django migrations</title><link href="/posts/2015/04/django-migrations-ask-log/" rel="alternate"></link><updated>2015-04-16T00:23:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-04-16:posts/2015/04/django-migrations-ask-log/</id><summary type="html">&lt;p&gt;前幾天學弟跑來問我說 Django 裡的 migrations 要怎麼用？&lt;/p&gt;
&lt;p&gt;本來想說留個筆記，下次碰到問題時可以參考，後來決定紀錄對話 (X&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;學弟 M：「dv ~，Django 的 migrations 要怎麼用啊？」&lt;/p&gt;
&lt;p&gt;我：「你就想像是 database 的 version control 啊。用 &lt;tt class="docutils literal"&gt;python manage.py makemigrations myapp&lt;/tt&gt; 會把更動 commit 上去。」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(幾分鐘後)&lt;/p&gt;
&lt;p&gt;學弟 M：「可是我更改後它沒有偵測到耶」&lt;/p&gt;
&lt;p&gt;我：「蛤 ~ ?」&lt;/p&gt;
&lt;p&gt;我：「我之前用過可以正常偵測到啊，你的東西應該是用 inspectdb 去爬之前用的 database 生出來的吧 (我知道他要接現有的資料庫)，生出來後有先 makemigrations 嗎？」&lt;/p&gt;
&lt;p&gt;學弟 M：「有啊，還是沒偵測到。」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(我跑過去東看西看)&lt;/p&gt;
&lt;p&gt;學弟 M：「dv，還是我開我機器的帳號給你進來看好了？」&lt;/p&gt;
&lt;p&gt;我：「喔喔，好窩」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(我進去東試試西試試)&lt;/p&gt;
&lt;p&gt;我：「真的沒偵測到耶，好奇怪喔 ~ 囧」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(開始 Google 各種資訊)&lt;/p&gt;
&lt;p&gt;我：「還是它自己的問題？要升升 1.8 看嗎？反正你才剛開始寫。(隨便亂猜)」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(我開始看 Django 1.8 的 release 有沒有相關的 change)&lt;/p&gt;
&lt;p&gt;學弟 M：「好啊，我不是用 1.8 喔」&lt;/p&gt;
&lt;p&gt;我：「我剛剛看你是 1.7.2 啊」&lt;/p&gt;
&lt;p&gt;學弟 M：「喔喔，我去升看看」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(幾分鐘後)&lt;/p&gt;
&lt;p&gt;學弟 M：「我升好了~」&lt;/p&gt;
&lt;p&gt;我：「有東西壞掉了耶 XD」&lt;/p&gt;
&lt;p&gt;我：「看起來是底下的 db connector」&lt;/p&gt;
&lt;p&gt;學弟 M：「真的耶，壞掉惹 Q_Q」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(Google 中)&lt;/p&gt;
&lt;p&gt;我：「原本你用的 mysql-connector-python 現在還沒支援 Django 1.8」&lt;/p&gt;
&lt;p&gt;我：「可以先換 PyMySQL，裝一下 ~」&lt;/p&gt;
&lt;p&gt;學弟 M：「好，我用 pip 裝一下」&lt;/p&gt;
&lt;p&gt;學弟 M：「裝好啦」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(我去改 settings.py 換成 django.db.backends.mysql)&lt;/p&gt;
&lt;p&gt;我：「好啦 ~ 正常了，可以開始找剛剛的問題了 ...」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(經過一些檔案開開關關和嘗試)&lt;/p&gt;
&lt;p&gt;我：「找到問題啦，你的 models 那裡設了 &lt;tt class="docutils literal"&gt;manage = False&lt;/tt&gt; 這樣他不會去偵測更動」&lt;/p&gt;
&lt;p&gt;我：「inspectdb 出來的就設成 False 了，應該是因為你在用 inspectdb 時，代表你很有可能有另外的程式在負責管理 database，所以 Django 預設就不去做更動。」&lt;/p&gt;
&lt;p&gt;學弟 M：「哦哦哦，真的耶，解決啦，感謝 dv ~」&lt;/p&gt;
&lt;p&gt;我：「喔，你那邊還會有些訊息說需要 default 值的 field 沒有給 default 值，你去改改後應該就都會 work 了」&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;以上是在剛剛由回憶中撈取，根據修過的心理學，記憶是建構出來的，如有錯誤，我也沒辦法 XD&lt;/p&gt;
</summary><category term="Django"></category><category term="migrations"></category></entry><entry><title>CPython's bug in feature that nobody uses</title><link href="/posts/2015/03/cpython-bug-in-feature-that-nobody-uses/" rel="alternate"></link><updated>2015-03-12T15:34:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-03-12:posts/2015/03/cpython-bug-in-feature-that-nobody-uses/</id><summary type="html">&lt;p&gt;之前 (2015 二月初) 發現 CPython 3.4 開始支援在 command line 直接用 &lt;tt class="docutils literal"&gt;tarfile&lt;/tt&gt; 這 module 來處理檔案，
也就是說可以能來當作 Unix-like 平台上常見的 &lt;tt class="docutils literal"&gt;tar&lt;/tt&gt; 指令的替代品，
其中支援由指定的副檔名來選擇壓縮的演算法 (無、gzip、bz2、lzma)，
但是經過嘗試後發現不管怎麼選都只是單純的 tar file，
後來去翻了一下 CPython source code 發現有地方寫錯了，
只好去開個 &lt;a class="reference external" href="http://bugs.python.org/issue23421"&gt;issue&lt;/a&gt; 送 patch 修正以及補上 test cases，
才知道原來 CPython 的 code review 還是使用 &lt;a class="reference external" href="http://bugs.python.org/review/"&gt;Rietveld&lt;/a&gt; ，
這也是我第一次幫 CPython 加 unit test :P&lt;/p&gt;
&lt;p&gt;[準備要報 PyCon APAC 2015 的 lighting talk，之後會補上 slide]&lt;/p&gt;
</summary><category term="CPython"></category></entry><entry><title>Python Benchmark for Interpreter</title><link href="/posts/2015/02/python-benchmark-for-interpreter/" rel="alternate"></link><updated>2015-02-05T13:23:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-02-05:posts/2015/02/python-benchmark-for-interpreter/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;div class="section" id="benchmark"&gt;
&lt;h3&gt;什麼是 benchmark ?&lt;/h3&gt;
&lt;p&gt;benchmark 就是用幾個固定項目來測量不同程式的效率，
取得測量出來的數值後互相做比較，
藉此來做優劣分析，但是這作法其實是蠻粗糙的。
benchmark 這種作法一直都有人在用 (也常會被拿來說嘴)，
雖然一個程式的效率不能就這麼用 benchmark 跑出來的數字來輕易評斷，
但還是能獲得些許的資訊，或者找到進步的空間。&lt;/p&gt;
&lt;p&gt;以下會說明幾個拿來評量 Python interpreter 的 benchmark。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;實作介紹&lt;/h3&gt;
&lt;div class="section" id="cpython"&gt;
&lt;h4&gt;CPython&lt;/h4&gt;
&lt;p&gt;Python 官方實作，
中規中矩，
garbage collection 採用 reference counting。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pypy"&gt;
&lt;h4&gt;PyPy&lt;/h4&gt;
&lt;p&gt;JIT 版本實作，
garbage collection 為 incremental generational tracing，
內部 data structure 有做過改良。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nuitka"&gt;
&lt;h4&gt;Nuitka&lt;/h4&gt;
&lt;p&gt;不是一個 Python interpreter 實作，
而是把 Python code compile 成單一的執行檔，
不過這樣一來也就損失了很多 Python 的特性。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;div class="section" id="background"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;沒什麼特別的，就是一個簡單的 Hello World，
目的是要測 interpreter 的 startup time，
在此項目中 startup time 愈小愈好。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="result"&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;Test:&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="70%" /&gt;
&lt;col width="30%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPython 2.7.9&lt;/td&gt;
&lt;td&gt;0.01 ~ 0.03 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CPython 3.4.2&lt;/td&gt;
&lt;td&gt;0.02 ~ 0.04 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy 2.5  (Python 2.7.8)&lt;/td&gt;
&lt;td&gt;0.10 ~ 0.12 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy3 2.4 (Python 3.2.5)&lt;/td&gt;
&lt;td&gt;0.06 ~ 0.07 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 2.7)&lt;/td&gt;
&lt;td&gt;0.01 ~ 0.02 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 3.4)&lt;/td&gt;
&lt;td&gt;0.06 ~ 0.08 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pystone"&gt;
&lt;h2&gt;PyStone&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;PyStone 是 CPython 裡面一個非常 high-level 的 benchmark (CPython &lt;tt class="docutils literal"&gt;lib/test/pystone.py&lt;/tt&gt; ，
拿不同的實作跑下去會拿到各自的 PyStone，代表著整體的效能分數，
愈多的 PyStone 愈好。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;在這個項目中，PyPy JIT 的優勢大幅顯現，隨著 loop 量的上升，差距也跟著拉大。&lt;/p&gt;
&lt;p&gt;Test: (50000 passes)&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="59%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPython 2.7.9&lt;/td&gt;
&lt;td&gt;59814 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CPython 3.4.2&lt;/td&gt;
&lt;td&gt;46957 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy 2.5  (Python 2.7.8)&lt;/td&gt;
&lt;td&gt;570821 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy3 2.4 (Python 3.2.5)&lt;/td&gt;
&lt;td&gt;475670 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 2.7)&lt;/td&gt;
&lt;td&gt;188474 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 3.4)&lt;/td&gt;
&lt;td&gt;94807 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Test: (1000000 passes)&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="55%" /&gt;
&lt;col width="45%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPython 2.7.9&lt;/td&gt;
&lt;td&gt;56851.8 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CPython 3.4.2&lt;/td&gt;
&lt;td&gt;46869.8 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy 2.5  (Python 2.7.8)&lt;/td&gt;
&lt;td&gt;1.88367e+06 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy3 2.4 (Python 3.2.5)&lt;/td&gt;
&lt;td&gt;1.54948e+06 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 2.7)&lt;/td&gt;
&lt;td&gt;186711 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 3.4)&lt;/td&gt;
&lt;td&gt;103947 pystones/second&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pybench-2-0"&gt;
&lt;h2&gt;PyBench 2.0&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;PyBench 是 CPython 裡的 low-level benchmarks (CPython &lt;tt class="docutils literal"&gt;Tools/pybench&lt;/tt&gt;)，
PyStone 用來衡量整體效能，
PyBench 用來衡量特定細項的效能。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="richards"&gt;
&lt;h2&gt;Richards&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;和 PyStone 類似，
是 PyPy 裡的 high-level benchmark (原版本是由 Dr. Martin Richards 在 Cambridge University 用 BCPL 寫的)
(PyPy &lt;tt class="docutils literal"&gt;rpython/translator/goal/richards.py&lt;/tt&gt;)，
一樣給出單一的值來衡量 (Average time per iteration)，
愈低的 &amp;quot;Average time per iteration&amp;quot; 愈好。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="76%" /&gt;
&lt;col width="24%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPython 2.7.9&lt;/td&gt;
&lt;td&gt;382.70 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CPython 3.4.2&lt;/td&gt;
&lt;td&gt;437.50 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy 2.5  (Python 2.7.8)&lt;/td&gt;
&lt;td&gt;49.66 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy3 2.4 (Python 3.2.5)&lt;/td&gt;
&lt;td&gt;58.72 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 2.7)&lt;/td&gt;
&lt;td&gt;178.72 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Nuitka compile 0.5.9 (Python 3.4)&lt;/td&gt;
&lt;td&gt;261.62 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;p&gt;Nuitka 把 Python 轉成 C++ 然後 compile，
雖然可以得到效能提升，但是缺失去很多 Python 的特質，
雖然小 script 在處理過後可以得到小小的執行檔，
但如果是一個大專案的話，
compile 出來的結果可能就會很大 (先別提是否能好好處理)，
這樣相對之下選用原本 interpreter 的方式可能還會好一些，
而且如此一來，在更改 Python 專案時也需要不斷重新 compile，
失去了一些方便性，
如果別人要把 compile 過的 Python code import 進去來用又是另外一個問題，
但不可否認，對於一個小 script 且又有 performance 和 memory 考量下，
目前可能是個選擇。&lt;/p&gt;
&lt;p&gt;若是單純講究 performance 的話，
PyPy 的可能性會大很多，
保留原本 Python 的特質，
還有 JIT 加持，
又有更好的 garbage collection 支援，
一些 data structure 也有做過改良，
雖然 PyPy 的成熟度已經愈來愈高了，
但是還是會有地方需要改進，
若發現有比原本 CPython 慢的地方可以回報，
PyPy developer 會找到問題點然後解決 (有時是 project code 需要小改進，讓 JIT 可以幫上忙)，
而且 PyPy 還有很多更 advanced 的 interpreter features 正在實驗，
評估效能和整體架構下，可看性最高。&lt;/p&gt;
&lt;p&gt;不過這邊的 benchmark 都只是一個粗略衡量，
還是要像 speed.pypy.org 一樣拿一些實際在用的 project 來跑，
可看性會比較高。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hg.python.org/benchmarks/"&gt;CPython benchmark suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ironpython.codeplex.com/wikipage?title=IP26RC1VsCPy26Perf"&gt;IronPython Performance Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/IronPython"&gt;Wikipedia - IronPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Jython"&gt;Wikipedia - Jython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Dynamic_Language_Runtime"&gt;Wikipedia - Dynamic Language Runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Common_Language_Infrastructure"&gt;Wikipedia - Common Language Infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cython"&gt;Wikipedia - Cython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="Interpreter"></category><category term="Benchmark"></category><category term="CPython"></category><category term="PyPy"></category><category term="Nuitka"></category></entry><entry><title>PyPy - Tutorial for Brainfuck Interpreter</title><link href="/posts/2015/01/pypy-tutorial-for-brainfuck-interpreter/" rel="alternate"></link><updated>2015-02-04T00:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-31:posts/2015/01/pypy-tutorial-for-brainfuck-interpreter/</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 是一個 Dynamic Language，
官方提供了一個叫作 CPython 的 Interpreter 實作，
Interpreter 讓這類 Dynamic Language 不用事先 compile 過才可以執行，
只要寫好 script 後丟進去就可以跑，
以下有 Compiler 和 Interpreter 簡陋的流程圖 :&lt;/p&gt;
&lt;p&gt;Compiler :&lt;/p&gt;
&lt;img alt="Compiler" src="/img/compiler/compiler.png"/&gt;
&lt;p&gt;Interpreter :&lt;/p&gt;
&lt;img alt="Interpreter" src="/img/compiler/interpreter.png"/&gt;
&lt;p&gt;CPython 的實作只維持在很標準的方式，
相較之下並沒有花費大量的努力往更好的效能去調整，
一來應該是商業公司投資的資源量不夠，
再來應該是人力也不夠。&lt;/p&gt;
&lt;p&gt;雖然在 2009 年一度從 Google 發起一個叫作 Unladen Swallow 的 project，
目標是在 CPython 上利用 LLVM 做 just-in-time compiler，
不過最後在 2009 年底就漸漸中斷，目前只留下一個沒在開發的 branch。&lt;/p&gt;
&lt;p&gt;目前幾個針對效能的實作中，Cython 和 PyPy 是最成熟可行的選項，
Cython 是一個 Python 的 superset，
利用 Cython 提供的靜態型別宣告以及其他功能來修改程式，
最後經過 compile 後可以讓程式變得相當快速，
而 PyPy 則是一個 Drop-In Replacement 的實作，
PyPy 的效能來自於 JIT、更有效率 Garbage Collection、更有效率的 Data Structure。&lt;/p&gt;
&lt;p&gt;近期倒是有由 Dropbox 發起的新實作叫 &lt;a class="reference external" href="https://github.com/dropbox/pyston"&gt;Pysyon&lt;/a&gt; ，
目標是 based on LLVM 做一個有效率的 JIT 實作，
由於是個新專案，目前 release 只有到 0.2 版，
有 Dropbox 企業的金錢、人力資助下，
只要這專案持續下去，相信出來的效能是會蠻有看頭的，
不過專案目前還在早期開發中，就靜觀其變囉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tutorial"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Tutorial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PyPy 的官方 Blog 上，
在 2011 年發了兩篇由 Andrew Brown 撰寫用 PyPy 來實作 Brainfuck Interpreter 的 Tutorial，
時至今日，已經來到了 2015 年，中間也經過了許多 release，
接下來將會以 PyPy 2.5 為試驗目標，
更新一些舊 Tutorial 上需要改變的地方，並且和其他實作做初步比較。
(本練習的 code 會放在 GitHub &lt;a class="reference external" href="https://github.com/wdv4758h/brainfuck_bench"&gt;wdv4758h/brainfuck_bench&lt;/a&gt; )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2011/04/tutorial-writing-interpreter-with-pypy.html"&gt;Tutorial: Writing an Interpreter with PyPy, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2011/04/tutorial-part-2-adding-jit.html"&gt;Tutorial Part 2: Adding a JIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy 這個專案其實有兩個角色&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 的 Interpreter 實作&lt;/li&gt;
&lt;li&gt;撰寫 Dynamic Languages 的 Interpreter 的 framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Interpreter 的 framework" 是 PyPy 這 project 最特別的地方，
接下來這篇的重點將會放在 "撰寫 Interpreter"&lt;/p&gt;
&lt;p&gt;要做一個 Language 的 Interpreter 會需要以下事情&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;source code parser&lt;/li&gt;
&lt;li&gt;a bytecode interpretation loop&lt;/li&gt;
&lt;li&gt;lots of standard library code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對於稍微複雜一點點的語言，實作這些這會需要不少的時間，
更別提中間還得考慮 Memory 管理、Data Type 的實作，
會有許多的東西需要煩惱。&lt;/p&gt;
&lt;p&gt;如果可以用一個高階一點的語言來實作，那前面提到的事情就可以大幅化簡，
可以利用到一些高階語言的特色，
像是不用自己考慮記 Memory 管理、有好用的 Data Type 等，
但是講到這，想必有人就會想到這個實作的速度應該會 "很慢"，
在高階語言上在建一層來實作自己的語言，
速度會比原本可能就不快的高階語言還來的更慢，
所以 PyPy 就是來解決這部份的問題啦。&lt;/p&gt;
&lt;p&gt;利用 PyPy 來寫 Interpreter 的話，要用的是一個叫作 RPython 的語言，
看名字就知道跟 Python 有關，RPython 全名叫 Restricted Python，
是一個 Python 的 subset，既然是 subset 也就代表寫出來的還是一個 Python 程式，
但是 RPython 的特點是它的 type 是 inferable 的，
所以雖然一樣不寫出 type，但是可以做到 statically typed，
而 PyPy 的 RPython toolchain 會把 RPython 的 code 轉成 C code
再丟給 GCC 或 Clang 這類 C compiler 來 compile 成 native code，
藉此你可以獲得 native code 的 interpreter，所以會跑的比原本疊在 interpreter 上的 interpreter 來的快，
在這當中 PyPy 還可以幫你處理 Garbage Collecion 和 JIT。&lt;/p&gt;
&lt;p&gt;關於 RPython 的內容，有興趣的話可以看
2007 年 "&lt;strong&gt;RPython: a Step Towards Reconciling Dynamically and Statically Typed OO Languages&lt;/strong&gt;"
這篇 paper 裡的內容 (Bibtex key : AACM-DLS07)，
或是這邊有 &lt;a class="reference external" href="https://speakerdeck.com/antocuni/rpython-a-step-towards-reconciling-dynamically-and-statically-typed-object-oriented-languages"&gt;slide 版本&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;關於 PyPy 裡面用到的 JIT 技術可以看這篇 &lt;a class="reference external" href="https://speakerdeck.com/antocuni/pypy-jit-under-the-hood"&gt;(2012) PyPy JIT under the hood&lt;/a&gt; 當作入門。&lt;/p&gt;
&lt;div class="section" id="brainfuck-interpreter-begin"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Brainfuck Interpreter - Begin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Brainfuck spec :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%"&gt;&lt;/col&gt;
&lt;col width="75%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標加一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標減一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標指向的 byte 的值加一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標指向的 byte 的值減一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;輸出指標指向的 byte (ASCII)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;輸入到指標指向的 byte (ASCII)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;如果指標指向的 byte 為零，向後跳到對應的 ] 指令的下一指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;如果指標指向的 byte 不為零，向前跳到對應的 [ 指令的下一指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Brainfuck to C (assuming "ptr" is of type "unsigned char*") :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%"&gt;&lt;/col&gt;
&lt;col width="70%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;brainfuck command&lt;/th&gt;
&lt;th class="head"&gt;C equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;(Program Start)&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;infinitely&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;++*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外任何不在 Brainfuck spec 裡的東西都會被忽略&lt;/p&gt;
&lt;p&gt;以下我們開始做 Brainfuck Interpreter&lt;/p&gt;
&lt;p&gt;首先先做 parser 還有 main loop : (以下 code 大部份來自官方 Tutorial 的 example 1)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    因為 Brainfuck 的 code 就像是在 Tape 上操作一樣，&lt;/span&gt;
&lt;span class="sd"&gt;    所以有這個 class 來處理所有 action&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;devance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;tape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tape&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;devance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# print&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# read from stdin&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Skip forward to the matching ]&lt;/span&gt;
            &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;']'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Skip back to the matching [&lt;/span&gt;
            &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;bracket_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;leftstack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;leftstack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftstack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt;
                &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
                &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;main_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="pypy-translation"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id8"&gt;PyPy Translation&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在 PyPy repo 的 &lt;tt class="docutils literal"&gt;pypy/rpython/translator/goal/&lt;/tt&gt; 裡有一些範例，
其中 &lt;tt class="docutils literal"&gt;targetnopstandalone.py&lt;/tt&gt; 是簡單的 Hello World&lt;/p&gt;
&lt;p&gt;在這邊，我們需要一個叫做 &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; 的 function，
它會回傳另一個 function 作為 entry point，
PyPy 翻譯時會先找叫作 &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; 的 function，
call 它後從它回傳的 function 開始翻譯，
而最後產生的執行檔在執行時傳入的參數也是給這個回傳的 function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;main_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must supply a filename"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;entry_point&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此外還有一個部份需要修改，就是用到 sys module 裡的 stdin/stdout 的部份，
因為目前 RPython 並沒有支援 sys.stdin 和 sys.stdout
(雖然開發者說其實可以用 os.read 和 os.write 包裝) 所以需要改成用 os.read 和 os.write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c"&gt;# sys.stdout.write(chr(tape.get()))&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;    &lt;span class="c"&gt;# 1 for stdout&lt;/span&gt;

&lt;span class="c"&gt;# tape.set(ord(sys.stdin.read(1)))&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 0 for stdin, 1 for one byte&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來需要抓 PyPy 的 source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg clone https://bitbucket.org/pypy/pypy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來就交給 PyPy 做轉換&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pypy/rpython/bin/rpython example2.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後就會看到許多 PyPy 吐出來的訊息，最後產生 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;example2-c&lt;/span&gt;&lt;/tt&gt; 這個執行檔，
這個轉換在我機器 (虛擬機) 上大約需要 4x ~ 5x 秒&lt;/p&gt;
&lt;p&gt;結果 :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="56%"&gt;&lt;/col&gt;
&lt;col width="44%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;290552 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Translation Time&lt;/td&gt;
&lt;td&gt;56.5 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%"&gt;&lt;/col&gt;
&lt;col width="59%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Test File&lt;/th&gt;
&lt;th class="head"&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;mandel.b&lt;/td&gt;
&lt;td&gt;68.61 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接著試跑一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./example2-c mandel.b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bash 裡有自己的 time command 可以看執行時間，
但是如果要更多資訊的話 (-v)，需要 GNU 版的 time command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pacman -S &lt;span class="nb"&gt;time&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;time&lt;/span&gt; -v ./example2-c mandel.b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是成功的利用 RPython 寫了 Brainfuck Interpreter 交給 PyPy 的 RPython toolchain 轉成 machine code ~&lt;/p&gt;
&lt;p&gt;複習一下，要可以給 PyPy 的 RPython toolchain 轉換需要以下條件&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;符合 RPython 語法、功能&lt;/li&gt;
&lt;li&gt;有 &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; 這個 function 回傳進入的 function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想看更多 translate 時可以開的優化參數的話可以看
&lt;a class="reference external" href="https://pypy.readthedocs.org/en/latest/config/commandline.html"&gt;這裡&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compile-with-clang"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id9"&gt;Compile with Clang&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參數 : &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--cc=clang&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-jobs"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id10"&gt;More Jobs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參數 : &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--make-jobs=8&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;(針對 C backend compile 時的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-j&lt;/span&gt;&lt;/tt&gt; 參數)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="garbage-collection"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id11"&gt;Garbage Collection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參數 : &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--gc=incminimark&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;目前可用的選項 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;boehm&lt;/li&gt;
&lt;li&gt;ref (default)&lt;/li&gt;
&lt;li&gt;semispace&lt;/li&gt;
&lt;li&gt;statistics&lt;/li&gt;
&lt;li&gt;generation&lt;/li&gt;
&lt;li&gt;hybrid&lt;/li&gt;
&lt;li&gt;minimark&lt;/li&gt;
&lt;li&gt;incminimark&lt;/li&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="brainfuck-interpreter-jit"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Brainfuck Interpreter - JIT&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前面試過了利用 PyPy 的 RPython toolchain 幫我們把 RPython code 轉成 C 去 compile，
接下來是利用 PyPy 幫我們做 JIT 出來，
感謝 PyPy 開發者的努力，我們要在 RPython 上做出 JIT 並不難，
因為 PyPy 的 JIT generator 有幾個目標 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;簡單 (基於原本的 Interpreter 上，只要做少許修改就能有 JIT)&lt;/li&gt;
&lt;li&gt;Maintainable (不會因為加了 JIT 就造成需要開另外的 project 分別 maintain)&lt;/li&gt;
&lt;li&gt;夠快 (雖然 JIT 是生出來的，但是也要速度也要夠快)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這目標下，就算是沒有大量人力、金錢贊助的語言，也能簡單做出不錯的 JIT，
下面就讓我們來嘗試一下 ~&lt;/p&gt;
&lt;p&gt;(詳細訊息請看 &lt;a class="reference external" href="http://rpython.readthedocs.org/en/latest/jit/index.html"&gt;RPython Documentation - JIT&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;要讓 PyPy 的 RPython toolchain 生出 JIT 需要提供一些資訊給它，
首先是告訴它哪些東西構成一個 execution frame，
在我們的 Brainfuck Interpreter 中並沒有真的 stack frame，
這問題就變成在執行一個 command 的時候，
哪些東西是不變的，哪些是會變的，
不變的被稱做 "&lt;strong&gt;green&lt;/strong&gt;"，會變的稱做 "&lt;strong&gt;red&lt;/strong&gt;"，
在我們的例子中，green 有 "pc"、"program"、"brakcet_map"，
red 有 "tape"，
接著就從 &lt;tt class="docutils literal"&gt;rpython.rlib.jit&lt;/tt&gt; 取得 &lt;tt class="docutils literal"&gt;JitDriver&lt;/tt&gt; 這個 metaclass 來生出我們需要要的 class&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpython.rlib.jit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JitDriver&lt;/span&gt;
&lt;span class="n"&gt;jitdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JitDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'program'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bracket_map'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'tape'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在 main loop 裡的 while 開頭 call jit_merge_point&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jitdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jit_merge_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來轉換的時候多加一個 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--opt=jit&lt;/span&gt;&lt;/tt&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pypy/rpython/bin/rpython --opt&lt;span class="o"&gt;=&lt;/span&gt;jit example3.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;總結需要做的事 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;import &lt;tt class="docutils literal"&gt;JitDriver&lt;/tt&gt; 進來，把 green 和 red 變數分好&lt;/li&gt;
&lt;li&gt;在 main loop 裡 while 一開始的地方 call &lt;tt class="docutils literal"&gt;jit_merge_point&lt;/tt&gt; 把變數傳進去&lt;/li&gt;
&lt;li&gt;translate 的時候加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--opt=jit&lt;/span&gt;&lt;/tt&gt; 參數&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;開 JIT 參數後，轉換的時間就變長，檔案也變大，但是跑下去就快很多&lt;/p&gt;
&lt;p&gt;結果 :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="55%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;5954320 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Translation Time&lt;/td&gt;
&lt;td&gt;977.4 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%"&gt;&lt;/col&gt;
&lt;col width="59%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Test File&lt;/th&gt;
&lt;th class="head"&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;mandel.b&lt;/td&gt;
&lt;td&gt;27.64 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;沒改很多 code，只做了 import 和寫幾行去 call import 進來的東西，
時間從 68.61 s 變 27.64 s (不過還是很慢)&lt;/p&gt;
&lt;p&gt;附上轉換時的圖 XD&lt;/p&gt;
&lt;img alt="PyPy Translation" src="/img/pypy/pypy-translate.png"/&gt;
&lt;p&gt;註 :&lt;/p&gt;
&lt;p&gt;以前還需要寫一個 jitpolicy function，
但是現在已經是 default 了 (看 &lt;tt class="docutils literal"&gt;rpython/translator/driver.py&lt;/tt&gt;)，
所以不用寫&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;jitpolicy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpython.jit.codewriter.policy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JitPolicy&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JitPolicy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tracing-jit"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Tracing JIT&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在試完生出的 JIT 的速度後，
來了解一下它是怎麼運作的。&lt;/p&gt;
&lt;p&gt;Interpreter 執行的是我們寫的 interpreter code，
當發現 target laugange (Brainfuck) 寫的某段 code 很常跑時，
會把這部份標成 "Hot"，並且會做追蹤，當下一次進到這個循環的時候，
interpreter 會進入 tracing mode，把每個指令紀錄下來，循環結束後，
tracing mode 就停止，把追蹤紀錄丟給 optimizer，
接著丟給 assembler，產生 machine code 在之後執行時使用。&lt;/p&gt;
&lt;p&gt;基於對原本 interpreter 的一些 assumption，
生出的 machine code 通常會對很多地方進行優化，
因此生出的 machine code 會包含一些 guard 做驗證，
驗證失敗的話就退回去使用原本 interpreter 的 code。&lt;/p&gt;
&lt;div class="section" id="debug-and-trace-log"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt;Debug and Trace Log&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;雖然前面已經生出了不錯的結果，
但是總是會想要知道還能不能更好，
所以我們需要知道 JIT 做了些什麼事，
接下來就寫一個紀錄用的 function (參數是前面提過的 green 變數) 並傳給 jitdriver&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;jitdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JitDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;greens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'program'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bracket_map'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;reds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'tape'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;get_printable_location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_location&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用跟前面一樣的方式轉換 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pypy/rpython/bin/rpython --opt&lt;span class="o"&gt;=&lt;/span&gt;jit example4.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來跑程式的時候先加環境變數來把操作寫進 log&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PYPYLOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jit-log-opt:logfile ./example4-c test.b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這 log 可以看出有哪些部份被轉成了 machine code，
這在尋找有那邊可以優化的時候很有用&lt;/p&gt;
&lt;p&gt;每個 trace 的開頭都是像這樣&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[3c091099e7a4a7] {jit-log-opt-loop
&lt;/pre&gt;
&lt;p&gt;結尾都是像這樣&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[3c091099eae17d] jit-log-opt-loop}
&lt;/pre&gt;
&lt;p&gt;中間則是每次執行的操作，有些操作如果被優化掉的話就不會出現&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="optimize"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Optimize&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="elidable-old-purefunction"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id16"&gt;elidable (old : purefunction)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;由於每次的 loop 都會去 dictionary 裡查對應的位址，
但是其實這個 dictionary 裡的資訊是不會變的，
所以是可以直接編成 machine code 來加速，
但是對 PyPy 而言，那個 dictionary 有可能會變動，
但它不知道其實資料不會再改了，
所以我們可以告訴它同樣的輸入一定會有相同的輸出，
這可以用 PyPy 裡的 &lt;tt class="docutils literal"&gt;elidable&lt;/tt&gt; (以前是 &lt;tt class="docutils literal"&gt;purefunction&lt;/tt&gt;) decorator 做告知&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpython.rlib.jit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;elidable&lt;/span&gt;

&lt;span class="nd"&gt;@elidable&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_matching_bracket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# 下面把查 bracket_map 的地方換掉&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來跟前面一樣做轉換，最後拿到的程式就比原本快很多&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="55%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;5852352 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Translation Time&lt;/td&gt;
&lt;td&gt;960.2 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%"&gt;&lt;/col&gt;
&lt;col width="59%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Test File&lt;/th&gt;
&lt;th class="head"&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;mandel.b&lt;/td&gt;
&lt;td&gt;9.58 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;結果從 27.64 s 降到了 9.58 s&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delay-output"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id17"&gt;Delay Output&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;對電腦來說 I/O 是很慢的，所以原本每個 byte 這樣讀讀寫寫也會有一點效能損失，
所以可以把直先存起來，之後再一次 output，
對於有大量 output 的 brainfuck 程式可能可以有一點點的幫助 (不多)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;devance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 for stdout&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 0 for stdin, 1 for one byte&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 for stdout&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zero"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id18"&gt;Zero&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Brainfuck code 裡面的 "[-]" 這樣的 loop 其實就是把目前指到的值歸零，
所以可以直接把它 assign 成零，不要再慢慢減了，
這樣換掉後可以有些許的提升&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compact"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id19"&gt;Compact&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Brainfuck 的 code 裡面常常會出現連續的 "+" 或 "-" 或 "&amp;lt;" 或 "&amp;gt;"，
但是這是可以一次完成的 (連續的 "&amp;gt;"、"&amp;lt;" 都可以和起來，"+"、"-" 也可以)，
不需要一個一個慢慢加、一個一個慢慢移，
所以如果把這部份處理掉，
做更有效率的計算，
可以獲得一部份的效能提升 ~&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;總結&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這個 Tutorial 做的只是簡單的 Brainfuck Interpreter，
離真正實用的語言的 interpreter 還有很大的差距，
但這邊可以讓我們看出在還沒化很多心力下去調整效能前，
例用 RPython 提供給我們的 toolchain 是可以簡單獲得不錯的效益的，
當然事實上是還有很多可以調整的空間，
不過已經讓我們跨出例用 RPython toolchain 的第一步了 ~&lt;/p&gt;
&lt;p&gt;這整個流程試下來，覺得有很多地方看到是可以做的更好的，
像是 RPython 可以做到更完善的支援，
這樣寫起來會更順利，
還有 toolchain 轉換的時間也可能再降低，
出來的 code size 可能也可以更小，
速度也可能更快，
背後 backend 也可能更多樣 (LLVM backend 好像碰到一些障礙要先幫 LLVM 上 patch 才能接起來？)，
諸如此類的問題，
總結一個問題就是 ... 缺錢，
就像是 StackOverflow 上 &lt;a class="reference external" href="http://stackoverflow.com/a/5172833"&gt;這篇&lt;/a&gt; 的答案一樣 ...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
What blocks Ruby, Python to get Javascript V8 speed?

Nothing.

Well, okay: money. (And time, people, resources, but if you have money, you can buy those.)
&lt;/pre&gt;
&lt;p&gt;不過 PyPy 做到現在也算是個有特色的專案了，
不僅僅是一個 Python 的實作，
而有了一個完整的 toolchain，
而且包含幫忙處理 GC 和 JIT，
這樣的專案和成熟度，
目前應該找不到相似對手
(從 &lt;a class="reference external" href="http://stackoverflow.com/a/12126562"&gt;這篇 StackOverflow 的回答&lt;/a&gt; 也可以看出還沒有類似的成熟專案)，
無論數年後這專案走向如何，
當中累積的技術都將為未來奠定基礎。&lt;/p&gt;
&lt;p&gt;最後複習整個流程 :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用 RPython 寫你的 Interpreter (需要有 target function)&lt;/li&gt;
&lt;li&gt;針對 main loop 把變數分類、call JIT 的 Driver class&lt;/li&gt;
&lt;li&gt;丟下去 toolchain 轉換&lt;/li&gt;
&lt;li&gt;效能還不夠時，找出不會變得地方用 "&lt;strong&gt;elidable&lt;/strong&gt;" decorator 做告知&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;額外紀錄&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="with-statement-in-rpython"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;with statement in RPython&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在寫 example 的時候，我開檔案那邊用的是 with statement 來幫我 handle，
結果發現丟下去轉換的時候不會過，去 PyPy irc 問了後，
發現其實 RPython 是有支援 with statement 的，
只是近期在 RPython 對檔案的部份有了 &lt;tt class="docutils literal"&gt;rpython/rlib/rfile.py&lt;/tt&gt; 這個實作，
在 RPython 裡 built-in 的 open() 回傳的是這個 RFile class 的 instance，
RPython 的 RFile 實作的是完整的 Python files 的 subset，
但目前沒有寫 &lt;tt class="docutils literal"&gt;__enter__&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;__exit__&lt;/tt&gt; methods，
過沒多久開發者 Armin Rigo 就送了
&lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/6657cb5a838dae0e9ad8453d6d412ef96ee155fa"&gt;一個 commit&lt;/a&gt;
補上了這部份，
于是乎，我可以繼續用 with statement 丟下去給 PyPy 轉了 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rpython-s-print-statement"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;RPython's print statement&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;RPython 裡面其實是有支援 print statement 的，
但是那大多只用於 debug，
多數情況都用 os.read / os.write，
不過其實可以用類似 "os.fdopen(1)" 的方法來拿到 stdout
(不過要在 RPython function 裡，而不是 module global)，
所以其實可以做到當我在 RPython 用 sys.stdout 時其實後面是 call rfile.py 裡面類似 getstdout() 的 function，
它會取得並且 cache 用 os.fdopen() 取得的 rfile。&lt;/p&gt;
&lt;p&gt;畢竟 RPython 是要拿來寫 interpreter 的，
有 os module 可以用來 I/O 其實也很夠，
只是如果有 sys.stdout / sys.stdin 的支援對很多地方會更方便些，
不過 PyPy team 應該也是缺錢缺人手，
這也不算是核心大問題，
暫時就先這樣吧，等看看哪天有人 contribute XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comple-with-clang"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Comple with Clang&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;雖然前面有提到可以用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--cc=clang&lt;/span&gt;&lt;/tt&gt; 來用 clang compile，
但其實我在試的時候有出現問題，
不過到 irc 上尋問後得到了解法，
就是加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--gcrootfinder=shadowstack&lt;/span&gt;&lt;/tt&gt; ，
以下是 Armin Rigo 的回覆&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I guess clang produces subtly different assembler that throws off "trackgcroot"
you can use --gcrootfinder=shadowstack
that will be slightly slower
(~10% and only before jit-compilation)
(trackgcroot is a hack used with --gcrootfinder=asmgcc, which is enabled only on Linux;
usually we have to fix it slightly for every new version of gcc...)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="if-elif"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;if ... elif&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在翻參數的時候，發現有個優化參數叫作 &lt;tt class="docutils literal"&gt;merge_if_blocks&lt;/tt&gt; ，
顧名思義就是把 Python 多層的 if ... elif block 合成 C 裡 switch 的形式，
可以看
&lt;a class="reference external" href="https://pypy.readthedocs.org/en/latest/config/translation.backendopt.merge_if_blocks.html"&gt;documentation 裡的說明&lt;/a&gt;
裡面有示意圖 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="string-replace"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;string replace&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;RPython 裡的 str 目前只支援 char 的 replace，
但是可以從 &lt;tt class="docutils literal"&gt;rpython/rlib/rstring.py&lt;/tt&gt; 裡找到 replace function 來替代，
&lt;tt class="docutils literal"&gt;from rpython.rlib.rstring import replace&lt;/tt&gt; ，
&lt;tt class="docutils literal"&gt;replace(string, old, new, max)&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;以下是 irc 上詢問得到得回答&lt;/p&gt;
&lt;pre class="literal-block"&gt;
   wdv| any reason that RPython's string replace only works for char args ?
 ronan| wdv: no very good reasons
 ronan| wdv: it would be a bit of work to implement and interpreters are usually better off writing their own
        replace at a low level
cfbolz| ronan, wdv: there is even a usable implementation, in rlib.rstring, I think
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="rpython-rlib-jit-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;rpython/rlib/jit.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由於在看前面的 &lt;tt class="docutils literal"&gt;rpython/rlib/rstring.py&lt;/tt&gt; 裡的 replace function 時，
發現上面有一些 decorator，其中一個是 &lt;tt class="docutils literal"&gt;jit.elidable&lt;/tt&gt; ，
覺得好奇就去翻了一下，不翻還好，
億翻發現就 tutorial 上寫的 &lt;tt class="docutils literal"&gt;purefunction&lt;/tt&gt; 已經 deprecated 了 XD，
現在要用剛剛看到的 "&lt;strong&gt;elidable&lt;/strong&gt;"，
趕快來改一下 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="embedding-pypy"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;Embedding PyPy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 irc 上問問題的時候，剛好看到前面有人問了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;libpypy-c.so&lt;/span&gt;&lt;/tt&gt; 是幹嘛用的，
原來是近期 PyPy 提供的功能，可以把 PyPy 嵌入其他地方，
&lt;a class="reference external" href="http://pypy.readthedocs.org/en/latest/embedding.html"&gt;官方 Document&lt;/a&gt;
有寫了簡單的 C 範例，include "PyPy.h" 後，
把在 C 程式裡的 Python code char array 丟進去執行，
甚至可以把丟參數給 Python 端的 function，
提供了未來把 PyPy 嵌入別的地方的機會 ~&lt;/p&gt;
&lt;p&gt;附上 irc log :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mstuchli| This is prolly a stupid question, but the libpypy-c.so is a new thing, correct? What's it for?
   fijal| mstuchli: for embedding
 arigato| mstuchli: for embedding pypy into some other program, more precisely; now the "pypy" executable is
          very small and just calls libpypy-c.so, but other programs may call it too
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;Wikipedia - Just-in-time compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tracing_just-in-time_compilation"&gt;Wikipedia - Tracing just-in-time compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Interpreter_%28computing%29"&gt;Wikipedia - Interpreter (computing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Unladen_Swallow"&gt;Wikipedia - Unladen Swallow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.slideshare.net/jserv/pypy-dynamic-language-compilation-framework"&gt;PyPy: Dynamic Language Compilation Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ryan-kelly-pypy-dot-js-what-how-why"&gt;Ryan Kelly: PyPy.js: What? How? Why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.aosabook.org/en/pypy.html"&gt;The Architecture of Open Source Applications - PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=VxGMp_xqTa4"&gt;(2013) (video) [jserv] PyPy 簡介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://calmerthanyouare.org/2015/01/07/optimizing-brainfuck.html"&gt;brainfuck optimization strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/002119.html"&gt;打造 Brainfuck 的 JIT compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/2011/04/_llvm_brainfuck.html"&gt;透過 LLVM 打造 Brainfuck JIT compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nayuki.io/page/optimizing-brainfuck-compiler"&gt;Optimizing brainfuck compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://copy.sh/brainfuck/"&gt;Brainfuck Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.stups.uni-duesseldorf.de/mediawiki/images/1/18/Pub-BoCuFiRi09_246.pdf"&gt;Tracing the Meta-Level: PyPy’s Tracing JIT Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cfbolz.de/"&gt;Carl Friedrich Bolz's site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/antocuni/rpython-a-step-towards-reconciling-dynamically-and-statically-typed-object-oriented-languages"&gt;RPython: a Step Towards Reconciling Dynamically and Statically Typed OO Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://llvm.org/pubs/2006-10-DLS-PyPy.pdf"&gt;PyPy's Approach to Virtual Machine Construction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category><category term="Brainfuck"></category><category term="Interpreter"></category><category term="JIT"></category><category term="GC"></category></entry><entry><title>Celery - Distributed Task Queue</title><link href="/posts/2015/01/celery/" rel="alternate"></link><updated>2015-01-26T23:45:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-26:posts/2015/01/celery/</id><summary type="html">
&lt;p&gt;試到一半的 Celery ~"~ (未來會繼續)&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;simple, flexible and reliable distributed system to process vast amounts of messages&lt;/p&gt;
&lt;p&gt;task queue with focus on real-time processing, while also supporting task scheduling&lt;/p&gt;
&lt;p&gt;BSD license&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tutorial"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Tutorial&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="choosing-a-broker"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Choosing a Broker&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Broker 的功能是收發 messages，這邊通常會用專門的 &lt;strong&gt;message broker&lt;/strong&gt; 來處理，
例如 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;RabbitMQ&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;feature-complete&lt;/li&gt;
&lt;li&gt;stable&lt;/li&gt;
&lt;li&gt;durable&lt;/li&gt;
&lt;li&gt;excellent choice for a production environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Redis&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;feature-complete&lt;/li&gt;
&lt;li&gt;more susceptible to data loss in the event of abrupt termination or power failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Database&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不推薦拿 database 來當 message queue&lt;/li&gt;
&lt;li&gt;但對於小需求可能就足夠&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Other Brokers&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Amazon SQS&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;IronMQ&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="http://celery.readthedocs.org/en/latest/getting-started/brokers/index.html"&gt;Broker Overview&lt;/a&gt;
: (2015-01-27)&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="22%"&gt;&lt;/col&gt;
&lt;col width="26%"&gt;&lt;/col&gt;
&lt;col width="22%"&gt;&lt;/col&gt;
&lt;col width="30%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Name&lt;/th&gt;
&lt;th class="head"&gt;Status&lt;/th&gt;
&lt;th class="head"&gt;Monitoring&lt;/th&gt;
&lt;th class="head"&gt;Remote Control&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;RabbitMQ&lt;/td&gt;
&lt;td&gt;Stable&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;Stable&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mongo DB&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Beanstalk&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Amazon SQS&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Couch DB&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Zookeeper&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Django DB&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SQLAlchemy&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Iron MQ&lt;/td&gt;
&lt;td&gt;3rd party&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;command on Arch Linux :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yaourt -S rabbitmq

sudo systemctl start rabbitmq
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="celery"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;安裝 Celery&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要裝 Celery 沒有什麼特別的，用 &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; 就可以裝，
通常再搭配上 virtualenv 做隔離&lt;/p&gt;
&lt;p&gt;command :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install celery
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Celery 裝完後要做的就是先建立一個 Celery instance (Celery application)，
這個 instance 會是所有要交給 Celery 完成的事的 entry-point，
所以要讓各 modules 都可以 import&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# proj/celery.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'proj'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amqp://localhost:5672'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c"&gt;# 沒寫 port 的話會自動找 5672 port&lt;/span&gt;
             &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amqp://'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'proj.tasks'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;    &lt;span class="c"&gt;# include 裡面是要跑的 tasks&lt;/span&gt;

&lt;span class="c"&gt;# Optional configuration, see the application user guide.&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CELERY_TASK_RESULT_EXPIRES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;寫完 instance 後，可以開始給 task 了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# proj/tasks.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;proj.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;xsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;啟動 Celery&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下來可以用 command 啟動 celery&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# celery -A ${app instance} worker -l info&lt;/span&gt;
&lt;span class="c"&gt;# 如果 -A 後面接的 folder 的話，會去找裡面的 celery.py&lt;/span&gt;
&lt;span class="c"&gt;# 等同於 "celery -A proj.celery worker -l info"&lt;/span&gt;
&lt;span class="c"&gt;# 如果在 proj 底下的 app instance 檔案叫 mycelery.py 的話&lt;/span&gt;
&lt;span class="c"&gt;# command 就變成 "celery -A proj.mycelery worker -l info"&lt;/span&gt;

celery -A proj worker -l info

&lt;span class="c"&gt;# More Help&lt;/span&gt;

celery worker --help

celery &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;啟動畫面 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 -------------- celery@linux-dv v3.1.17 (Cipater)
---- **** -----
--- * ***  * -- Linux-3.17.3-1-ARCH-x86_64-with-arch
-- * - **** ---
1. ** ---------- [config]
2. ** ---------- .&amp;gt; app:         __main__:0x7fc92f14e0f0
3. ** ---------- .&amp;gt; transport:   amqp://guest:**@localhost:5672//
4. ** ---------- .&amp;gt; results:     amqp://
5. *** --- * --- .&amp;gt; concurrency: 8 (prefork)
-- ******* ----
--- ***** ----- [queues]
  -------------- .&amp;gt; celery           exchange=celery(direct) key=celery


[tasks]
   . proj.task.add
   . proj.task.mul
   . proj.task.xsum
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="task"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;開始丟 Task&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;proj.tasks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;

&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c"&gt;# 直接 call 不換產生 task 給 Celery，而是會直接做&lt;/span&gt;
&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c"&gt;# 用 delay 會產生 task 交給 Celery，所以是 asynchronous 的&lt;/span&gt;
                    &lt;span class="c"&gt;# delay 其實 "apply_async" 的 shortcut&lt;/span&gt;
                    &lt;span class="c"&gt;# add.delay(4, 5) 等同於 add.apply_async((4, 5))&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# type(data) : celery.result.AsyncResult&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 取值，等超過 1 秒還沒完成就 timeout，會 raise TimeoutError&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 強制停止 task&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;強制停止 task (from outside) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery.task.control&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;revoke&lt;/span&gt;

&lt;span class="c"&gt;# 參數一是 task id，可以從 celery 的 log 中的得知&lt;/span&gt;
&lt;span class="n"&gt;revoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"69511b35-dcbc-4f93-9252-e428ed8114f5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;保存結果&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果要持續監控 tasks 的狀態的話，需要把 Celery 接上 backend 來儲存，
內建的 backend 支援有很多種，
例如: SQLAlchemy、Django ORM、Memcached、Redis、AMQP (RabbitMQ)、MongoDB 等，
或者是可以自己接新的 backend。&lt;/p&gt;
&lt;p&gt;backend 的設定在 "Celery" 的 &lt;tt class="docutils literal"&gt;backend&lt;/tt&gt; argument 或是 configuration module 裡的 &lt;tt class="docutils literal"&gt;CELERY_RESULT_BACKEND&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;AMQP 當 backend :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tasks'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amqp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amqp://'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis 當 backend :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tasks'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'redis://localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amqp://'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在用 delay 來丟 task 的時候，回傳的會是一個 &lt;tt class="docutils literal"&gt;AsyncResult&lt;/tt&gt; instance，
接著可以用 &lt;tt class="docutils literal"&gt;ready()&lt;/tt&gt; 這個 method 來確認完成了沒。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# AsyncResult&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;              &lt;span class="c"&gt;# True / False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外可以用 &lt;tt class="docutils literal"&gt;get()&lt;/tt&gt; method 來一段等待時間，超過時間還沒完成就 timeout，
最後就會拿到 TimeoutError 這個 exception。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c"&gt;# result value / TimeoutError exception / exception in task&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 task 裡 raise 了 exception， &lt;tt class="docutils literal"&gt;get()&lt;/tt&gt; 會再 re-raise exception，
如果不想要再 re-raise 的話，就在 get 裡加上 &lt;tt class="docutils literal"&gt;propagate=False&lt;/tt&gt; 這參數，
加上這參數後，如果 task 裡 raise 了 exception 的話，
"get()" 拿到的會是 exception instance，
而不是直接 re-raise exception，
另外有 exception 的時候可以在 &lt;tt class="docutils literal"&gt;traceback&lt;/tt&gt; 這個 attribute 裡看到原本的 traceback。&lt;/p&gt;
&lt;p&gt;假設現在寫了一種新的 task :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# proj/tasks.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;proj.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"just kidding"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著在別的地方來丟出 task :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;proj&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c"&gt;# exception and traceback&lt;/span&gt;
                &lt;span class="c"&gt;# ValueError: just kidding&lt;/span&gt;

&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propagate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# instance of ValueError&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c"&gt;# just kidding&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="c"&gt;# ValueError('just kidding',)&lt;/span&gt;
&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c"&gt;# True&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Configuration&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用預設的東西，不太別去調設定，其實就可以良好運作了。
但是 Celery 也有提供更多的設定讓使用者可以自己調整，&lt;/p&gt;
&lt;div class="section" id="serializer"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id18"&gt;serializer&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="celery-with-non-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Celery with non-Python&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/celery-users/K5i4r1rh4vU"&gt;https://groups.google.com/forum/#!topic/celery-users/K5i4r1rh4vU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="frequently-asked-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Celery 的 FAQ 的節錄 (2015-01-27)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://celery.readthedocs.org/en/latest/faq.html"&gt;Celery - Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="general"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;General&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id22"&gt;我該拿 Celery 做什麼 ?&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone/"&gt;Queue everything and delight everyone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;把東西放在 background 跑&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;例如 web request 盡可能地早點回傳給使用者，接著再把耗時的東西陸續傳給使用者，這會讓使用者感覺回應時間減少、performance 變好&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在 web request 結束後跑其他額外的工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;確保工作有完成 (asynchronously 執行，定期檢查、重試)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;定期執行的工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;分散式計算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;平行化執行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="misconceptions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;Misconceptions&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="celery-pickle"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id24"&gt;Celery 一定需要 pickle ?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;Celery 支援各種 serialization scheme，
目前內建支援的有 JSON、YAML、Pickle、msgpack，
每個 task 要用什麼 serialization scheme 是可以分別指定的，
預設使用 pickle 是因為可以傳送複雜的 Python objects，
如果需要跟不同語言溝通的話可以選擇其他適合的 format。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;Troubleshooting&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="waiting-tasks"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id26"&gt;清除所有 waiting tasks ?&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;celery -A proj purge
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;Results&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="task-id"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id28"&gt;取得某 task id 的東西&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="security"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;Security&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="pickle-security"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id30"&gt;用 pickle 會有 security 問題吧 ?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;是，用 pickle 會有安全疑慮，
基本上你要確保不該有 access 權限的地方不能 access 到你的 broker、databases、other services。&lt;/p&gt;
&lt;p&gt;可以設定 &lt;tt class="docutils literal"&gt;CELERY_TASK_SERIALIZER&lt;/tt&gt; 來改變 task messages 格式成 json 或 yaml 之類的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id31"&gt;我想要加密&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;對於支援 SSL 的 AMQP brokers 可以設定 &lt;tt class="docutils literal"&gt;BROKER_USE_SSL&lt;/tt&gt; 來加密&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tasks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;Tasks&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="call-task"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id33"&gt;用名稱來 call task ?&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tasks.add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id34"&gt;取得 task id ?&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@app.task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mytask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Running"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id35"&gt;我要跑連續的 task&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery.utils.log&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_task_logger&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_task_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ignore_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"log_result got: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c"&gt;# run task&lt;/span&gt;
&lt;span class="c"&gt;# 這邊注意到用的是 ".s" 而不是直接 call ".delay"&lt;/span&gt;
&lt;span class="c"&gt;# 詳細看 celery.canvas.Signature&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;log_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://celery.readthedocs.org/en/latest/index.html"&gt;Celery Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/celery/celery"&gt;GitHub - celery/celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.celeryproject.org/community/"&gt;Celery - Community Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://celery.readthedocs.org/en/latest/faq.html"&gt;Celery - Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.fullstackpython.com/task-queues.html"&gt;Full Stack Python - Task Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://queues.io/"&gt;Queues - Job queues, message queues and other queues. Almost all of them in one place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Message_broker"&gt;Wikipedia - Message broker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Celery_Task_Queue"&gt;Wikipedia - Celery Task Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol"&gt;Wikipedia - Advanced Message Queuing Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Distributed_computing"&gt;Wikipedia - Distributed computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Parallel_computing"&gt;Wikipedia - Parallel computing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Celery"></category><category term="RabbitMQ"></category></entry><entry><title>[PyPy] IO improvements</title><link href="/posts/2014/11/pypy-io-improvements/" rel="alternate"></link><updated>2014-11-06T00:15:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-06:posts/2014/11/pypy-io-improvements/</id><summary type="html">&lt;p&gt;剛剛看到 &lt;a class="reference external" href="http://morepypy.blogspot.tw/2014/11/pypy-io-improvements.html"&gt;PyPy status blog 上的新文章&lt;/a&gt; ，
以下是大概的內容&lt;/p&gt;
&lt;p&gt;PyPy 在 Warsaw (為波蘭的首都及最大的城市) 的 sprint 順利結束了 (wrapped up)，
有些 branch (gc_no_cleanup_nursery, gc-incminimark-pinning) 已經順利 merge 回 master (improve I/O &amp;amp; GC)&lt;/p&gt;
&lt;div class="section" id="gc-no-cleanup-nursery"&gt;
&lt;h2&gt;改變一 - gc_no_cleanup_nursery&lt;/h2&gt;
&lt;p&gt;PyPy GC 會把 new objects allocate 在 young object area (就是 GC 上慣稱的 &lt;strong&gt;nursery&lt;/strong&gt; 啦)，
每經過一個 minor collection 都要把 nursery 清理。簡單起見，GC 通常會把整個 nursery 清成 0。&lt;/p&gt;
&lt;p&gt;這樣作法對於 cache 會有 bad effects，因為你一次把一大塊 memory 清成 0，
而且把一些不需要清成 0 的資料也清了 (例如 large strings)。對於這個問題，
可以用 incremental nursery zeroing 來減輕，
但是 gc_no_cleanup_nursery 這個 branch 把 zeroing 整個拿掉，
因此提升了 &lt;strong&gt;string handling&lt;/strong&gt; 和 &lt;strong&gt;recursive code&lt;/strong&gt; 的效率 (因為 jitframes 也不再需要把 memory 清成 0)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gc-incminimark-pinning"&gt;
&lt;h2&gt;改變二 - gc-incminimark-pinning&lt;/h2&gt;
&lt;p&gt;隨著時間的過去 PyPy GC 會把 objects 在 memory 裡做移動，也就是說 memory address 會改變，
因此要把 pointer 傳給 C function 時，必須確保指到 objects 不會被 GC 移動。&lt;/p&gt;
&lt;p&gt;PyPy 2.4 以前，用 copying the data into or from a non-movable buffer 來解決，
顯然這沒有效率。這個 branch 使用了 &amp;quot;pinning&amp;quot; 的概念，
這讓程式可以知會 GC 某些 objects 在一段時間內不允許被移動。
這會讓 GC 的複雜度稍微上升，但是可以大幅提升 I/O performance。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pypy"></category></entry><entry><title>Python virtualenv upgrade</title><link href="/posts/2014/10/python-virtualenv-upgrade/" rel="alternate"></link><updated>2014-10-22T13:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-22:posts/2014/10/python-virtualenv-upgrade/</id><summary type="html">&lt;p&gt;If you want to upgrade main Python program in virtualenv,
then just run the creation command again.&lt;/p&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
virtualenv env
virtualenv env-pypy3 -p /usr/bin/pypy3
&lt;/pre&gt;
</summary><category term="Python"></category></entry><entry><title>RPython Intro.</title><link href="/posts/2014/10/RPython/" rel="alternate"></link><updated>2014-10-21T08:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-21:posts/2014/10/RPython/</id><summary type="html">&lt;p&gt;(not complete)&lt;/p&gt;
&lt;div class="section" id="what-s-rpython"&gt;
&lt;h2&gt;What's RPython&lt;/h2&gt;
&lt;p&gt;RPython is a subset of Python&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="83%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;RPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Static (not Manifest Typing, but Type Inference)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython"&gt;http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not all code in the PyPy repository is RPython.
For example, there are code generators (e.g. in rlib.parsing) that run at compile time and produce RPython code,
but are not RPython (frequently with a &amp;quot;NOT_RPYTHON&amp;quot; docstring, by the way).
Also, large parts of the standard library are written in full Python (mostly taken straight from CPython).&lt;/p&gt;
&lt;p&gt;To make a C code generator, code on interpreter level has to restrict to a subset of Python.
(Code on application level cat still use full Python)&lt;/p&gt;
&lt;p&gt;PyPy is &lt;strong&gt;not source-to-source translations&lt;/strong&gt;, it start translation from live &lt;strong&gt;python code objects&lt;/strong&gt; .&lt;/p&gt;
&lt;div class="section" id="type-inference-static-typing"&gt;
&lt;h3&gt;Type Inference &amp;amp; Static Typing&lt;/h3&gt;
&lt;p&gt;Types are not stated explicitly, they are infered, so RPython is static typing.&lt;/p&gt;
&lt;p&gt;Static typing doesn't mean the type has to be written out (that's &lt;strong&gt;manifest typing&lt;/strong&gt;),
it means each expression has a single type that never changes.&lt;/p&gt;
&lt;div class="section" id="analysis"&gt;
&lt;h4&gt;Analysis&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We cann't infer a (non-generic) type for a function like above,
the return type depends on arguments,
so the return type is determined by analysis the arguments (when the function is called)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rpythonic"&gt;
&lt;h3&gt;RPythonic&lt;/h3&gt;
&lt;div class="section" id="flow-restrictions"&gt;
&lt;h4&gt;Flow restrictions&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;variable&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;globals are considered constants (global instances don't have this restriction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control structures&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;definitions&lt;/td&gt;
&lt;td&gt;run-time definition of classes or functions is not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;generators&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;exceptions&lt;/td&gt;
&lt;td&gt;fully supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="object-restrictions"&gt;
&lt;h4&gt;Object restrictions&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;int, float, bool&lt;/td&gt;
&lt;td&gt;works&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;strings&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;no variable-length tuples&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;lists&lt;/td&gt;
&lt;td&gt;annotator can figure out most of the time that your list is fixed-size,
even when you use list comprehension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dicts&lt;/td&gt;
&lt;td&gt;unique key type only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;functions&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="integer-types"&gt;
&lt;h4&gt;Integer Types&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-a-python-vm-with-rpython"&gt;
&lt;h2&gt;build a Python VM with RPython&lt;/h2&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category></entry><entry><title>Try the jitviewer</title><link href="/posts/2014/10/jitviewer/" rel="alternate"></link><updated>2014-10-15T17:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-15:posts/2014/10/jitviewer/</id><summary type="html">&lt;div class="section" id="the-jitviewer"&gt;
&lt;h2&gt;the jitviewer&lt;/h2&gt;
&lt;div class="section" id="target"&gt;
&lt;h3&gt;target&lt;/h3&gt;
&lt;p&gt;analysis log from PyPy, and display Python bytecode &amp;amp; jit operations via the web&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;install&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;jitviewer is a PyPy2 only program now (it need rpython)&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv env-pypy -p /usr/bin/pypy
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;active the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;env-pypy/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;get the PyPy2 source code (for rpython)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://bitbucket.org/pypy/pypy/downloads/pypy-2.4.0-src.tar.bz2
tar -xvf pypy-2.4.0-src.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;install jitviewer&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install jitviewer
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;set the env&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYTHONPATH pypy-2.4.0-src
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;run the sample&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jitviewer.py --log log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-log-of-pypy"&gt;
&lt;h3&gt;create log of PyPy&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYPYLOG jit-log-opt,jit-backend-counts:myprogram.log
pypy -c your_program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="with-pypy3"&gt;
&lt;h3&gt;with PyPy3&lt;/h3&gt;
&lt;p&gt;As jitviewer is a PyPy2 only program now (2014-10-15),
you should run your program by PyPy3 and output the log,
then use jitviewer with PyPy2 to analysis the log.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expect-in-the-future"&gt;
&lt;h3&gt;expect in the future&lt;/h3&gt;
&lt;p&gt;There are something that I think it should have ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;PyPy3 compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jitviewer with PyPy3 is not working now,
the smaller part is the syntax in jitviewer (something like print function),
the bigger part is the rpython module ...&lt;/p&gt;
&lt;p&gt;At the moment, rpython has a lot of Python 2 only syntax (even in PyPy3 source code).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CPython compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means to remove the depenency of rpython.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h3&gt;note&lt;/h3&gt;
&lt;p&gt;The PyPy does not modify the output of Python bytecodes,
so the Python bytecodes output from CPython's dis module or PyPy's are the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category><category term="Python"></category></entry><entry><title>PTT - Python 版 - transpose 問題</title><link href="/posts/2014/10/ptt-python-transpose/" rel="alternate"></link><updated>2014-10-11T23:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/ptt-python-transpose/</id><summary type="html">&lt;p&gt;這篇在解 PTT Python 版上的一個問題 (#1KEG5cfG)&lt;/p&gt;
&lt;p&gt;基本上就是要做 transpose，但是資料長度不依，
所以就來試試囉 : &lt;a class="reference external" href="https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0"&gt;https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下都以 Python 3 為考量，而且以 zip 為出發點來解這個問題。&lt;/p&gt;
&lt;p&gt;如果是一個完整 n x m 的資料，
類似的工作可以用 zip 就完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在的狀況不是完整 n x m 的資料，而是長短不一的，
一種解是用 itertools 裡的 zip_longest，
參數是 iterables 還有 fillvalue (預設是 None)，
fillvalue 會拿來填滿資料短缺的部份。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;it&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 跟前面文章借測資&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊會把不夠的地方都補 None，
所以輸出會是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1, None)
(2, 2, 2, 2, 2, 2, None, None)
(3, 3, 3, 3, 3, 3, None, None)
(4, 4, 4, 4, 4, None, None, None)
(5, 5, 5, 5, None, None, None, None)
(6, 6, 6, None, None, None, None, None)
(7, 7, 7, None, None, None, None, None)
(8, 8, None, None, None, None, None, None)
(9, None, None, None, None, None, None, None)
&lt;/pre&gt;
&lt;p&gt;如果前面那種剛好符合需求，那就可以開心的拿來用了，
如果真的不想要看到多補的那些資料，就再把結果處理過。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterfalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此一來結果就變成:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1)
(2, 2, 2, 2, 2, 2)
(3, 3, 3, 3, 3, 3)
(4, 4, 4, 4, 4)
(5, 5, 5, 5)
(6, 6, 6)
(7, 7, 7)
(8, 8)
(9,)
&lt;/pre&gt;
&lt;p&gt;不過上面處理是以輸入 data 裡沒有 None 為前提的 XD
資料裡面可能有 None 的話就另外用別的值囉。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Python coding style</title><link href="/posts/2014/09/python-coding-style/" rel="alternate"></link><updated>2014-09-13T15:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-13:posts/2014/09/python-coding-style/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;不能不提的 &lt;a class="reference external" href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://google-styleguide.googlecode.com/svn/trunk/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Python"></category></entry><entry><title>About Stackless Python</title><link href="/posts/2014/02/stackless-python/" rel="alternate"></link><updated>2014-02-24T19:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-24:posts/2014/02/stackless-python/</id><summary type="html">&lt;p&gt;Stackless Python 背後的由來以及現況 ~&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/588958/what-are-the-drawbacks-of-stackless-python/590412#590412"&gt;聽故事去&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>Python - @wraps</title><link href="/posts/2014/02/python-wraps/" rel="alternate"></link><updated>2014-02-06T11:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/python-wraps/</id><summary type="html">&lt;p&gt;在這邊先假設看這篇文章的都知道 decorator&lt;/p&gt;
&lt;p&gt;在使用 decorator 時，若沒有經過處理，可能會造成 function 的 property 改變，例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   haha , this is in haha function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 func1 的 &lt;cite&gt;__name__&lt;/cite&gt; 和 &lt;cite&gt;__doc__&lt;/cite&gt; 都改變了，這通常不是我們想要的，還有可能在 debug 的時候造成麻煩&lt;/p&gt;
&lt;p&gt;因此 Python 有了 wraps 這個 decorator 去處理這個問題 (在 functools 裡)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   func1 , this is in func1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，加上了 &amp;#64;wraps 後維持了 function 本來的 property ~&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>初次使用 Pelican</title><link href="/posts/2014/02/pelican/" rel="alternate"></link><updated>2014-02-01T14:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-01:posts/2014/02/pelican/</id><summary type="html">&lt;p&gt;首先，什麼是 &lt;a class="reference external" href="http://docs.getpelican.com/en/"&gt;Pelican&lt;/a&gt; 呢？
Pelican 是個 Python 寫的靜態網站 generator，
你可以使用 Markdown, reStructuredText, AsciiDoc 等 markup language 作為撰寫的格式，
然後經由 Pelican 去生成靜態的網頁，經由這種方式，可以方便地使用你喜歡的文字編輯器去撰寫你的文章，
還可以結合 Version Control 去管理，
而由於生成的網頁是靜態的，所以可以放到 Github Pages 或者其他可以放置靜態網頁的地方去 Host，無疑是個很方便的模式。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Pelican 初步設定&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="theme"&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="disqus-support"&gt;
&lt;h2&gt;Disqus Support&lt;/h2&gt;
&lt;p&gt;Pelican 要支援 Disqus 非常簡單，首先只要在你的 Disqus 新增好你的網站，獲得你的 Disqul url 後，
只要在你的 pelicanconf.py 裡新增 DISQUS_SITENAME = 'your-disqus-url' 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;my-blog.disqus.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="Python"></category></entry></feed>