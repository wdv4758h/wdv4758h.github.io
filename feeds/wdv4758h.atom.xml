<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dv 名字很難念</title><link href="/" rel="alternate"></link><link href="/feeds/wdv4758h.atom.xml" rel="self"></link><id>/</id><updated>2015-02-04T00:33:00+08:00</updated><entry><title>PyPy - Tutorial for Brainfuck Interpreter</title><link href="/posts/2015/01/pypy-tutorial-for-brainfuck-interpreter/" rel="alternate"></link><updated>2015-02-04T00:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-31:posts/2015/01/pypy-tutorial-for-brainfuck-interpreter/</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 是一個 Dynamic Language，
官方提供了一個叫作 CPython 的 Interpreter 實作，
Interpreter 讓這類 Dynamic Language 不用事先 compile 過才可以執行，
只要寫好 script 後丟進去就可以跑，
以下有 Compiler 和 Interpreter 簡陋的流程圖 :&lt;/p&gt;
&lt;p&gt;Compiler :&lt;/p&gt;
&lt;img alt="Compiler" src="/img/compiler/compiler.png"/&gt;
&lt;p&gt;Interpreter :&lt;/p&gt;
&lt;img alt="Interpreter" src="/img/compiler/interpreter.png"/&gt;
&lt;p&gt;CPython 的實作只維持在很標準的方式，
相較之下並沒有花費大量的努力往更好的效能去調整，
一來應該是商業公司投資的資源量不夠，
再來應該是人力也不夠。&lt;/p&gt;
&lt;p&gt;雖然在 2009 年一度從 Google 發起一個叫作 Unladen Swallow 的 project，
目標是在 CPython 上利用 LLVM 做 just-in-time compiler，
不過最後在 2009 年底就漸漸中斷，目前只留下一個沒在開發的 branch。&lt;/p&gt;
&lt;p&gt;目前幾個針對效能的實作中，Cython 和 PyPy 是最成熟可行的選項，
Cython 是一個 Python 的 superset，
利用 Cython 提供的靜態型別宣告以及其他功能來修改程式，
最後經過 compile 後可以讓程式變得相當快速，
而 PyPy 則是一個 Drop-In Replacement 的實作，
PyPy 的效能來自於 JIT、更有效率 Garbage Collection、更有效率的 Data Structure。&lt;/p&gt;
&lt;p&gt;近期倒是有由 Dropbox 發起的新實作叫 &lt;a class="reference external" href="https://github.com/dropbox/pyston"&gt;Pysyon&lt;/a&gt; ，
目標是 based on LLVM 做一個有效率的 JIT 實作，
由於是個新專案，目前 release 只有到 0.2 版，
有 Dropbox 企業的金錢、人力資助下，
只要這專案持續下去，相信出來的效能是會蠻有看頭的，
不過專案目前還在早期開發中，就靜觀其變囉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tutorial"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Tutorial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PyPy 的官方 Blog 上，
在 2011 年發了兩篇由 Andrew Brown 撰寫用 PyPy 來實作 Brainfuck Interpreter 的 Tutorial，
時至今日，已經來到了 2015 年，中間也經過了許多 release，
接下來將會以 PyPy 2.5 為試驗目標，
更新一些舊 Tutorial 上需要改變的地方，並且和其他實作做初步比較。
(本練習的 code 會放在 GitHub &lt;a class="reference external" href="https://github.com/wdv4758h/brainfuck_bench"&gt;wdv4758h/brainfuck_bench&lt;/a&gt; )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2011/04/tutorial-writing-interpreter-with-pypy.html"&gt;Tutorial: Writing an Interpreter with PyPy, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2011/04/tutorial-part-2-adding-jit.html"&gt;Tutorial Part 2: Adding a JIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy 這個專案其實有兩個角色&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 的 Interpreter 實作&lt;/li&gt;
&lt;li&gt;撰寫 Dynamic Languages 的 Interpreter 的 framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Interpreter 的 framework" 是 PyPy 這 project 最特別的地方，
接下來這篇的重點將會放在 "撰寫 Interpreter"&lt;/p&gt;
&lt;p&gt;要做一個 Language 的 Interpreter 會需要以下事情&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;source code parser&lt;/li&gt;
&lt;li&gt;a bytecode interpretation loop&lt;/li&gt;
&lt;li&gt;lots of standard library code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對於稍微複雜一點點的語言，實作這些這會需要不少的時間，
更別提中間還得考慮 Memory 管理、Data Type 的實作，
會有許多的東西需要煩惱。&lt;/p&gt;
&lt;p&gt;如果可以用一個高階一點的語言來實作，那前面提到的事情就可以大幅化簡，
可以利用到一些高階語言的特色，
像是不用自己考慮記 Memory 管理、有好用的 Data Type 等，
但是講到這，想必有人就會想到這個實作的速度應該會 "很慢"，
在高階語言上在建一層來實作自己的語言，
速度會比原本可能就不快的高階語言還來的更慢，
所以 PyPy 就是來解決這部份的問題啦。&lt;/p&gt;
&lt;p&gt;利用 PyPy 來寫 Interpreter 的話，要用的是一個叫作 RPython 的語言，
看名字就知道跟 Python 有關，RPython 全名叫 Restricted Python，
是一個 Python 的 subset，既然是 subset 也就代表寫出來的還是一個 Python 程式，
但是 RPython 的特點是它的 type 是 inferable 的，
所以雖然一樣不寫出 type，但是可以做到 statically typed，
而 PyPy 的 RPython toolchain 會把 RPython 的 code 轉成 C code
再丟給 GCC 或 Clang 這類 C compiler 來 compile 成 native code，
藉此你可以獲得 native code 的 interpreter，所以會跑的比原本疊在 interpreter 上的 interpreter 來的快，
在這當中 PyPy 還可以幫你處理 Garbage Collecion 和 JIT。&lt;/p&gt;
&lt;p&gt;關於 RPython 的內容，有興趣的話可以看
2007 年 "&lt;strong&gt;RPython: a Step Towards Reconciling Dynamically and Statically Typed OO Languages&lt;/strong&gt;"
這篇 paper 裡的內容 (Bibtex key : AACM-DLS07)，
或是這邊有 &lt;a class="reference external" href="https://speakerdeck.com/antocuni/rpython-a-step-towards-reconciling-dynamically-and-statically-typed-object-oriented-languages"&gt;slide 版本&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;關於 PyPy 裡面用到的 JIT 技術可以看這篇 &lt;a class="reference external" href="https://speakerdeck.com/antocuni/pypy-jit-under-the-hood"&gt;(2012) PyPy JIT under the hood&lt;/a&gt; 當作入門。&lt;/p&gt;
&lt;div class="section" id="brainfuck-interpreter-begin"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Brainfuck Interpreter - Begin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Brainfuck spec :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%"&gt;&lt;/col&gt;
&lt;col width="75%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標加一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標減一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標指向的 byte 的值加一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;指標指向的 byte 的值減一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;輸出指標指向的 byte (ASCII)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;輸入到指標指向的 byte (ASCII)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;如果指標指向的 byte 為零，向後跳到對應的 ] 指令的下一指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;如果指標指向的 byte 不為零，向前跳到對應的 [ 指令的下一指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Brainfuck to C (assuming "ptr" is of type "unsigned char*") :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%"&gt;&lt;/col&gt;
&lt;col width="70%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;brainfuck command&lt;/th&gt;
&lt;th class="head"&gt;C equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;(Program Start)&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;infinitely&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;++*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="first last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外任何不在 Brainfuck spec 裡的東西都會被忽略&lt;/p&gt;
&lt;p&gt;以下我們開始做 Brainfuck Interpreter&lt;/p&gt;
&lt;p&gt;首先先做 parser 還有 main loop : (以下 code 大部份來自官方 Tutorial 的 example 1)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    因為 Brainfuck 的 code 就像是在 Tape 上操作一樣，&lt;/span&gt;
&lt;span class="sd"&gt;    所以有這個 class 來處理所有 action&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;devance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;tape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tape&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;devance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# print&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# read from stdin&lt;/span&gt;
            &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Skip forward to the matching ]&lt;/span&gt;
            &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;']'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Skip back to the matching [&lt;/span&gt;
            &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;bracket_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;leftstack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;leftstack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftstack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt;
                &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
                &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;main_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="pypy-translation"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id8"&gt;PyPy Translation&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在 PyPy repo 的 &lt;tt class="docutils literal"&gt;pypy/rpython/translator/goal/&lt;/tt&gt; 裡有一些範例，
其中 &lt;tt class="docutils literal"&gt;targetnopstandalone.py&lt;/tt&gt; 是簡單的 Hello World&lt;/p&gt;
&lt;p&gt;在這邊，我們需要一個叫做 &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; 的 function，
它會回傳另一個 function 作為 entry point，
PyPy 翻譯時會先找叫作 &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; 的 function，
call 它後從它回傳的 function 開始翻譯，
而最後產生的執行檔在執行時傳入的參數也是給這個回傳的 function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;main_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must supply a filename"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;entry_point&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此外還有一個部份需要修改，就是用到 sys module 裡的 stdin/stdout 的部份，
因為目前 RPython 並沒有支援 sys.stdin 和 sys.stdout
(雖然開發者說其實可以用 os.read 和 os.write 包裝) 所以需要改成用 os.read 和 os.write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c"&gt;# sys.stdout.write(chr(tape.get()))&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;    &lt;span class="c"&gt;# 1 for stdout&lt;/span&gt;

&lt;span class="c"&gt;# tape.set(ord(sys.stdin.read(1)))&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 0 for stdin, 1 for one byte&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來需要抓 PyPy 的 source code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg clone https://bitbucket.org/pypy/pypy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來就交給 PyPy 做轉換&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pypy/rpython/bin/rpython example2.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後就會看到許多 PyPy 吐出來的訊息，最後產生 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;example2-c&lt;/span&gt;&lt;/tt&gt; 這個執行檔，
這個轉換在我機器 (虛擬機) 上大約需要 4x ~ 5x 秒&lt;/p&gt;
&lt;p&gt;結果 :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="56%"&gt;&lt;/col&gt;
&lt;col width="44%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;290552 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Translation Time&lt;/td&gt;
&lt;td&gt;56.5 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%"&gt;&lt;/col&gt;
&lt;col width="59%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Test File&lt;/th&gt;
&lt;th class="head"&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;mandel.b&lt;/td&gt;
&lt;td&gt;68.61 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接著試跑一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./example2-c mandel.b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bash 裡有自己的 time command 可以看執行時間，
但是如果要更多資訊的話 (-v)，需要 GNU 版的 time command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pacman -S &lt;span class="nb"&gt;time&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;time&lt;/span&gt; -v ./example2-c mandel.b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是成功的利用 RPython 寫了 Brainfuck Interpreter 交給 PyPy 的 RPython toolchain 轉成 machine code ~&lt;/p&gt;
&lt;p&gt;複習一下，要可以給 PyPy 的 RPython toolchain 轉換需要以下條件&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;符合 RPython 語法、功能&lt;/li&gt;
&lt;li&gt;有 &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; 這個 function 回傳進入的 function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想看更多 translate 時可以開的優化參數的話可以看
&lt;a class="reference external" href="https://pypy.readthedocs.org/en/latest/config/commandline.html"&gt;這裡&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compile-with-clang"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id9"&gt;Compile with Clang&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參數 : &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--cc=clang&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-jobs"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id10"&gt;More Jobs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參數 : &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--make-jobs=8&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;(針對 C backend compile 時的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-j&lt;/span&gt;&lt;/tt&gt; 參數)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="garbage-collection"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id11"&gt;Garbage Collection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參數 : &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--gc=incminimark&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;目前可用的選項 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;boehm&lt;/li&gt;
&lt;li&gt;ref (default)&lt;/li&gt;
&lt;li&gt;semispace&lt;/li&gt;
&lt;li&gt;statistics&lt;/li&gt;
&lt;li&gt;generation&lt;/li&gt;
&lt;li&gt;hybrid&lt;/li&gt;
&lt;li&gt;minimark&lt;/li&gt;
&lt;li&gt;incminimark&lt;/li&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="brainfuck-interpreter-jit"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Brainfuck Interpreter - JIT&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前面試過了利用 PyPy 的 RPython toolchain 幫我們把 RPython code 轉成 C 去 compile，
接下來是利用 PyPy 幫我們做 JIT 出來，
感謝 PyPy 開發者的努力，我們要在 RPython 上做出 JIT 並不難，
因為 PyPy 的 JIT generator 有幾個目標 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;簡單 (基於原本的 Interpreter 上，只要做少許修改就能有 JIT)&lt;/li&gt;
&lt;li&gt;Maintainable (不會因為加了 JIT 就造成需要開另外的 project 分別 maintain)&lt;/li&gt;
&lt;li&gt;夠快 (雖然 JIT 是生出來的，但是也要速度也要夠快)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這目標下，就算是沒有大量人力、金錢贊助的語言，也能簡單做出不錯的 JIT，
下面就讓我們來嘗試一下 ~&lt;/p&gt;
&lt;p&gt;(詳細訊息請看 &lt;a class="reference external" href="http://rpython.readthedocs.org/en/latest/jit/index.html"&gt;RPython Documentation - JIT&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;要讓 PyPy 的 RPython toolchain 生出 JIT 需要提供一些資訊給它，
首先是告訴它哪些東西構成一個 execution frame，
在我們的 Brainfuck Interpreter 中並沒有真的 stack frame，
這問題就變成在執行一個 command 的時候，
哪些東西是不變的，哪些是會變的，
不變的被稱做 "&lt;strong&gt;green&lt;/strong&gt;"，會變的稱做 "&lt;strong&gt;red&lt;/strong&gt;"，
在我們的例子中，green 有 "pc"、"program"、"brakcet_map"，
red 有 "tape"，
接著就從 &lt;tt class="docutils literal"&gt;rpython.rlib.jit&lt;/tt&gt; 取得 &lt;tt class="docutils literal"&gt;JitDriver&lt;/tt&gt; 這個 metaclass 來生出我們需要要的 class&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpython.rlib.jit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JitDriver&lt;/span&gt;
&lt;span class="n"&gt;jitdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JitDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'program'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bracket_map'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'tape'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在 main loop 裡的 while 開頭 call jit_merge_point&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jitdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jit_merge_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來轉換的時候多加一個 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--opt=jit&lt;/span&gt;&lt;/tt&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pypy/rpython/bin/rpython --opt&lt;span class="o"&gt;=&lt;/span&gt;jit example3.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;總結需要做的事 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;import &lt;tt class="docutils literal"&gt;JitDriver&lt;/tt&gt; 進來，把 green 和 red 變數分好&lt;/li&gt;
&lt;li&gt;在 main loop 裡 while 一開始的地方 call &lt;tt class="docutils literal"&gt;jit_merge_point&lt;/tt&gt; 把變數傳進去&lt;/li&gt;
&lt;li&gt;translate 的時候加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--opt=jit&lt;/span&gt;&lt;/tt&gt; 參數&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;開 JIT 參數後，轉換的時間就變長，檔案也變大，但是跑下去就快很多&lt;/p&gt;
&lt;p&gt;結果 :&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="55%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;5954320 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Translation Time&lt;/td&gt;
&lt;td&gt;977.4 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%"&gt;&lt;/col&gt;
&lt;col width="59%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Test File&lt;/th&gt;
&lt;th class="head"&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;mandel.b&lt;/td&gt;
&lt;td&gt;27.64 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;沒改很多 code，只做了 import 和寫幾行去 call import 進來的東西，
時間從 68.61 s 變 27.64 s (不過還是很慢)&lt;/p&gt;
&lt;p&gt;附上轉換時的圖 XD&lt;/p&gt;
&lt;img alt="PyPy Translation" src="/img/pypy/pypy-translate.png"/&gt;
&lt;p&gt;註 :&lt;/p&gt;
&lt;p&gt;以前還需要寫一個 jitpolicy function，
但是現在已經是 default 了 (看 &lt;tt class="docutils literal"&gt;rpython/translator/driver.py&lt;/tt&gt;)，
所以不用寫&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;jitpolicy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpython.jit.codewriter.policy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JitPolicy&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JitPolicy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tracing-jit"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Tracing JIT&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在試完生出的 JIT 的速度後，
來了解一下它是怎麼運作的。&lt;/p&gt;
&lt;p&gt;Interpreter 執行的是我們寫的 interpreter code，
當發現 target laugange (Brainfuck) 寫的某段 code 很常跑時，
會把這部份標成 "Hot"，並且會做追蹤，當下一次進到這個循環的時候，
interpreter 會進入 tracing mode，把每個指令紀錄下來，循環結束後，
tracing mode 就停止，把追蹤紀錄丟給 optimizer，
接著丟給 assembler，產生 machine code 在之後執行時使用。&lt;/p&gt;
&lt;p&gt;基於對原本 interpreter 的一些 assumption，
生出的 machine code 通常會對很多地方進行優化，
因此生出的 machine code 會包含一些 guard 做驗證，
驗證失敗的話就退回去使用原本 interpreter 的 code。&lt;/p&gt;
&lt;div class="section" id="debug-and-trace-log"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt;Debug and Trace Log&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;雖然前面已經生出了不錯的結果，
但是總是會想要知道還能不能更好，
所以我們需要知道 JIT 做了些什麼事，
接下來就寫一個紀錄用的 function (參數是前面提過的 green 變數) 並傳給 jitdriver&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;jitdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JitDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;greens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'program'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bracket_map'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;reds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'tape'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;get_printable_location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_location&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用跟前面一樣的方式轉換 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pypy/rpython/bin/rpython --opt&lt;span class="o"&gt;=&lt;/span&gt;jit example4.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來跑程式的時候先加環境變數來把操作寫進 log&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PYPYLOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jit-log-opt:logfile ./example4-c test.b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這 log 可以看出有哪些部份被轉成了 machine code，
這在尋找有那邊可以優化的時候很有用&lt;/p&gt;
&lt;p&gt;每個 trace 的開頭都是像這樣&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[3c091099e7a4a7] {jit-log-opt-loop
&lt;/pre&gt;
&lt;p&gt;結尾都是像這樣&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[3c091099eae17d] jit-log-opt-loop}
&lt;/pre&gt;
&lt;p&gt;中間則是每次執行的操作，有些操作如果被優化掉的話就不會出現&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="optimize"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Optimize&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="elidable-old-purefunction"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id16"&gt;elidable (old : purefunction)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;由於每次的 loop 都會去 dictionary 裡查對應的位址，
但是其實這個 dictionary 裡的資訊是不會變的，
所以是可以直接編成 machine code 來加速，
但是對 PyPy 而言，那個 dictionary 有可能會變動，
但它不知道其實資料不會再改了，
所以我們可以告訴它同樣的輸入一定會有相同的輸出，
這可以用 PyPy 裡的 &lt;tt class="docutils literal"&gt;elidable&lt;/tt&gt; (以前是 &lt;tt class="docutils literal"&gt;purefunction&lt;/tt&gt;) decorator 做告知&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpython.rlib.jit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;elidable&lt;/span&gt;

&lt;span class="nd"&gt;@elidable&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_matching_bracket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bracket_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# 下面把查 bracket_map 的地方換掉&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來跟前面一樣做轉換，最後拿到的程式就比原本快很多&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="55%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;5852352 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Translation Time&lt;/td&gt;
&lt;td&gt;960.2 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%"&gt;&lt;/col&gt;
&lt;col width="59%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Test File&lt;/th&gt;
&lt;th class="head"&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;mandel.b&lt;/td&gt;
&lt;td&gt;9.58 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;結果從 27.64 s 降到了 9.58 s&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delay-output"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id17"&gt;Delay Output&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;對電腦來說 I/O 是很慢的，所以原本每個 byte 這樣讀讀寫寫也會有一點效能損失，
所以可以把直先存起來，之後再一次 output，
對於有大量 output 的 brainfuck 程式可能可以有一點點的幫助 (不多)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thetape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;devance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 for stdout&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 0 for stdin, 1 for one byte&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 1 for stdout&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zero"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id18"&gt;Zero&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Brainfuck code 裡面的 "[-]" 這樣的 loop 其實就是把目前指到的值歸零，
所以可以直接把它 assign 成零，不要再慢慢減了，
這樣換掉後可以有些許的提升&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compact"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id19"&gt;Compact&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Brainfuck 的 code 裡面常常會出現連續的 "+" 或 "-" 或 "&amp;lt;" 或 "&amp;gt;"，
但是這是可以一次完成的 (連續的 "&amp;gt;"、"&amp;lt;" 都可以和起來，"+"、"-" 也可以)，
不需要一個一個慢慢加、一個一個慢慢移，
所以如果把這部份處理掉，
做更有效率的計算，
可以獲得一部份的效能提升 ~&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;總結&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這個 Tutorial 做的只是簡單的 Brainfuck Interpreter，
離真正實用的語言的 interpreter 還有很大的差距，
但這邊可以讓我們看出在還沒化很多心力下去調整效能前，
例用 RPython 提供給我們的 toolchain 是可以簡單獲得不錯的效益的，
當然事實上是還有很多可以調整的空間，
不過已經讓我們跨出例用 RPython toolchain 的第一步了 ~&lt;/p&gt;
&lt;p&gt;這整個流程試下來，覺得有很多地方看到是可以做的更好的，
像是 RPython 可以做到更完善的支援，
這樣寫起來會更順利，
還有 toolchain 轉換的時間也可能再降低，
出來的 code size 可能也可以更小，
速度也可能更快，
背後 backend 也可能更多樣 (LLVM backend 好像碰到一些障礙要先幫 LLVM 上 patch 才能接起來？)，
諸如此類的問題，
總結一個問題就是 ... 缺錢，
就像是 StackOverflow 上 &lt;a class="reference external" href="http://stackoverflow.com/a/5172833"&gt;這篇&lt;/a&gt; 的答案一樣 ...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
What blocks Ruby, Python to get Javascript V8 speed?

Nothing.

Well, okay: money. (And time, people, resources, but if you have money, you can buy those.)
&lt;/pre&gt;
&lt;p&gt;不過 PyPy 做到現在也算是個有特色的專案了，
不僅僅是一個 Python 的實作，
而有了一個完整的 toolchain，
而且包含幫忙處理 GC 和 JIT，
這樣的專案和成熟度，
目前應該找不到相似對手
(從 &lt;a class="reference external" href="http://stackoverflow.com/a/12126562"&gt;這篇 StackOverflow 的回答&lt;/a&gt; 也可以看出還沒有類似的成熟專案)，
無論數年後這專案走向如何，
當中累積的技術都將為未來奠定基礎。&lt;/p&gt;
&lt;p&gt;最後複習整個流程 :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用 RPython 寫你的 Interpreter (需要有 target function)&lt;/li&gt;
&lt;li&gt;針對 main loop 把變數分類、call JIT 的 Driver class&lt;/li&gt;
&lt;li&gt;丟下去 toolchain 轉換&lt;/li&gt;
&lt;li&gt;效能還不夠時，找出不會變得地方用 "&lt;strong&gt;elidable&lt;/strong&gt;" decorator 做告知&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;額外紀錄&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="with-statement-in-rpython"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;with statement in RPython&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在寫 example 的時候，我開檔案那邊用的是 with statement 來幫我 handle，
結果發現丟下去轉換的時候不會過，去 PyPy irc 問了後，
發現其實 RPython 是有支援 with statement 的，
只是近期在 RPython 對檔案的部份有了 &lt;tt class="docutils literal"&gt;rpython/rlib/rfile.py&lt;/tt&gt; 這個實作，
在 RPython 裡 built-in 的 open() 回傳的是這個 RFile class 的 instance，
RPython 的 RFile 實作的是完整的 Python files 的 subset，
但目前沒有寫 &lt;tt class="docutils literal"&gt;__enter__&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;__exit__&lt;/tt&gt; methods，
過沒多久開發者 Armin Rigo 就送了
&lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/6657cb5a838dae0e9ad8453d6d412ef96ee155fa"&gt;一個 commit&lt;/a&gt;
補上了這部份，
于是乎，我可以繼續用 with statement 丟下去給 PyPy 轉了 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rpython-s-print-statement"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;RPython's print statement&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;RPython 裡面其實是有支援 print statement 的，
但是那大多只用於 debug，
多數情況都用 os.read / os.write，
不過其實可以用類似 "os.fdopen(1)" 的方法來拿到 stdout
(不過要在 RPython function 裡，而不是 module global)，
所以其實可以做到當我在 RPython 用 sys.stdout 時其實後面是 call rfile.py 裡面類似 getstdout() 的 function，
它會取得並且 cache 用 os.fdopen() 取得的 rfile。&lt;/p&gt;
&lt;p&gt;畢竟 RPython 是要拿來寫 interpreter 的，
有 os module 可以用來 I/O 其實也很夠，
只是如果有 sys.stdout / sys.stdin 的支援對很多地方會更方便些，
不過 PyPy team 應該也是缺錢缺人手，
這也不算是核心大問題，
暫時就先這樣吧，等看看哪天有人 contribute XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comple-with-clang"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Comple with Clang&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;雖然前面有提到可以用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--cc=clang&lt;/span&gt;&lt;/tt&gt; 來用 clang compile，
但其實我在試的時候有出現問題，
不過到 irc 上尋問後得到了解法，
就是加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--gcrootfinder=shadowstack&lt;/span&gt;&lt;/tt&gt; ，
以下是 Armin Rigo 的回覆&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I guess clang produces subtly different assembler that throws off "trackgcroot"
you can use --gcrootfinder=shadowstack
that will be slightly slower
(~10% and only before jit-compilation)
(trackgcroot is a hack used with --gcrootfinder=asmgcc, which is enabled only on Linux;
usually we have to fix it slightly for every new version of gcc...)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="if-elif"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;if ... elif&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在翻參數的時候，發現有個優化參數叫作 &lt;tt class="docutils literal"&gt;merge_if_blocks&lt;/tt&gt; ，
顧名思義就是把 Python 多層的 if ... elif block 合成 C 裡 switch 的形式，
可以看
&lt;a class="reference external" href="https://pypy.readthedocs.org/en/latest/config/translation.backendopt.merge_if_blocks.html"&gt;documentation 裡的說明&lt;/a&gt;
裡面有示意圖 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="string-replace"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;string replace&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;RPython 裡的 str 目前只支援 char 的 replace，
但是可以從 &lt;tt class="docutils literal"&gt;rpython/rlib/rstring.py&lt;/tt&gt; 裡找到 replace function 來替代，
&lt;tt class="docutils literal"&gt;from rpython.rlib.rstring import replace&lt;/tt&gt; ，
&lt;tt class="docutils literal"&gt;replace(string, old, new, max)&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;以下是 irc 上詢問得到得回答&lt;/p&gt;
&lt;pre class="literal-block"&gt;
   wdv| any reason that RPython's string replace only works for char args ?
 ronan| wdv: no very good reasons
 ronan| wdv: it would be a bit of work to implement and interpreters are usually better off writing their own
        replace at a low level
cfbolz| ronan, wdv: there is even a usable implementation, in rlib.rstring, I think
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="rpython-rlib-jit-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;rpython/rlib/jit.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由於在看前面的 &lt;tt class="docutils literal"&gt;rpython/rlib/rstring.py&lt;/tt&gt; 裡的 replace function 時，
發現上面有一些 decorator，其中一個是 &lt;tt class="docutils literal"&gt;jit.elidable&lt;/tt&gt; ，
覺得好奇就去翻了一下，不翻還好，
億翻發現就 tutorial 上寫的 &lt;tt class="docutils literal"&gt;purefunction&lt;/tt&gt; 已經 deprecated 了 XD，
現在要用剛剛看到的 "&lt;strong&gt;elidable&lt;/strong&gt;"，
趕快來改一下 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="embedding-pypy"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;Embedding PyPy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 irc 上問問題的時候，剛好看到前面有人問了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;libpypy-c.so&lt;/span&gt;&lt;/tt&gt; 是幹嘛用的，
原來是近期 PyPy 提供的功能，可以把 PyPy 嵌入其他地方，
&lt;a class="reference external" href="http://pypy.readthedocs.org/en/latest/embedding.html"&gt;官方 Document&lt;/a&gt;
有寫了簡單的 C 範例，include "PyPy.h" 後，
把在 C 程式裡的 Python code char array 丟進去執行，
甚至可以把丟參數給 Python 端的 function，
提供了未來把 PyPy 嵌入別的地方的機會 ~&lt;/p&gt;
&lt;p&gt;附上 irc log :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mstuchli| This is prolly a stupid question, but the libpypy-c.so is a new thing, correct? What's it for?
   fijal| mstuchli: for embedding
 arigato| mstuchli: for embedding pypy into some other program, more precisely; now the "pypy" executable is
          very small and just calls libpypy-c.so, but other programs may call it too
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;Wikipedia - Just-in-time compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tracing_just-in-time_compilation"&gt;Wikipedia - Tracing just-in-time compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Interpreter_%28computing%29"&gt;Wikipedia - Interpreter (computing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Unladen_Swallow"&gt;Wikipedia - Unladen Swallow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.slideshare.net/jserv/pypy-dynamic-language-compilation-framework"&gt;PyPy: Dynamic Language Compilation Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ryan-kelly-pypy-dot-js-what-how-why"&gt;Ryan Kelly: PyPy.js: What? How? Why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.aosabook.org/en/pypy.html"&gt;The Architecture of Open Source Applications - PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://calmerthanyouare.org/2015/01/07/optimizing-brainfuck.html"&gt;brainfuck optimization strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/002119.html"&gt;打造 Brainfuck 的 JIT compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/2011/04/_llvm_brainfuck.html"&gt;透過 LLVM 打造 Brainfuck JIT compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nayuki.io/page/optimizing-brainfuck-compiler"&gt;Optimizing brainfuck compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://copy.sh/brainfuck/"&gt;Brainfuck Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.stups.uni-duesseldorf.de/mediawiki/images/1/18/Pub-BoCuFiRi09_246.pdf"&gt;Tracing the Meta-Level: PyPy’s Tracing JIT Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cfbolz.de/"&gt;Carl Friedrich Bolz's site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/antocuni/rpython-a-step-towards-reconciling-dynamically-and-statically-typed-object-oriented-languages"&gt;RPython: a Step Towards Reconciling Dynamically and Statically Typed OO Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://llvm.org/pubs/2006-10-DLS-PyPy.pdf"&gt;PyPy's Approach to Virtual Machine Construction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category><category term="Brainfuck"></category><category term="Interpreter"></category><category term="JIT"></category><category term="GC"></category></entry><entry><title>Xorg with libinput as driver</title><link href="/posts/2015/01/xorg-with-libinput-as-driver/" rel="alternate"></link><updated>2015-01-24T21:21:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-24:posts/2015/01/xorg-with-libinput-as-driver/</id><summary type="html">&lt;div class="section" id="libinput"&gt;
&lt;h2&gt;libinput&lt;/h2&gt;
&lt;p&gt;這是 Xorg 上的 Input Stack :&lt;/p&gt;
&lt;img alt="Xorg Input Stack" src="/img/linux/x-input-stack.png" /&gt;
&lt;p&gt;這是 Wayland 上的 Input Stack :&lt;/p&gt;
&lt;img alt="Wayland Input Stack" src="/img/linux/wayland-input-stack.png" /&gt;
&lt;p&gt;Xorg 上的 Input Stack 有以下問題&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Features distributed across modules&lt;/li&gt;
&lt;li&gt;No communication between modules&lt;/li&gt;
&lt;li&gt;Impossible to test&lt;/li&gt;
&lt;li&gt;Lots of user-exposed options&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;driver feature 比對&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="42%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="26%" /&gt;
&lt;col width="16%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Feature&lt;/th&gt;
&lt;th class="head"&gt;evdev&lt;/th&gt;
&lt;th class="head"&gt;synaptics&lt;/th&gt;
&lt;th class="head"&gt;wacom&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Tapping&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MB emulation&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Gestures&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Finger Scrolling&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;some&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Calibration&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;no*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(* means server provides some calibration on top)&lt;/p&gt;
&lt;p&gt;為了讓 Wayland 的 compositor 能有共通的 input stack 實作，
所以獨立出了 libinput 來解決問題，
libinput 把很多內部的東西都處理掉 (藏起來)，
有著以下特色 :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multiple backends, but not exposed to the users&lt;/li&gt;
&lt;li&gt;struct udev* in, devices out&lt;/li&gt;
&lt;li&gt;only the configuration options that make sense&lt;/li&gt;
&lt;li&gt;everything else is handled based on the hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Touchpad features (normal):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;proper multitouch support&lt;/li&gt;
&lt;li&gt;top and bottom software button on clickpads&lt;/li&gt;
&lt;li&gt;two-finger scrolling&lt;/li&gt;
&lt;li&gt;1/2/3-finger tapping&lt;/li&gt;
&lt;li&gt;clickfinger on Apple touchpads&lt;/li&gt;
&lt;li&gt;palm detection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Touchpad features (exotic):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;re-routing of T440 software buttons through trackstick&lt;/li&gt;
&lt;li&gt;trackstick wheel emulation on T440&lt;/li&gt;
&lt;li&gt;smart disabling of the touchpad&lt;/li&gt;
&lt;li&gt;auto-scaling of the top software buttons&lt;/li&gt;
&lt;li&gt;disable touchpad while using the trackstick&lt;/li&gt;
&lt;li&gt;normalized pointer acceleration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A useful test suite&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tests multiple devices automatically&lt;/li&gt;
&lt;li&gt;uinput based&lt;/li&gt;
&lt;li&gt;tests without a compositor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Future plans (non-obvious):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;buttonbox&amp;quot; interface/gamepads&lt;/li&gt;
&lt;li&gt;raw/unaccelerated mouse input&lt;/li&gt;
&lt;li&gt;device identification system&lt;/li&gt;
&lt;li&gt;touchpad handwriting&lt;/li&gt;
&lt;li&gt;touchpad gestures&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;近況&lt;/h2&gt;
&lt;p&gt;libinput 最近發展的漸漸成熟，在 2015-01-15 釋出了 0.8 版，
Fedora 22 也要把 Xorg 底下的 input driver 換成使用 libinput (xf86-input-libinput)，
目前 xf86-input-libinput 在 AUR 裡，不過相信未來應該會進 official repositories。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="users"&gt;
&lt;h2&gt;Users&lt;/h2&gt;
&lt;p&gt;在 Arch Linux 上，要把 Xorg 底下的 input driver 換成 libinput 的話，
先去 AUR 裝 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xf86-input-libinput&lt;/span&gt;&lt;/tt&gt; ，
接著就可以在 Xorg 的設定檔裡選擇 &lt;tt class="docutils literal"&gt;libinput&lt;/tt&gt; 當 driver，
不過要注意的是，一些 Options 會不一樣，所以設定要調整過，
例如 :&lt;/p&gt;
&lt;p&gt;原本&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# xorg.conf.d/50-synaptics.conf

# Original

Section &amp;quot;InputClass&amp;quot;
  Identifier &amp;quot;enable tapping&amp;quot;
  MatchProduct &amp;quot;my touchpad&amp;quot;
  Driver &amp;quot;synaptics&amp;quot;
  Option &amp;quot;TapButton1&amp;quot; &amp;quot;1&amp;quot;
EndSection
&lt;/pre&gt;
&lt;p&gt;後來&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# xorg.conf.d/50-synaptics.conf

# libinput version

Section &amp;quot;InputClass&amp;quot;
  Identifier &amp;quot;enable tapping&amp;quot;
  MatchProduct &amp;quot;my touchpad&amp;quot;
  Driver &amp;quot;synaptics&amp;quot;
  Option &amp;quot;TapButton1&amp;quot; &amp;quot;1&amp;quot;
EndSection
&lt;/pre&gt;
&lt;p&gt;這邊注意到，之前是把 driver assign 給 device，接著設定 options，
後來 libinput 的版本是 match 到一個 driver。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.x.org/wiki/Events/XDC2014/XDC2014HuttererLibInput/xdc-2014.html"&gt;Consolidating the input stacks with libinput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=vxhdba4RS8s"&gt;XDC2014: Peter Hutterer - Consolidating the input stacks with libinput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fosdem.org/2015/schedule/event/libinput/"&gt;Replacing Xorg input-drivers with libinput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://who-t.blogspot.tw/2014/09/libinput-common-input-stack-for-wayland.html"&gt;libinput - a common input stack for Wayland compositors and X.Org drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://who-t.blogspot.tw/2015/01/xf86-input-libinput-compatibility-with.html"&gt;xf86-input-libinput compatibility with evdev and synaptics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fedoraproject.org/wiki/Changes/LibinputForXorg"&gt;Fedora - Changes/LibinputForXorg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wayland.freedesktop.org/libinput/doc/latest/pages.html"&gt;libinput documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cgit.freedesktop.org/xorg/driver/xf86-input-libinput/"&gt;Freedesktop.org - xf86-input-libinput&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Linux"></category><category term="Xorg"></category><category term="libinput"></category></entry><entry><title>[閱讀 &amp; 翻譯] Linux Input Ecosystem</title><link href="/posts/2015/01/linux-input-ecosystem/" rel="alternate"></link><updated>2015-01-21T13:12:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-21:posts/2015/01/linux-input-ecosystem/</id><summary type="html">&lt;p&gt;以下內容翻譯自 &lt;a class="reference external" href="https://joeshaw.org/2010/10/01/681/"&gt;linux input ecosystem (2010), by joe shaw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(還有我的幾張截圖 zzz)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;目前 Linux kernel 的 input system 分成兩大塊，一個是 &lt;tt class="docutils literal"&gt;device driver&lt;/tt&gt; ，另一個是 &lt;tt class="docutils literal"&gt;event driver&lt;/tt&gt; 。
device driver 顯然地就是跟硬體溝通，
device driver 裡，大部分的 USB devices 都是由 &lt;tt class="docutils literal"&gt;usbhid driver&lt;/tt&gt; 負責。
event driver 負責的則是把 device driver 產生的 events 丟到 userspace，
目前這邊主要是由 &lt;tt class="docutils literal"&gt;evdev&lt;/tt&gt; 來完成，
evdev 會建立 &lt;tt class="docutils literal"&gt;character devices&lt;/tt&gt; (通常叫 &lt;tt class="docutils literal"&gt;/dev/input/eventN&lt;/tt&gt;) 並且用 &lt;tt class="docutils literal"&gt;struct input_event&lt;/tt&gt; 來溝通。&lt;/p&gt;
&lt;p&gt;要取得 evdev 的 devices 和 events 的資訊可以使用 &lt;tt class="docutils literal"&gt;evtest&lt;/tt&gt;&lt;/p&gt;
&lt;img alt="evtest &amp;amp; touchpad" src="/img/linux/evtest.png" /&gt;
&lt;p&gt;當一個 device 接上的時候，kernel 會為 device 在 &lt;tt class="docutils literal"&gt;sysfs&lt;/tt&gt; 建立一個 entry，
並且產生 hotplug event，該 event 會由 &lt;tt class="docutils literal"&gt;udev&lt;/tt&gt; 處理 (套一些 policy 和額外的 properties)，
然後在 &lt;tt class="docutils literal"&gt;/dev&lt;/tt&gt; 建立 device node，input devices 會套用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/lib/udev/rules.d/60-persistent-input.rules&lt;/span&gt;&lt;/tt&gt; 裡的 rules，
其中還會 run &lt;tt class="docutils literal"&gt;/lib/udev/input_id&lt;/tt&gt; tool 來從 sysfs node 取得 device 的 capabilities，
並且在 udev database 中設好環境變數 (例如: ID_INPUT_KEYBOARD, ID_INPUT_TOUCHPAD)。&lt;/p&gt;
&lt;p&gt;除了前面提的東西外，
X 也有 udev config backend 會在 startup 以及 hotplug devices 進來時運作 (為不同 input devices 去 queries udev)。
X 會看不同的 &lt;tt class="docutils literal"&gt;ID_INPUT_*&lt;/tt&gt; properties 來判斷目前是哪個 device (keyboad, mouse, touchpad, joystick, ...)，
這些資訊可以用於 &lt;tt class="docutils literal"&gt;xorg.conf.d&lt;/tt&gt; 裡面的 InputClass sections
(例如: MatchIsPointer, MatchIsTouchpad, MatchIsJoystick, ...)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# xorg.conf.d/50-synaptics.conf

Section &amp;quot;InputClass&amp;quot;
    Identifier &amp;quot;touchpad catchall&amp;quot;
    Driver &amp;quot;synaptics&amp;quot;
    MatchIsTouchpad &amp;quot;on&amp;quot;
        Option &amp;quot;TapButton1&amp;quot;             &amp;quot;1&amp;quot;
        Option &amp;quot;TapButton2&amp;quot;             &amp;quot;2&amp;quot;
        Option &amp;quot;TapButton3&amp;quot;             &amp;quot;3&amp;quot;
        Option &amp;quot;VertEdgeScroll&amp;quot;         &amp;quot;1&amp;quot;
        Option &amp;quot;VertTwoFingerScroll&amp;quot;    &amp;quot;1&amp;quot;
        Option &amp;quot;VertScrollDelta&amp;quot;        &amp;quot;-58&amp;quot;
        Option &amp;quot;HorizEdgeScroll&amp;quot;        &amp;quot;1&amp;quot;
        Option &amp;quot;HorizTwoFingerScroll&amp;quot;   &amp;quot;1&amp;quot;
        Option &amp;quot;HorizScrollDelta&amp;quot;       &amp;quot;58&amp;quot;
        Option &amp;quot;CircularScrolling&amp;quot;      &amp;quot;1&amp;quot;
        Option &amp;quot;CircScrollTrigger&amp;quot;      &amp;quot;0&amp;quot;
        Option &amp;quot;CircScrollDelta&amp;quot;        &amp;quot;58&amp;quot;
        Option &amp;quot;EmulateTwoFingerMinZ&amp;quot;   &amp;quot;40&amp;quot;
        Option &amp;quot;EmulateTwoFingerMinW&amp;quot;   &amp;quot;8&amp;quot;
        Option &amp;quot;CoastingSpeed&amp;quot;          &amp;quot;0&amp;quot;
        Option &amp;quot;FingerLow&amp;quot;              &amp;quot;35&amp;quot;
        Option &amp;quot;FingerHigh&amp;quot;             &amp;quot;40&amp;quot;
EndSection
&lt;/pre&gt;
&lt;p&gt;Xorg 在 input devices 的 driver (handler) 的地方可以是 &lt;tt class="docutils literal"&gt;evdev&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;synaptics&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;joystick&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;Linux 在 evdev 裡有一個良好的 generic event interface，
所以只需要少量 drivers 就能跟硬體互動 (因為他們不走 device-specific protocols)。
而 Linux 上的 drivers 當中，幾乎全部都是走 evdev 的介面，包含前面列的三個。&lt;/p&gt;
&lt;p&gt;在 Linux 上，
Xorg 的 evdev driver (generic input driver) 提供基本的 keyboard、 mouse、lid switches、power switches 等功能，
經由 evdev 的 interface 到 /dev/input/eventN devices。&lt;/p&gt;
&lt;p&gt;至於 synaptics driver 呢，其實也是走 evdev 的 interface 來跟 kernel 溝通的。
在 Linux 上它不能跟硬體直接溝通，也不能弄 Synaptics™ hardware-specific。
synaptics driver 只是個從 evdev 分出去的 driver，加上了一些 touchpad 硬體要有的 features (例如: two-finger scrolling)，
在 Linux 上它比較像是個 &amp;quot;touchpad&amp;quot; module，在其他 non-Linux 平台上則可以使用 Synaptics protocol。&lt;/p&gt;
&lt;p&gt;而 joystick driver 的情況跟 synaptics driver 類似，走的也是 evdev 的 interface，
而不是 device-specific protocol。&lt;/p&gt;
&lt;p&gt;X 的概念只包含了 keyboards 和 pointers，而 pointers 則包含了 mice、touchpads、joysticks、wacom tablets ... etc。
X 另外還有 &lt;strong&gt;core&lt;/strong&gt; keyboard 和 pointer 的概念，預設所有的 device 都是送 core events 到 applications 的，
但是可以把特定 devices 設為 non-core。&lt;/p&gt;
&lt;p&gt;如果要收 non-core devices 的 events 的話，需要使用 XInput 或 XInput2 extensions。
XInput 提供 core-like 的 events (例如: DeviceMotionNotify、DeviceButtonPress)，
所以跟 core events 用起來類似，但是 setup 方式和大部分的 X extensions 不一樣。&lt;/p&gt;
</summary><category term="linux"></category><category term="udev"></category><category term="evdev"></category><category term="device"></category><category term="sysfs"></category><category term="Xorg"></category><category term="synaptics"></category></entry><entry><title>libinput 0.8.0</title><link href="/posts/2015/01/libinput-0.8.0/" rel="alternate"></link><updated>2015-01-15T23:31:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-15:posts/2015/01/libinput-0.8.0/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lists.freedesktop.org/archives/wayland-devel/2015-January/019383.html"&gt;[ANNOUNCE] libinput 0.8.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剛剛在讀 RSS 的時候看到 libinput 有新 release 了，
新的 release 改進的部份主要在於滾動和觸空版支援&lt;/p&gt;
</summary><category term="libinput"></category></entry><entry><title>C++11 - override &amp; final</title><link href="/posts/2015/01/cpp11-override-and-final/" rel="alternate"></link><updated>2015-01-14T02:43:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-14:posts/2015/01/cpp11-override-and-final/</id><summary type="html">&lt;p&gt;C++11 在繼承的地方多了 &lt;tt class="docutils literal"&gt;override&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;final&lt;/tt&gt; 兩個 keyword 可以用&lt;/p&gt;
&lt;p&gt;在解釋之前先回顧 C++ 的繼承&lt;/p&gt;
&lt;div class="section" id="c"&gt;
&lt;h2&gt;C++ 繼承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;class 定義&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;public&lt;/tt&gt; : 大家都可看&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; : 只有子孫能看&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;private&lt;/tt&gt; : 只有自己能看&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;class 繼承&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;public&lt;/tt&gt; : 大家都知道父母和小孩的關係&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; : 只有子孫知道自己與祖先的關係&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;private&lt;/tt&gt; : 只有自己知道跟父母的關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上的 priority 就是 &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; &amp;gt; &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; &amp;gt; &lt;tt class="docutils literal"&gt;public&lt;/tt&gt; 所以在繼承的時候 priority 大的會掩蓋 priorty 小的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// x is public&lt;/span&gt;
    &lt;span class="c1"&gt;// y is protected&lt;/span&gt;
    &lt;span class="c1"&gt;// z is not accessible from B&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// x is protected&lt;/span&gt;
    &lt;span class="c1"&gt;// y is protected&lt;/span&gt;
    &lt;span class="c1"&gt;// z is not accessible from C&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// x is private&lt;/span&gt;
    &lt;span class="c1"&gt;// y is private&lt;/span&gt;
    &lt;span class="c1"&gt;// z is not accessible from D&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="virutal-function"&gt;
&lt;h2&gt;Virutal Function&lt;/h2&gt;
&lt;p&gt;C++ 裡提供了一個 keyword 叫 &lt;tt class="docutils literal"&gt;virtual&lt;/tt&gt; ，
使用 virtual 關鍵字的 method 會是 Late binding (dynamic binding)，
在 runtime 的時候才會決定要 call 的 function 位址&lt;/p&gt;
&lt;p&gt;例如 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;func1 in A&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;func2 in A&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;func1 in B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;func2 in B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func1 in A&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func2 in A&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func1 in B&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func2 in B&lt;/span&gt;

    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func1 in A&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func2 in B&lt;/span&gt;

    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func1 in A&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func2 in A&lt;/span&gt;

    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func1 in A&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// func2 in B&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊可以看到，把 class B 的變數用 class A 去解讀的時候，func1 是呼叫到 class A 所定義的，
而 func2 是呼叫到 class B 所定義的，會有這樣的差別是因為 func1 沒有用 &lt;tt class="docutils literal"&gt;virtual&lt;/tt&gt; ，
但是 func2 有用 &lt;tt class="docutils literal"&gt;virtual&lt;/tt&gt; ，
base class 有寫 virtual 的 function 在被 call 到時會去 &lt;tt class="docutils literal"&gt;virtual table&lt;/tt&gt; 裡面找真正要 call 的 function 的位址，
也才能有 late binding 的效果，沒有寫 virtual 的 function 依然會是 early binding (static binding)。&lt;/p&gt;
&lt;p&gt;在 static binding 的情況下，ptr 要 call 的 function 的位址在 compile time 就決定了，
所以 func1 一直都會 call 到 class A 的版本。而在 late binding 的情況下，
要 call 的 function 的位址在 runtime 決定，會從 &lt;tt class="docutils literal"&gt;virtual table&lt;/tt&gt; 中找到對應的 function 的位址，
所以可以 call 到各自的版本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c-11-override-final"&gt;
&lt;h2&gt;C++11 - override &amp;amp; final&lt;/h2&gt;
&lt;div class="section" id="override"&gt;
&lt;h3&gt;override&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;override&lt;/tt&gt; 是提供給繼承的 class 用的，目的是確保 function 有 override 到 base class 的 virtual funcion，
標上 &lt;tt class="docutils literal"&gt;override&lt;/tt&gt; 後，compiler 可以在 compile time 的時候檢查是否真的有 override，
可以避免不小心沒寫好造成該 override 的 function 沒有 override 到。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Error: B::foo does not override A::foo&lt;/span&gt;
                                &lt;span class="c1"&gt;// (signature mismatch)&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// OK: B::foo overrides A::foo&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// Error: A::bar is not virtual&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final"&gt;
&lt;h3&gt;final&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;final&lt;/tt&gt; 是提供給 class 或 base class 的 virtual function 使用的，
標上 &lt;tt class="docutils literal"&gt;final&lt;/tt&gt; 的 class 不能再被繼承，標上 &lt;tt class="docutils literal"&gt;final&lt;/tt&gt; 的 virutal function 不能再被 override。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// A::foo is final&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// Error: non-virtual function cannot be final&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;   &lt;span class="c1"&gt;// struct B is final&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;     &lt;span class="c1"&gt;// Error: foo cannot be overridden as it&amp;#39;s final in A&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;         &lt;span class="c1"&gt;// Error: B is final&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/language/override"&gt;override specifier (since C++11)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/language/final"&gt;final specifier (since C++11)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kheresy.wordpress.com/2014/10/03/override-and-final-in-cpp-11/"&gt;比較安全的 C++ 虛擬函式寫法：C++11 override 與 final&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Late_binding"&gt;Wikipedia - Late binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance"&gt;C++ - Difference between private, public, and protected inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="C++"></category></entry><entry><title>Vim - 快快貼</title><link href="/posts/2015/01/vim-fast-paste/" rel="alternate"></link><updated>2015-01-07T21:38:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-07:posts/2015/01/vim-fast-paste/</id><summary type="html">&lt;p&gt;我之前在貼上大量文字進 Vim 的時候覺得有點慢，所以搜尋過如何更快速的貼上，
不過也只找到 paste mode 可以用 (應該是當時沒有打到重要的關鍵字)&lt;/p&gt;
&lt;p&gt;paste mode 預設就有 toggle key 可以設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;quot; use &amp;#39;&amp;lt;leader&amp;gt;p&amp;#39; to toggle paste mode&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;pastetoggle&lt;/span&gt;&lt;span class="p"&gt;=&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或是手動用 &lt;tt class="docutils literal"&gt;:set paste&lt;/tt&gt; 來進入 paste mode， &lt;tt class="docutils literal"&gt;:set nopaste&lt;/tt&gt; 來離開 paste mode&lt;/p&gt;
&lt;p&gt;今天終於找到了我想要的解法，直接從 system clipboard 拿資料，
而不是由 terminal 去慢慢模擬輸入 ...&lt;/p&gt;
&lt;p&gt;這邊要用到 Vim 裡的 register，
在 Vim 裡面對應到外面 Linux 的 clipboard 的 register 是 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; ，
所以可以從這裡面快速的拿到資料&lt;/p&gt;
&lt;div class="section" id="insert-mode"&gt;
&lt;h2&gt;方法 1 : 在 insert mode 快速貼上&lt;/h2&gt;
&lt;p&gt;在 insert mode 裡面可以用 &lt;tt class="docutils literal"&gt;Ctrl+R&lt;/tt&gt; 來 access Vim 的 register，
內容會直接輸入，所以可以使用 &lt;tt class="docutils literal"&gt;Ctrl+R&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 來快速的輸入 clipboard 裡的東西&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="normal-mode"&gt;
&lt;h2&gt;方法 2 : 在 normal mode 快速貼上&lt;/h2&gt;
&lt;p&gt;在 normal mode 裡面可以用 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; 來 access Vim 的 register，
所以可以使用 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;p&lt;/tt&gt; 來快速的貼上 clipboard 裡的東西&lt;/p&gt;
&lt;p&gt;方便起見，當然還是 map 到某個 key 上面，這樣就可以快速的使用了，
目前我是把自己之前用在 paste mode toggle 的 &lt;tt class="docutils literal"&gt;&amp;lt;leader&amp;gt;p&lt;/tt&gt; map 成了 &lt;tt class="docutils literal"&gt;&amp;quot;+p&lt;/tt&gt; ，
想說我如果想切到 paste mode 通常也就是我要從外面貼東西進來，
乾脆就直接換成這個快速貼上 ~&lt;/p&gt;
&lt;p&gt;先使用一陣子看看，如果真的不習慣再換囉 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-system-clipboard"&gt;
&lt;h2&gt;其他應用 - 從 Vim 裡複製到 system clipboard&lt;/h2&gt;
&lt;p&gt;在 visual mode 或是 visual block mode 裡面可以也可以用 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; 來 access Vim 的 register，
所以可以先選取想要複製的區塊，
接著用 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; 來複製資料到 clipboard 裡 ~~~&lt;/p&gt;
&lt;p&gt;然後就可以在其他程式裡快樂的貼上了 ~ ya ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-registers"&gt;
&lt;h2&gt;其他 Vim registers&lt;/h2&gt;
&lt;p&gt;想知道其他更多 Vim 裡的 registers 的資料可以下 &lt;tt class="docutils literal"&gt;:reg&lt;/tt&gt; ，
更多資訊可以 Vim 的 manual&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/3997078/how-to-paste-text-into-vim-command-line"&gt;StackOverflow - How to paste text into Vim command line&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;回應很豐富&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://vim.wikia.com/wiki/In_line_copy_and_paste_to_system_clipboard"&gt;Vim Tips wiki - In line copy and paste to system clipboard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard"&gt;Vim Tips wiki - Accessing the system clipboard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="vim"></category></entry><entry><title>virtualenv 版本號異動</title><link href="/posts/2015/01/virtualenv-version-change/" rel="alternate"></link><updated>2015-01-04T16:22:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-04:posts/2015/01/virtualenv-version-change/</id><summary type="html">&lt;p&gt;剛剛要做系統更新的時候，
發現我這邊 Arch Linux 機器上的 virtualenv 要從 1.11.6-2 升到 12.0.5-1，
一看到覺得這版本會不會跳太大了 XD，
去翻了 &lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/changes.html"&gt;virtualenv - changes&lt;/a&gt;
才知道在 12 月底的時候有做過版本號規則的改動 XD，
從 1.11 變 12.0 www&lt;/p&gt;
</summary><category term="python"></category><category term="virtualenv"></category></entry><entry><title>Vim Plugin - rogue</title><link href="/posts/2015/01/vim-plugin-rogue/" rel="alternate"></link><updated>2015-01-01T21:32:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-01:posts/2015/01/vim-plugin-rogue/</id><summary type="html">&lt;p&gt;剛好看到一個 Vim 的 Plugin 叫作 &lt;tt class="docutils literal"&gt;rogue&lt;/tt&gt;
(GitHub repo 在這裡 &lt;a class="reference external" href="https://github.com/katono/rogue.vim"&gt;katono/rogue.vim&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;如果看到 &lt;strong&gt;rogue&lt;/strong&gt; 這個詞會有反應的，
極有可能知道 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Roguelike"&gt;roguelike&lt;/a&gt; 這個遊戲種類，
沒錯這個 Plugin 指的就是這種類的起源 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rogue_%28video_game%29"&gt;Rogue&lt;/a&gt; 這款遊戲，
這遊戲以及其衍生出的 &lt;strong&gt;roguelike&lt;/strong&gt; 的遊戲一直以來都包含著好玩的遊戲的重要要素 ~，
如果對於 roguelike 不熟悉也沒關係，
可以先看看這篇豐富的介紹文 &lt;a class="reference external" href="http://pre-sence.com/archives/roguelike-dossier"&gt;Roguelike 到底是啥&lt;/a&gt;
(其中的發展還涉及了當時的 Unix 以及 BSD 還有 curses 這個 library)，
roguelike 遊戲的元素到現在都還是處處可見，
早期知名的像是 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/NetHack"&gt;NetHack&lt;/a&gt;
(介紹文 : Jedi - &lt;a class="reference external" href="http://jedi.org/blog/archives/003676.html"&gt;如果你一生只打算做一件事的話，玩 NetHack&lt;/a&gt; )，
最近很紅的像是 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/The_Binding_of_Isaac_%28video_game%29"&gt;The Binding Of Issac&lt;/a&gt; ，
而這 Vim Plugin 的作者則是把 rogue 這款遊戲 (Clone 版本) porting 到 Vim 上了 ...&lt;/p&gt;
&lt;p&gt;用 Vundle 把 Plugin 裝完後只要在 Vim 裡下 &lt;tt class="docutils literal"&gt;:Rogue&lt;/tt&gt; 就可以開始遊戲 ...&lt;/p&gt;
&lt;p&gt;雖然這對我使用 Vim 來編輯一點幫助也沒有 XD，
但是看到有人對這遊戲如此熱愛就讓我想紀錄一下 ~&lt;/p&gt;
</summary><category term="vim"></category></entry><entry><title>[文章閱讀] 9 個 GIF 動畫，看懂 Web 演化史</title><link href="/posts/2015/01/web-history-9-gifs/" rel="alternate"></link><updated>2015-01-01T16:17:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2015-01-01:posts/2015/01/web-history-9-gifs/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://adon988.logdown.com/posts/246175-9-animation-read-the-web-history"&gt;9 個 GIF 動畫，看懂 Web 演化史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="www.fastcodesign.com/3039402/the-history-of-web-design-explained-in-9-gifs"&gt;原文 : The History Of Web Design Explained In 9 GIFs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.froont.com/brief-history-of-web-design-for-designers/"&gt;GIFs 來源 : A brief history of web design for designers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="web"></category><category term="gif"></category></entry><entry><title>D-Bus</title><link href="/posts/2014/12/d-bus/" rel="alternate"></link><updated>2014-12-27T01:45:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-27:posts/2014/12/d-bus/</id><summary type="html">&lt;div class="section" id="basic-linux-ipc"&gt;
&lt;h2&gt;Basic Linux IPC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Inter-process_communication"&gt;Wikipedia - Inter-process communication&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=8hxb0kwnzGI"&gt;[Linux.conf.au 2013] - An Introduction to Linux IPC Facilities&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/conf/lca2013/IPC_Overview-LCA-2013-printable.pdf"&gt;[Linux.conf.au 2013] - An Introduction to Linux IPC Facilities - slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;sockets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;FIFOs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;shared memory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="linux-ipc-communication" src="/img/linux/linux-ipc-communication.png" /&gt;
&lt;img alt="linux-ipc-synchronization" src="/img/linux/linux-ipc-synchronization.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="d-bus"&gt;
&lt;h2&gt;D-Bus&lt;/h2&gt;
&lt;p&gt;D-Bus is a message bus system for inter-process communication (&lt;tt class="docutils literal"&gt;IPC&lt;/tt&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/D-Bus"&gt;D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/D-Bus"&gt;Wikipedia - D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/IntroductionToDBus/"&gt;Freedesktop - Introduction to D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxfromscratch.org/blfs/view/svn/general/dbus.html"&gt;Linux From Scratch - D-Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dbus.freedesktop.org/doc/dbus-specification.html"&gt;D-Bus Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D-Bus is enabled automatically when using systemd because dbus is a dependency of systemd.&lt;/p&gt;
&lt;div class="section" id="what-s-d-bus"&gt;
&lt;h3&gt;What's D-Bus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;a powerful IPC system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;the closest thing to a standard in this area as can be found on Linux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;provides a nice method-call transaction mechanism&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;has fundamental inefficiencies of the user-space implementation&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;well suited to control tasks&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;works well to tell a sound server to change the volume&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;less so for anything that has to carry significant amounts of data&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;one would not want to try to send the actual audio data over the bus&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In D-Bus a call-return message requires &lt;tt class="docutils literal"&gt;10 message copies&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;4 message validations&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;4 context switches&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;D-Bus has &lt;tt class="docutils literal"&gt;no timestamps on messages&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;not available at early boot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;We need a better implementation&lt;/strong&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;kdbus&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="d-bus-architecture"&gt;
&lt;h3&gt;D-Bus - Architecture&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;libdbus&lt;/li&gt;
&lt;li&gt;dbus-daemon&lt;/li&gt;
&lt;li&gt;wrapper libraries based on particular application frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interesting :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In 2013 the systemd project rewrote libdbus in an effort to simplify the code, but it turned out to significantly increase the performance of D-Bus as well.
In preliminary benchmarks, BMW found that the systemd D-Bus library increased performance by 360%.
&lt;/pre&gt;
&lt;img alt="linux desktop architecture" src="/img/linux/dbus-architectural.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kdbus"&gt;
&lt;h2&gt;kdbus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=NgR6d54blrU"&gt;D-Bus in the kernel [linux.conf.au 2014]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://events.linuxfoundation.org/sites/events/files/slides/linuxconjapan2014.pdf"&gt;D-Bus in the Kernel - slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://lwn.net/Articles/551969/"&gt;ALS: Linux interprocess communication and kdbus (May 30, 2013)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://lwn.net/Articles/580194/"&gt;The unveiling of kdbus (Jan 13, 2014)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Linux Kernel only have primitives IPC : sockets, FIFOs, and shared memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;kdbus is a &lt;strong&gt;in-kernel implementation of D-Bus&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;can carry large amounts of data&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;even used for gigabyte-sized message streams&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;have zero-copy message passing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;worst case : &lt;tt class="docutils literal"&gt;2 copy operations&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;2 validations&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;2 context switches&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;all messages carry timestamps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;full credential information (user ID, process ID, SELinux label, control group information, capabilities, and much more) is passed with each message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;always available to the system (no need to wait for the D-Bus daemon to be started)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Linux security modules can hook into it directly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;various race conditions have been fixed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;API has simplified&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Kdbus is implemented as a &lt;tt class="docutils literal"&gt;character device&lt;/tt&gt; in the kernel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;signal broadcasting mechanism has been rewritten to use Bloom filters to select recipients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There is a user-space proxy server that can be used by older code that has not been rewritten to use the new API, so everything should just work on a kdbus-enabled system with no code changes required.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;the new &lt;tt class="docutils literal"&gt;memfd&lt;/tt&gt; syscall was merged into Linux kernel 3.17&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;memfd&lt;/tt&gt; is a mechanism similar to Android's &lt;tt class="docutils literal"&gt;ashmem&lt;/tt&gt; that allows &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zero-copy&lt;/span&gt;&lt;/tt&gt; message passing in KDBUS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Android &amp;quot;ashmem&amp;quot; subsystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Android Binder&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://lwn.net/Articles/619068/"&gt;Kdbus meets linux-kernel (Nov 4, 2014)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://gentooexperimental.org/~patrick/weblog/archives/2014-11.html#e2014-11-23T09_26_01.txt"&gt;D-Bus, FreeDesktop, and lots of madness&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://news.ycombinator.com/item?id=8648437"&gt;Hacker News - D-Bus, FreeDesktop, and lots of madness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.kroah.com/log/blog/2014/01/15/kdbus-details/"&gt;Kdbus Details - Greg Kroah-Hartman&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Binder vs. kdbus&lt;/li&gt;
&lt;li&gt;Binder is bound to the CPU, D-Bus (and hence kdbus), is bound to RAM&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://code.google.com/p/d-bus/source/browse/kdbus.txt"&gt;kdbus.txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="d-bus"></category><category term="ipc"></category><category term="kdbus"></category></entry><entry><title>Notification things</title><link href="/posts/2014/12/notification-things/" rel="alternate"></link><updated>2014-12-27T01:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-26:posts/2014/12/notification-things/</id><summary type="html">&lt;div class="section" id="linux"&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Desktop_notifications"&gt;Arch Wiki - Desktop Notifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="libnotify"&gt;
&lt;h3&gt;Libnotify&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.archlinux.org/packages/extra/x86_64/libnotify/"&gt;Arch Package - libnotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;desktop independent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;need a notification server&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="dependencies"&gt;
&lt;h4&gt;Dependencies&lt;/h4&gt;
&lt;div class="section" id="gdk-pixbuf2"&gt;
&lt;h5&gt;gdk-pixbuf2&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/GDK"&gt;Wikipedia - GDK&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;GIMP Drawing Kit&lt;/li&gt;
&lt;li&gt;GDK was originally developed on the X Window System for the GIMP&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GdkPixbuf is a toolkit for image loading and pixel buffer manipulation.&lt;/p&gt;
&lt;p&gt;In GTK+ version 2.22 from 2010-09-23 GdkPixbuf was split off from GDK into a separate package in preparation for the transition to GTK+ 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notification-servers"&gt;
&lt;h3&gt;Notification servers&lt;/h3&gt;
&lt;div class="section" id="bult-in"&gt;
&lt;h4&gt;Bult-in&lt;/h4&gt;
&lt;p&gt;The following desktop environments use their own implementations to display notifications, and you cannot replace them.
Their notification servers are started automatically on login to receive notifications from applications via &lt;tt class="docutils literal"&gt;DBus&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cinnamon&lt;/li&gt;
&lt;li&gt;Enlightenment&lt;/li&gt;
&lt;li&gt;GNOME&lt;/li&gt;
&lt;li&gt;KDE&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="standalone"&gt;
&lt;h4&gt;Standalone&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mac-os-x"&gt;
&lt;h2&gt;Mac OS X&lt;/h2&gt;
&lt;div class="section" id="growl"&gt;
&lt;h3&gt;Growl&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Growl_%28software%29"&gt;Wikipedia - Growl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://growl.info/"&gt;Growl - Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="browser"&gt;
&lt;h2&gt;Browser&lt;/h2&gt;
&lt;div class="section" id="firefox"&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/API/notification"&gt;MDN - Notification - Web API Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chromium"&gt;
&lt;h3&gt;Chromium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.chromium.org/developers/linux-technical-faq"&gt;Chromium - Linux Technical FAQ&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Why don't Chromium notifications use the D-BUS-based notifications system (aka libnotify / notification-daemon)?&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;HTML5 notifications can contain arbitrary HTML, which is not supported by the notification protocol. (This is the same reason we don't use Growl on OS X.)&lt;/li&gt;
&lt;li&gt;Chromium's notifications include a button that brings up an options menu, which is also not supported by the notification protocol.&lt;/li&gt;
&lt;li&gt;The glitzy Ubuntu notifications daemon, by design, does not allow the user to interact with notifications at all, which doesn't work when the notification HTML includes clickable links.&lt;/li&gt;
&lt;li&gt;It would be nice to extend the protocol to allow Chromium to integrate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="notification"></category></entry><entry><title>Coverity</title><link href="/posts/2014/12/coverity/" rel="alternate"></link><updated>2014-12-24T23:38:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/coverity/</id><summary type="html">&lt;p&gt;from Coverity :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In 2006, the Coverity Scan service was initiated with the U.S. Department of Homeland Security as the largest public-private sector research project in the world, focused on open source software quality and security. Coverity now manages the project, providing its development testing technology as a free service to the open source community to help them build quality and security into their software development process. Register your open source project for the Coverity Scan service, and follow us on Twitter to get the latest updates.
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://scan.coverity.com/"&gt;Coverity Scan Static Analysis&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Find and fix defects in your Java, C/C++ or C# open source project for free&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coverity"&gt;Wikipedia - Coverity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Projects that use this service&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Linux Kernel&lt;/li&gt;
&lt;li&gt;CPython&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example :&lt;/p&gt;
&lt;img alt="cpython-coverity" src="/img/coverity/cpython.png" /&gt;
</summary><category term="coverity"></category><category term="test"></category></entry><entry><title>Linux Standard Base, Filesystem Hierarchy Standard</title><link href="/posts/2014/12/linux-standard-base/" rel="alternate"></link><updated>2014-12-24T21:19:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/linux-standard-base/</id><summary type="html">&lt;div class="section" id="linux-standard-base-lsb"&gt;
&lt;h2&gt;Linux Standard Base (LSB)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linux_Standard_Base"&gt;Wikipedia - Linux Standard Base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxbase.org/betaspecs/lsb/"&gt;The DRAFT LSB 5.0 Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystem-hierarchy-standard-fhs"&gt;
&lt;h2&gt;Filesystem Hierarchy Standard (FHS)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;Wikipedia - Filesystem Hierarchy Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxbase.org/betaspecs/fhs/"&gt;Filesystem Hierarchy Specification - Beta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="linux"></category></entry><entry><title>[TED] Michael Rubinstein: See invisible motion, hear silent sounds. Cool? Creepy? We can't decide</title><link href="/posts/2014/12/ted-motion-microscope/" rel="alternate"></link><updated>2014-12-24T20:12:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/ted-motion-microscope/</id><summary type="html">&lt;p&gt;這個 talk 講的是利用影像處理來放大細微的動作，甚至藉此來初步還原出當時的聲音&lt;/p&gt;
&lt;iframe src="https://embed-ssl.ted.com/talks/michael_rubinstein_see_invisible_motion_hear_silent_sounds_cool_creepy_we_can_t_decide.html" width="854" height="480" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;</summary><category term="TED"></category><category term="video-processing"></category></entry><entry><title>Linux Kernel Booting Process</title><link href="/posts/2014/12/linux-kernel-booting-process/" rel="alternate"></link><updated>2014-12-24T20:02:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/linux-kernel-booting-process/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://lxr.free-electrons.com/source/Documentation/x86/boot.txt"&gt;Linux/Documentation/x86/boot.txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Vmlinux"&gt;Wikipedia - vmlinux&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;vm&lt;/tt&gt; is for virtual memory&lt;/li&gt;
&lt;li&gt;the Linux kernel in an statically linked executable file format&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;vmlinuz&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;compressed vmlinux&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://unix.stackexchange.com/questions/5518/what-is-the-difference-between-the-following-kernel-makefile-terms-vmlinux-vml"&gt;What is the difference between the following kernel Makefile terms: vmlinux, vmlinuz, vmlinux.bin, zimage &amp;amp; bzimage?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_boot_process"&gt;Arch Wiki - Arch boot process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37390677" width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/shimosawa/linux-kernel-booting-process-1-for-nlkb" title="Linux Kernel Booting Process (1) - For NLKB" target="_blank"&gt;Linux Kernel Booting Process (1) - For NLKB&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/shimosawa" target="_blank"&gt;shimosawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/37390718" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/shimosawa/nlkb20140727" title="Linux Kernel Booting Process (2) - For NLKB" target="_blank"&gt;Linux Kernel Booting Process (2) - For NLKB&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/shimosawa" target="_blank"&gt;shimosawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;img alt="linux kernel boot" src="/img/linux/linux-kernel-boot.jpg" /&gt;
&lt;div class="section" id="bzimage"&gt;
&lt;h2&gt;bzImage&lt;/h2&gt;
&lt;p&gt;bzImage = big zImage&lt;/p&gt;
&lt;img alt="linux kernel file" src="/img/linux/linux-kernel-file.png" /&gt;
&lt;div class="section" id="linux-2-6-22"&gt;
&lt;h3&gt;Linux &amp;lt;= 2.6.22&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bbootsect (bootsect.o):&lt;/li&gt;
&lt;li&gt;bsetup (setup.o)&lt;/li&gt;
&lt;li&gt;bvmlinux (head.o, misc.o, piggy.o)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="bzimage" src="/img/linux/bzimage.png" /&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;piggy.o&lt;/tt&gt; contains the &lt;strong&gt;gzipped&lt;/strong&gt; &lt;tt class="docutils literal"&gt;vmlinux&lt;/tt&gt; file in its data section (&lt;tt class="docutils literal"&gt;ELF&lt;/tt&gt;) (see compressed/Makefile piggy.o).
All source files mentioned are in &lt;tt class="docutils literal"&gt;arch/i386/boot/&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-2-6-23"&gt;
&lt;h3&gt;Linux &amp;gt;= 2.6.23&lt;/h3&gt;
&lt;p&gt;merged &lt;tt class="docutils literal"&gt;bbootsect&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;bsetup&lt;/tt&gt; into one (&lt;tt class="docutils literal"&gt;header.o&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initramfs"&gt;
&lt;h2&gt;initramfs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/001954.html"&gt;深入理解 Linux 2.6 的 initramfs 機制 (上) - Jserv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Initramfs"&gt;Wikipedia - initramfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lxr.free-electrons.com/source/Documentation/filesystems/ramfs-rootfs-initramfs.txt"&gt;Linux/Documentation/filesystems/ramfs-rootfs-initramfs.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/mkinitcpio"&gt;Arch Wiki - mkinitcpio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="zlib"&gt;
&lt;h2&gt;zlib&lt;/h2&gt;
&lt;p&gt;an abstraction of the &lt;tt class="docutils literal"&gt;DEFLATE&lt;/tt&gt; compression algorithm used in the &lt;tt class="docutils literal"&gt;gzip&lt;/tt&gt; file compression program&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zlib"&gt;Wikipedia - zlib&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Applications&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Linux Kernel&lt;/li&gt;
&lt;li&gt;libpng&lt;/li&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;OpenSSH&lt;/li&gt;
&lt;li&gt;OpenSSL&lt;/li&gt;
&lt;li&gt;FFmpeg&lt;/li&gt;
&lt;li&gt;rsync&lt;/li&gt;
&lt;li&gt;dpkg&lt;/li&gt;
&lt;li&gt;Subversion&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;feature : code is portable, liberally licensed, and has a relatively small memory footprint&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux"></category></entry><entry><title>QEMU - First Step</title><link href="/posts/2014/12/qemu-first-step/" rel="alternate"></link><updated>2014-12-24T19:07:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-24:posts/2014/12/qemu-first-step/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/QEMU"&gt;Wikipedia - QEMU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/QEMU"&gt;Arch Wiki - QEMU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="install-qemu"&gt;
&lt;h2&gt;Install QEMU&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pacman -S qemu  &lt;span class="c"&gt;# Arch Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
Name                New Version  Net Change  Download Size

extra/bluez-libs    5.26-1       0.28 MiB         0.06 MiB
extra/celt0.5.1     0.5.1.3-3    0.16 MiB         0.04 MiB
extra/libcacard     2.1.2-1      0.09 MiB         0.03 MiB
extra/libiscsi      1.12.0-1     0.44 MiB         0.10 MiB
extra/seabios       1.7.5-2      1.69 MiB         0.12 MiB
extra/spice         0.12.5-1     2.41 MiB         0.56 MiB
community/usbredir  0.6-4        0.15 MiB         0.03 MiB
extra/vde2          2.3.2-6      0.78 MiB         0.19 MiB
extra/qemu          2.1.2-1      178.21 MiB      19.38 MiB

Total Download Size:    20.53 MiB
Total Installed Size:   184.21 MiB
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create-image"&gt;
&lt;h2&gt;Create Image&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qemu-img create -f qcow2 test.qcow2 100G
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Formatting 'test.qcow2', fmt=qcow2 size=107374182400 encryption=off cluster_size=65536 lazy_refcounts=off
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="install-os-from-bootable-iso"&gt;
&lt;h2&gt;Install OS from bootable ISO&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; to assign memory size&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-cdrom&lt;/span&gt;&lt;/tt&gt; to assign bootable ISO&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-boot&lt;/span&gt; order=d&lt;/tt&gt; to change the booting priority for cdrom&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qemu-system-x86_64 -m 2G -cdrom ArchLinux.iso -boot &lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d test.qcow2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="qemu-with-kvm"&gt;
&lt;h2&gt;QEMU with KVM&lt;/h2&gt;
&lt;p&gt;check your kernel has KVM support :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lsmod &lt;span class="p"&gt;|&lt;/span&gt; grep kvm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
kvm_intel             143245  0
kvm                   421519  1 kvm_intel
&lt;/pre&gt;
&lt;p&gt;start QEMU in KVM mode (add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--enable-kvm&lt;/span&gt;&lt;/tt&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qemu-system-x86_64 --enable-kvm test.qcow2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with previous booting optinos :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qemu-system-x86_64 --enable-kvm -m 2G -cdrom ArchLinux.iso -boot &lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d test.qcow2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="qemu"></category><category term="virtualization"></category><category term="kvm"></category></entry><entry><title>Vim startup time log</title><link href="/posts/2014/12/vim-startup-time-log/" rel="alternate"></link><updated>2014-12-23T23:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-23:posts/2014/12/vim-startup-time-log/</id><summary type="html">&lt;p&gt;原本是在找 vim 啟動時間相關的資料，找到了 &lt;a class="reference external" href="http://usevim.com/2012/04/18/startuptime/"&gt;這個網站&lt;/a&gt; ，
發現有 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--startuptime&lt;/span&gt;&lt;/tt&gt; 這個參數可以用，於是就立馬來試一下，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vim --startuptime vim.log test.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著就可以去 &lt;tt class="docutils literal"&gt;vim.log&lt;/tt&gt; 看整個啟動狀況&lt;/p&gt;
&lt;pre class="literal-block"&gt;
times in msec
 clock   self+sourced   self:  sourced script
 clock   elapsed:              other lines

000.013  000.013: --- VIM STARTING ---
000.142  000.129: Allocated generic buffers
000.277  000.135: locale set
000.305  000.028: GUI prepared
000.313  000.008: clipboard setup
000.321  000.008: window checked
000.881  000.560: inits 1
000.888  000.007: parsing arguments
000.889  000.001: expanding arguments
000.903  000.014: shell init
001.163  000.260: Termcap init
001.214  000.051: inits 2
001.356  000.142: init highlight
042.935  041.473  041.473: sourcing /usr/share/vim/vimfiles/archlinux.vim
043.008  041.604  000.131: sourcing /etc/vimrc
044.222  000.267  000.267: sourcing /usr/share/vim/vim74/syntax/syncolor.vim
044.368  000.480  000.213: sourcing /usr/share/vim/vim74/syntax/synload.vim
067.980  023.555  023.555: sourcing /usr/share/vim/vim74/filetype.vim
068.028  024.211  000.176: sourcing /usr/share/vim/vim74/syntax/syntax.vim
...
161.306  000.881: loading plugins
161.907  000.601: inits 3
162.125  000.218: reading viminfo
163.820  001.695: setup clipboard
163.846  000.026: setting raw mode
163.855  000.009: start termcap
163.876  000.021: clearing screen
...
185.539  000.358: BufEnter autocommands
185.541  000.002: editing files in windows
190.308  004.767: VimEnter autocommands
190.311  000.003: before starting main loop
190.445  000.134: first screen update
190.447  000.002: --- VIM STARTED ---
&lt;/pre&gt;
&lt;p&gt;manual in Vim : &lt;tt class="docutils literal"&gt;:help &lt;span class="pre"&gt;slow-start&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;這個 log 參數剛好拿來解掉一個朋友碰到的問題 ~&lt;/p&gt;
&lt;p&gt;他在用 &lt;tt class="docutils literal"&gt;mosh&lt;/tt&gt; 連到某台機器上開 vim 時會 hang 住，
藉由這個 log，發現是卡在 clipboard 那裡，
原因是因為程式嘗試和 X server connect，但一直連不到，
接著就找到了解法 &lt;tt class="docutils literal"&gt;vim &lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;詳細問題解法可以看 &lt;a class="reference external" href="stackoverflow.com/questions/14635295/vim-takes-a-very-long-time-to-start-up"&gt;這篇 stackoverflow&lt;/a&gt; 回答&lt;/p&gt;
</summary><category term="Vim"></category></entry><entry><title>neovim first try</title><link href="/posts/2014/12/neovim-first-try/" rel="alternate"></link><updated>2014-12-12T20:26:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-12:posts/2014/12/neovim-first-try/</id><summary type="html">&lt;p&gt;Vim is a wonderful editor which appears long long ago.
Now, a project called Neovim wants to refactor Vim and simplify maintenance and improve plugin architecture and many thing else. It's making progress now, you can see &lt;a class="reference external" href="https://github.com/neovim/neovim/wiki/Progress"&gt;Neovim - Progress - GitHub wiki&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Today, I install neovim on my computer, and it seems to work fine as original Vim (with a lots of change that user hard to detect)&lt;/p&gt;
&lt;p&gt;Now, Neovim is working on port all IO to libuv and a VimL to Lua transpiler.
I hope another language will replace the Vimscript soon ...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.org/"&gt;The Neovim Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/neovim/neovim"&gt;Neovim - GitHub&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;I install it on my Arch Linux&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yaourt -S neovim-git python2-neovim-git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installation, you can use &lt;tt class="docutils literal"&gt;nvim&lt;/tt&gt; to start neovim, and the config is &lt;tt class="docutils literal"&gt;.nvimrc&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Vim"></category></entry><entry><title>[Video] The Real Story Behind Wayland and X - Daniel Stone (linux.conf.au 2013)</title><link href="/posts/2014/12/the-real-story-behind-wayland-and-x/" rel="alternate"></link><updated>2014-12-08T01:39:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-08:posts/2014/12/the-real-story-behind-wayland-and-x/</id><summary type="html">&lt;p&gt;This talk is funny and easy to understand ~&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.freedesktop.org/~daniels/lca2013-wayland-x11.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/RIctzAQOe44" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Wayland"></category><category term="X11"></category><category term="Linux"></category></entry><entry><title>[Slide] 淺談編譯器最佳化技術</title><link href="/posts/2014/12/compiler-optimization-intro/" rel="alternate"></link><updated>2014-12-08T00:04:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-08:posts/2014/12/compiler-optimization-intro/</id><summary type="html">&lt;p&gt;今天剛好看到在隔壁校的活動在談 &amp;quot;淺談編譯器最佳化技術&amp;quot;，內容蠻好懂的 ~&lt;/p&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/42438227" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/kitocheng/ss-42438227" title="淺談編譯器最佳化技術" target="_blank"&gt;淺談編譯器最佳化技術&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/kitocheng" target="_blank"&gt;Kito Cheng&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;</summary><category term="Compiler"></category><category term="LLVM"></category><category term="GCC"></category></entry><entry><title>[JCConf] OpenJDK vs. Dalvik/ART virtual machine</title><link href="/posts/2014/12/openjdk-vs-dalvik-and-art-vm/" rel="alternate"></link><updated>2014-12-01T02:38:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-12-01:posts/2014/12/openjdk-vs-dalvik-and-art-vm/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://jcconf.tw/openjdk-vs-dalvik.html"&gt;JCConf 官網連結 (有 Video)&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="preface"&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這裡不提&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;JVM tuning&lt;/li&gt;
&lt;li&gt;JNI, GC, invokedynamic&lt;/li&gt;
&lt;li&gt;Production tweaking&lt;/li&gt;
&lt;li&gt;Android Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="content"&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
                                                   +----------------+
                                                   | CLDC-HI (Java) |
                                                   +----------------+
                                                           ^
                                                           |
+----------------+  +---------------------------+  +-------------------+
| Self VM (Self) |-&amp;gt;| Strongtalk VM (Smalltalk) |-&amp;gt;| HotSpot VM (Java) |
+----------------+  +---------------------------+  +-------------------+
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |
        |                          |                 +-----------------+
        |                          ---------------&amp;gt;  | V8 (Javascript) |
        ------------------------------------------&amp;gt;  +-----------------+
&lt;/pre&gt;
&lt;div class="section" id="jit"&gt;
&lt;h3&gt;JIT&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compiled when needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mixed-mode"&gt;
&lt;h3&gt;Mixed-Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Interpreted&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Bytecode-walking&lt;/li&gt;
&lt;li&gt;Artificial stack machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Compiled&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Direct native operations&lt;/li&gt;
&lt;li&gt;Native register machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling"&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Gather data about code while interpreting&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Invariants (types, constants, nulls)&lt;/li&gt;
&lt;li&gt;Statistics (branches, calls)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimizations"&gt;
&lt;h3&gt;Optimizations&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Method inlining&lt;/li&gt;
&lt;li&gt;Loop unrolling&lt;/li&gt;
&lt;li&gt;Lock coarsening/eliding&lt;/li&gt;
&lt;li&gt;Dead code elimination&lt;/li&gt;
&lt;li&gt;Duplicate code elimination&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Escape_analysis"&gt;Escape analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hotspot"&gt;
&lt;h3&gt;Hotspot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;client mode (C1) inlines, less aggressive&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Fewer opportunities to optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;server mode (C2) inlines aggressively&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Based on richer runtime profiling&lt;/li&gt;
&lt;li&gt;Profile until 10k calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Tiered&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Level 0 = Interpreter&lt;/li&gt;
&lt;li&gt;Level 1~3 = C1&lt;/li&gt;
&lt;li&gt;Level 4 = C2&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="from-interpreter-to-compiler"&gt;
&lt;h3&gt;from Interpreter to Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Bytecode interpreter&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;switch-threading&lt;/li&gt;
&lt;li&gt;indirect-threading&lt;/li&gt;
&lt;li&gt;token-threading&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-openjdk"&gt;
&lt;h3&gt;Summary : OpenJDK&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-dalvik-vm"&gt;
&lt;h3&gt;Introduction to Dalvik VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;因為硬體限制，不能像 HotSpot 一樣做那麼多優化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Dalvik 是 Register-based 的 VM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dalvik Executable (DEX)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;convert tool : dx&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Optimizing Dispatch&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;selective inlining
+ 打開 Java 程式執行的時候，CPU 就是不知道在忙什麼
+ 只是個印出 Hello World 的程式，發現 CPU 有點忙&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;dexopt : Instruction Rewritten&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="libart-android-runtime-library"&gt;
&lt;h3&gt;libART (Android RunTime Library)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Use Ahead-Of-Time (AOT) scheme instead of JIT&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Precompile Dalvik Bytecode into machine language during installation&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hotspot 和 Dalvik 完全不同 codebase，但設計原理很像，Hotspot 實作比較完整，Dalvik 有很多先天限制&lt;/li&gt;
&lt;li&gt;Android L 啟動時間變更久 (重新 scan bytecode 來生成 machine code)&lt;/li&gt;
&lt;li&gt;要兼顧效能和啟動時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Java"></category><category term="OpenJDK"></category><category term="Dalvik"></category><category term="ART"></category><category term="VM"></category></entry><entry><title>Django, Apache, PostgreSQL</title><link href="/posts/2014/11/django-apache-postgresql/" rel="alternate"></link><updated>2014-11-22T01:00:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-22:posts/2014/11/django-apache-postgresql/</id><summary type="html">&lt;p&gt;Although I usually use Arch Linux,
this time I need to install every thing on Ubuntu Server (I get a task to install something on Ubuntu VM) ...&lt;/p&gt;
&lt;p&gt;First, I give my public key to current VM administrator, so I can get permission to ssh to server by key.&lt;/p&gt;
&lt;p&gt;Install Apache, mod-wsgi ...&lt;/p&gt;
&lt;p&gt;Making a virtualenv, cloning current project, installing the requirement.txt&lt;/p&gt;
&lt;p&gt;Modify Apache's configuration (Apache's configuration in Ubuntu is at &lt;tt class="docutils literal"&gt;/etc/apache2/apache2.conf&lt;/tt&gt;,
and default user that Apache use in Ubuntu is &amp;quot;www-data&amp;quot;), setting WSGIPythonPath to the virtualenv one&lt;/p&gt;
&lt;p&gt;Install PostgreSQL (this is my first time to install PostgreSQL)&lt;/p&gt;
&lt;p&gt;Setting PostgreSQL (create user, database, ...)&lt;/p&gt;
</summary><category term="Django"></category></entry><entry><title>Arch Linux upgrade (11/11)</title><link href="/posts/2014/11/archlinux-upgrade-2014-11-11/" rel="alternate"></link><updated>2014-11-12T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-12:posts/2014/11/archlinux-upgrade-2014-11-11/</id><summary type="html">&lt;p&gt;It has been a while since last time I upgrade my notebook,
now I upgrade many software in my notebook including the Linux Kernel,
everything works well after upgrade :)&lt;/p&gt;
&lt;p&gt;I love rolling release :P&lt;/p&gt;
</summary><category term="linux"></category></entry><entry><title>[WIP][Software Testing] Intro.</title><link href="/posts/2014/11/software-testing-intro/" rel="alternate"></link><updated>2014-11-10T01:17:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/software-testing-intro/</id><summary type="html">&lt;p&gt;Note: &lt;strong&gt;本篇仍在未完成狀態&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.cs.nctu.edu.tw/~skhuang/st2014/"&gt;課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期中考: 第 5,6,7,8,9 章 (boundary value, equivalence class, decision table, path testing, data flow testing)&lt;/p&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro.&lt;/h2&gt;
&lt;div class="section" id="white-black"&gt;
&lt;h3&gt;white &amp;amp; black&lt;/h3&gt;
&lt;p&gt;測試大概可以分成 &lt;strong&gt;白箱測試 (white-box testing)&lt;/strong&gt; 與 &lt;strong&gt;黑箱測試 (black-box testing)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;white-box testing 又可以稱為 &lt;strong&gt;透明箱測試 (glass box testing)&lt;/strong&gt;，
因為可以看到內部結構，因此又稱為 &lt;strong&gt;結構測試 (structural testing)&lt;/strong&gt; 或 &lt;strong&gt;邏輯驅動測試 (logic-driven testing)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-case-adequacy-criteria"&gt;
&lt;h3&gt;test case adequacy criteria&lt;/h3&gt;
&lt;p&gt;test case adequacy criteria 討論的是 &amp;quot;需要多少的測試才足夠&amp;quot;，
這可以由涵蓋的 control-flow &amp;amp; data-flow 比例來衡量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;control-flow coverage (測量可以經過多少 execution path)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;statement coverage&lt;/li&gt;
&lt;li&gt;branch coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;data-flow coverage (definition &amp;amp; use &amp;amp; kill)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;all-du-paths (definition &amp;amp; use)&lt;/li&gt;
&lt;li&gt;all-uses&lt;/li&gt;
&lt;li&gt;all-defs
+ 如果每條 variable 的 dc-paths 都包含的話&lt;/li&gt;
&lt;li&gt;all-c-uses (computation)&lt;/li&gt;
&lt;li&gt;all-p-uses (predicate)&lt;/li&gt;
&lt;li&gt;all-c-uses/some-p-uses&lt;/li&gt;
&lt;li&gt;all-p-uses/some-c-uses&lt;/li&gt;
&lt;li&gt;dc-paths (definition &amp;amp; clear)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;test case 難寫通常也代表著程式太複雜，因此要降低結構複雜度，再來是避免 non-determinism&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Rapps-Weyuker hierarchy of data flow coverage metrics :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
                    +-----------+
                    | All-Paths |
                    +-----------+
                        |
                    +--------------+
                    | All-DU-Paths |
                    +--------------+
                        |
                    +----------+
                    | All-Uses |
                    +----------+
                        |
                        |
         |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
         |                              |
+------------------------+      +------------------------+
| All C-Uses some P-Uses |      | All P-Uses some C-Uses |
+------------------------+      +------------------------+
                                        |
                                        |
                        |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
                        |                        |
                    +----------+            +------------+
                    | All-Defs |            | All P-Uses |
                    +----------+            +------------+
                                                 |
                                            +-----------+
                                            | All Edges |
                                            +-----------+
                                                 |
                                            +-----------+
                                            | All Nodes |
                                            +-----------+
&lt;/pre&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="87%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;P-use&lt;/td&gt;
&lt;td&gt;use in predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-use&lt;/td&gt;
&lt;td&gt;use in computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;O-use&lt;/td&gt;
&lt;td&gt;use for output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;L-use&lt;/td&gt;
&lt;td&gt;use for location (pointers, subscripts)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;I-use&lt;/td&gt;
&lt;td&gt;iteration (internal counters, loop indices)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;I-def&lt;/td&gt;
&lt;td&gt;defined by input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A-def&lt;/td&gt;
&lt;td&gt;defined by assignment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Program_slicing"&gt;Wikipedia - Program Slicing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/romanofski/programslice"&gt;https://github.com/romanofski/programslice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects"&gt;http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Spyder&lt;/td&gt;
&lt;td&gt;ANSI C&lt;/td&gt;
&lt;td&gt;Dynamic&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://spaf.cerias.purdue.edu/Students/spyder.html"&gt;http://spaf.cerias.purdue.edu/Students/spyder.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Unravel&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CodeSonar&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Indus/Kaveri&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;JSlice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SeeSlice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Programslice&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-to-decision-path-dd-path"&gt;
&lt;h3&gt;decision-to-decision path (DD-path)&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="coverage-py"&gt;
&lt;h3&gt;coverage.py&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;coverage report &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;coverageg report -m

Name    Stmts   Miss  Cover   Missing
-------------------------------------
hw1        &lt;span class="m"&gt;58&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    97%   49-50
&lt;span class="nb"&gt;test       &lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
-------------------------------------
TOTAL      &lt;span class="m"&gt;79&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    97%
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch5-boundary-value-testing"&gt;
&lt;h2&gt;Ch5 - Boundary Value Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1m05eRr-mqSQIrOb6V3rDLxb3Rtj8gO5CkxphlGSv06I/edit#slide=id.g3a0892a38_030"&gt;Ch5 課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch6-equivalence-class-testing"&gt;
&lt;h2&gt;Ch6 - Equivalence Class Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;weak normal&lt;/li&gt;
&lt;li&gt;strong normal&lt;/li&gt;
&lt;li&gt;weak robust&lt;/li&gt;
&lt;li&gt;strong robust&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch7-decision-table-based-testing"&gt;
&lt;h2&gt;Ch7 - Decision Table-based Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1zUOofTArt4Q-APf-Ne3kE_JUt5gXZFzQTIqBL0VOJqA/edit#slide=id.g4821ca451_016"&gt;CH7 課程講義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch8-path-testing"&gt;
&lt;h2&gt;Ch8 - Path Testing&lt;/h2&gt;
&lt;div class="section" id="program-graphs"&gt;
&lt;h3&gt;Program Graphs&lt;/h3&gt;
&lt;p&gt;用 imperative 寫出來的程式的 program graphs 會是&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;directed graph&lt;/li&gt;
&lt;li&gt;nodes are statement fragements&lt;/li&gt;
&lt;li&gt;edges are flow of control&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dd-paths"&gt;
&lt;h3&gt;DD-Paths&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="test-coverage-metrics"&gt;
&lt;h3&gt;Test Coverage Metrics&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;node coverage&lt;/li&gt;
&lt;li&gt;edge coverage&lt;/li&gt;
&lt;li&gt;chain coverage&lt;/li&gt;
&lt;li&gt;path coverage&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/ned/coveragepy"&gt;https://bitbucket.org/ned/coveragepy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="miller-s-coverage-metrics"&gt;
&lt;h3&gt;Miller's Coverage Metrics&lt;/h3&gt;
&lt;p&gt;Todo&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-178b"&gt;
&lt;h3&gt;DO-178B&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch9-data-flow-testing"&gt;
&lt;h2&gt;Ch9 - Data Flow Testing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define/Use Testing&lt;/li&gt;
&lt;li&gt;Slice-Based Testing&lt;/li&gt;
&lt;li&gt;Program Slicing Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重點: 變數在哪裡拿到 values、在哪裡被使用&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;unifying structure of &lt;strong&gt;test coverage&lt;/strong&gt; metrics&lt;/li&gt;
&lt;li&gt;program slice (1979 - Mark Weiser)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="define-reference-anomalies"&gt;
&lt;h3&gt;define/reference anomalies&lt;/h3&gt;
&lt;p&gt;檢查以下 issue&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;只有定義但沒有被使用的變數&lt;/li&gt;
&lt;li&gt;變數未定義就使用&lt;/li&gt;
&lt;li&gt;變數定義了多次&lt;/li&gt;
&lt;li&gt;變數在使用之前就被 deallocate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-node"&gt;
&lt;h3&gt;defining node&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="usage-node"&gt;
&lt;h3&gt;usage node&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="p-use-c-use"&gt;
&lt;h3&gt;P-use &amp;amp; C-use&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://teddy-chen-tw.blogspot.tw/2014/06/blog-post.html"&gt;白箱測試與黑箱測試（上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="testing"></category></entry><entry><title>[Psycho] Psychology Intro.</title><link href="/posts/2014/11/psycho-intro/" rel="alternate"></link><updated>2014-11-10T01:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/psycho-intro/</id><summary type="html">&lt;p&gt;修心理學通識的隨便紀錄 (?&lt;/p&gt;
&lt;div class="section" id="ch1-psychology-and-life"&gt;
&lt;h2&gt;Ch1 - Psychology and Life&lt;/h2&gt;
&lt;p&gt;Psychology 研究的是 &lt;strong&gt;個人行為和心智歷程&lt;/strong&gt; (behavior of individuals and their mental processes)&lt;/p&gt;
&lt;p&gt;Scientific method : 蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括)&lt;/p&gt;
&lt;p&gt;Behavior : 生物依照環境而產生的可觀察的行為&lt;/p&gt;
&lt;p&gt;描述 =&amp;gt; 解釋 =&amp;gt; 預測 =&amp;gt; 控制&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="35%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;behavioral data&lt;/td&gt;
&lt;td&gt;reports of observations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;explanations&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Internal factors&lt;/li&gt;
&lt;li&gt;External factors&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;predictions&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Causal Prediction (因果預測)&lt;/li&gt;
&lt;li&gt;Scientific Prediction&lt;ul&gt;
&lt;li&gt;由分析結果來判斷關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Interventions (介入)&lt;ul&gt;
&lt;li&gt;控制行為發生與否&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="psychology-s-historical-foundations"&gt;
&lt;h3&gt;Psychology's Historical Foundations&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="53%" /&gt;
&lt;col width="14%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Hermann Ebbinghaus&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;早期的實驗心理學家之一&lt;/li&gt;
&lt;li&gt;遺忘曲線&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;先天論者 vs. 經驗論者
(nativist vs. empiricist)&lt;/td&gt;
&lt;td&gt;Plato (柏拉圖) and Aristotle (亞里斯多德)
opposing views of how mind works&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;John Locke 洛克&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;empiricist view (經驗主義)&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;1632-1704&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Immanuel Kant 康德&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;nativist view&lt;/li&gt;
&lt;li&gt;心理會影響對世界的感受&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;1724-1804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;René Descartes (笛卡兒)&lt;/td&gt;
&lt;td&gt;人類可以用科學來理解&lt;/td&gt;
&lt;td&gt;1596-1650&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wilhelm Wundt&lt;/td&gt;
&lt;td&gt;First formal experimental psychology lab&lt;/td&gt;
&lt;td&gt;1879&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Edward Titchener&lt;/td&gt;
&lt;td&gt;建立美國早期的 psychology labs 之一&lt;/td&gt;
&lt;td&gt;1892&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;William James&lt;/td&gt;
&lt;td&gt;Principles of Psychology&lt;/td&gt;
&lt;td&gt;1890&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="comfort-food"&gt;
&lt;h3&gt;comfort food&lt;/h3&gt;
&lt;p&gt;吃下去後可以撫慰心情和精神的食物&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evolution-of-modern-psychology"&gt;
&lt;h3&gt;Evolution of Modern Psychology&lt;/h3&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;結構論學派&lt;/h4&gt;
&lt;p&gt;School of Structuralism&lt;/p&gt;
&lt;p&gt;創始人為德國心理學家馮德（W. Wundt）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;心理學是從個體本身的觀點研究其自覺的經驗。因此心理學的主要方法就是 &lt;strong&gt;內省法&lt;/strong&gt; 或自省法&lt;/li&gt;
&lt;li&gt;人類的意識經驗中包括三大元素，即感覺、意像、與感情&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;功能論學派&lt;/h4&gt;
&lt;p&gt;School of Functionalism&lt;/p&gt;
&lt;p&gt;美國心理學家 J. James 與 J. Dewey 二人首創&lt;/p&gt;
&lt;p&gt;受達爾文 (C. Darwin) 進化論中「適者生存」的理念&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;完形心理學&lt;/h4&gt;
&lt;p&gt;Gestalt Psychology (中文音義變成 &amp;quot;格式塔&amp;quot; ...)&lt;/p&gt;
&lt;p&gt;Gestalt 源自德文，意思是 &amp;quot;形狀&amp;quot;，意解為 &amp;quot;看清事物&amp;quot;&lt;/p&gt;
&lt;p&gt;Gestalt Psychology 的重要概念是 &lt;strong&gt;整體&lt;/strong&gt; (並非各個部份的總和)，興起於 20 世紀初的德國，
由 Kurt Koffka, Max Wertheimer, and Wolfgang Köhler 創立，
主要是在研究人類 &lt;strong&gt;知覺與意識&lt;/strong&gt; 上的問題，
反對結構學派 (Structuralism) 以自我觀察、自我描述等內省的方法分析意識經驗的成份，
也反對行為主義心理學派 (Behaviorism) 過份強調動物實驗，完全排斥心智歷程的作法&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;心理學七種取向&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="57%" /&gt;
&lt;col width="27%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Perspective&lt;/th&gt;
&lt;th class="head"&gt;Focus of Study&lt;/th&gt;
&lt;th class="head"&gt;Primary Research Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Psychodynamic&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Unconscious drives&lt;/li&gt;
&lt;li&gt;Conflicts&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Behaviorist&lt;/td&gt;
&lt;td&gt;Specific overt responses&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Humanistic&lt;/td&gt;
&lt;td&gt;Human expreience and potentials&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cognitive&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Mental processes&lt;/li&gt;
&lt;li&gt;Language&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Biological&lt;/td&gt;
&lt;td&gt;Brain and nervouse system processes&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Evolutionary&lt;/td&gt;
&lt;td&gt;Evolved psychological adaptations&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Sociocultural&lt;/td&gt;
&lt;td&gt;Cross-cultural patterns of attitudes and behaviors&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch2-research-methods-in-psychology"&gt;
&lt;h2&gt;Ch2 - Research Methods in Psychology&lt;/h2&gt;
&lt;div class="section" id="process-of-research"&gt;
&lt;h3&gt;Process of Research&lt;/h3&gt;
&lt;p&gt;理論 (Theory) : An organized set of concepts that explains a phenomenon or set of phenomena.&lt;/p&gt;
&lt;p&gt;決定論 (Determinism) : Doctrine that all events - physical, behavioral, andmental - are &amp;quot;determined&amp;quot; by specific causal factors that are potentially knowable&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;step 1&lt;/td&gt;
&lt;td&gt;Initial phase of research: Theory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;step 2&lt;/td&gt;
&lt;td&gt;Develop ahypothesis 假說&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;step 3&lt;/td&gt;
&lt;td&gt;Design the study 研究設計&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="scientific-method"&gt;
&lt;h4&gt;Scientific Method&lt;/h4&gt;
&lt;p&gt;蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括)&lt;/p&gt;
&lt;p&gt;目標是要得出最多的客觀 conclusions&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="observer-bias"&gt;
&lt;h4&gt;Observer Bias&lt;/h4&gt;
&lt;p&gt;因為動機和預期造成的測試偏差&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="standardization"&gt;
&lt;h4&gt;Standardization&lt;/h4&gt;
&lt;p&gt;標準化&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="operational-definition"&gt;
&lt;h4&gt;Operational definition&lt;/h4&gt;
&lt;p&gt;操作型定義是將依些事物以某種操作表示出來&lt;/p&gt;
&lt;p&gt;所有研究裡的變數都必須是操作型定義給定的&lt;/p&gt;
&lt;p&gt;ex: 「花生果醬三明治」的操作性定義是「使用抹刀先將花生醬塗抹到一片麵包上，再將果醬塗抹在花生醬上，最後蓋上另一片厚度相同的麵包後所得到的成果。」&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="research-variable"&gt;
&lt;h4&gt;Research Variable&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Independent Variable (獨變項/自變項) (研究者操弄的變數)&lt;/li&gt;
&lt;li&gt;Dependent Variable (依變項)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-methods"&gt;
&lt;h4&gt;Experimental Methods&lt;/h4&gt;
&lt;p&gt;研究者操弄 independent variable 來看對 dependent variable 的影響，
用來解決因果模糊性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Control Procedures&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Double-blind control 雙盲控制&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first simple"&gt;
&lt;li&gt;目的是避免研究結果受安慰劑效應或觀察者期望效應所影響&lt;/li&gt;
&lt;li&gt;受試驗的對象及研究人員並不知道哪些對象屬於對照組，哪些屬於實驗組&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="last literal-block"&gt;
在藥物測試中經常使用雙盲測試。病人被隨機編入對照組及實驗組。
對照組被給予安慰劑，而實驗組給予真正藥物。
無論是病人或觀察病人的實驗人員都不知道誰得到真正的藥物，直至研究結束為止。
不過部份的試驗會較難做成雙盲，
例如：如果治療效果非常顯著，或治療的副作用非常明顯，實驗人員便可能猜想到哪組是對照。
&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Placebo control 安慰劑控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Between-subjects designs 受試者間設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每個參與者隨機分配到不同測試環境&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Within-subjects designs 受試者內設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每個參與者可以自己控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sample 樣本&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Population 中被選為受試者的 subset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Representative Sample 代表性樣本&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Population 中被選為受試者的 subset 中和特徵非常符合的部份&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Population 母群&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-explanations"&gt;
&lt;h4&gt;Alternative explanations&lt;/h4&gt;
&lt;p&gt;替代解釋&lt;/p&gt;
&lt;p&gt;可以由以下幾種而得&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Confounding variables (混淆變項)&lt;/li&gt;
&lt;li&gt;Expectancy effects (預期效應)&lt;/li&gt;
&lt;li&gt;Placebo effect (安慰劑效應)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="correlational-methods"&gt;
&lt;h4&gt;Correlational Methods&lt;/h4&gt;
&lt;p&gt;相關法&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Correlational Coefficient&lt;/li&gt;
&lt;li&gt;Correlational Methods&lt;/li&gt;
&lt;li&gt;正相關&lt;/li&gt;
&lt;li&gt;負相關&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="psychological-measurement"&gt;
&lt;h4&gt;Psychological Measurement&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Validity&lt;/li&gt;
&lt;li&gt;Self-report Measures&lt;/li&gt;
&lt;li&gt;Behavior Measure&lt;/li&gt;
&lt;li&gt;Direct observations&lt;/li&gt;
&lt;li&gt;Naturalistic observations&lt;/li&gt;
&lt;li&gt;Archival Data&lt;/li&gt;
&lt;li&gt;Case Study&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ethical-issues-in-research"&gt;
&lt;h4&gt;Ethical Issues in Research&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;研究的倫理議題&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
+----------+
| 告知同意 |
+----------+
    |
+-----------------+
| 風險 / 獲得評估 |
+-----------------+
    |
+----------+
| 刻意瞞騙 |
+----------+
    |
+----------+
| 事後釋疑 |
+----------+
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch3-the-biological-and-evolutionary-basis-of-behavior"&gt;
&lt;h2&gt;Ch3 - The Biological and Evolutionary Basis of Behavior&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nature vs. Nurture (先天 vs. 後天)&lt;/li&gt;
&lt;li&gt;Heredity vs.  Environment (遺傳 vs. 環境)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nervous-system"&gt;
&lt;h3&gt;Nervous system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Neuron&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dendrites 樹突&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Receive stimulation from sensory receptors&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Soma 細胞體&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Cell body, contains nucleus&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Axon 軸突&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Long extended fiber along which neural impulse travels&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;圖 ??&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Synapse"&gt;http://en.wikipedia.org/wiki/Synapse&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Synapse 突觸&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不同神經元間或神經元與細胞間溝通的接頭&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Synapse Transmission&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Neurotransmitters (神經傳導物質)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Catecholamines (兒茶酚胺)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Norepinephrine (NE) (正腎上腺素)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dopamine (DA) (多巴胺)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;在精神分裂症患者身上可以看到高於正常值的多巴胺&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Glutamate (Glu) (麩胺酸)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;腦中最常見的興奮性神經傳導物質&lt;/li&gt;
&lt;li&gt;和情緒反應、學習和記憶有關&lt;/li&gt;
&lt;li&gt;與藥物、酒精、尼古丁成癮有關&lt;/li&gt;
&lt;li&gt;腦內 Glu 量的失衡與精神疾病有關連,例如精神分裂症&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;GABA (gamma-aminobutyric acid) (迦馬胺基丁酸)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;腦中最常見的抑制性神經傳導物質&lt;/li&gt;
&lt;li&gt;GAMA 太低會產生焦慮感&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Acetylcholine (Ach) (乙醯膽鹼)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;和記憶有關 (ex: 阿茲海默症)&lt;/li&gt;
&lt;li&gt;在運動神經元和肌肉纖維交接處,使骨骼肌興奮而收縮 (ex: 美洲箭毒、肉毒桿菌)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Serotonin (5-HT) (血清素)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;分泌血清素的神經元位於腦幹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;與激發 / 喚起和自動化歷程有關&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;迷幻藥 LSD 抑制血清素神經元的作用 , 產生各種幻覺&lt;/li&gt;
&lt;li&gt;抗憂鬱藥物「百憂解」可以增強血清素的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Endorphins (腦內啡)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;神經調節物質&lt;/li&gt;
&lt;li&gt;控制情緒行為 (焦慮、害怕、緊張、愉悅)&lt;/li&gt;
&lt;li&gt;與鴉片類藥物、嗎啡受體部位相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Sympathetic nervous system (交感神經系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;應對緊急狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Parasympathetic nervous system (副交感神經系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;處理 routine 的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="biology-and-behavior"&gt;
&lt;h3&gt;Biology and Behavior&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="brain-structure"&gt;
&lt;h3&gt;Brain Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Limbic system (邊緣系統)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;regulates emotions and motivated behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Hippocampus (海馬回)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;記憶&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Amygdala (杏仁核)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;情緒、攻擊&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Hypothalamus (下視丘)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;manage body's interanl state&lt;/li&gt;
&lt;li&gt;體溫調節、性興奮&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Thalamus (視丘)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;relay sensory information&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cerebellum (小腦)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;regulates coordinated movement&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Brain stem (腦幹)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;set brain's general alterness level and warning system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Medulla (延腦)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;breath, blood pressure, heartbeat&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Pons (橋腦)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reticular Formation (網狀組織)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Spinal cord (脊髓)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;pathway for neural fibers traveling to and from brain&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cerebral cortex (大腦皮質)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;involve in complex mental processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sleep-cycle"&gt;
&lt;h3&gt;Sleep Cycle&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stage 1&lt;/li&gt;
&lt;li&gt;Stage 2&lt;/li&gt;
&lt;li&gt;Stage 3&lt;/li&gt;
&lt;li&gt;Stage 4&lt;/li&gt;
&lt;li&gt;Rapid EyeMovements (REM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch5-mind-consciousness-and-alternatestates"&gt;
&lt;h2&gt;Ch5 - Mind, Consciousness, and AlternateStates&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="others"&gt;
&lt;h2&gt;Others&lt;/h2&gt;
&lt;div class="section" id="pygmalion-effect"&gt;
&lt;h3&gt;Pygmalion Effect&lt;/h3&gt;
&lt;p&gt;指人在被付予更高期望以後，他們會表現的更好的一種現象&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29"&gt;http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://phiphicake.blogspot.tw/2009/04/blog-post_13.html"&gt;http://phiphicake.blogspot.tw/2009/04/blog-post_13.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid"&gt;http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/"&gt;http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="psycho"></category></entry><entry><title>[Psycho] Psychology Intro. 2</title><link href="/posts/2014/11/psycho-intro-2/" rel="alternate"></link><updated>2015-01-03T15:53:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-10:posts/2014/11/psycho-intro-2/</id><summary type="html">&lt;p&gt;修心理學通識的隨便紀錄 (?&lt;/p&gt;
&lt;p&gt;教材 (非修課) :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ncu.edu.tw/~jimmyjue/lge/program2/p205/2a.pdf"&gt;學習與記憶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ncu.edu.tw/~jimmyjue/lge/program2/p205/2b.pdf"&gt;青少年發展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ncu.edu.tw/~jimmyjue/lge/program2/p205/3b.pdf"&gt;人格心理學&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;學習&lt;/h2&gt;
&lt;p&gt;學習 : 由經驗所造成的行為模式上的相對的永久性變化&lt;/p&gt;
&lt;p&gt;preformance distinction : 學到的不見得會表現出來&lt;/p&gt;
&lt;p&gt;習慣化 : 降低 response time&lt;/p&gt;
&lt;p&gt;敏感化 : 提升反應程度&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;行為主義與行為分析&lt;/h3&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="24%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="54%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;John Watson&lt;/td&gt;
&lt;td&gt;1878 ~ 1958&lt;/td&gt;
&lt;td&gt;Father of American behaviorism&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;B.F. Skinner&lt;/td&gt;
&lt;td&gt;1904 ~ 1990&lt;/td&gt;
&lt;td&gt;Operant conditioning model&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;行為分析 : 專注於發現環境對行為的影響&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;古典制約&lt;/h3&gt;
&lt;p&gt;Classical Conditioning: Learning Predictable Signals&lt;/p&gt;
&lt;p&gt;based on 已經有的反應去做制約&lt;/p&gt;
&lt;div class="section" id="ivan-pavlov-s-dog"&gt;
&lt;h4&gt;Ivan Pavlov's dog&lt;/h4&gt;
&lt;p&gt;from wikipedia :&lt;/p&gt;
&lt;p&gt;狗能夠對食物自然而然的分泌唾液，此時 Ivan Pavlov 將食物看作非制約刺激（US）、唾液分泌看作非制約反應（UR），並將兩者的關係稱為非制約反射。而如果在提供食物之前的幾秒鐘發出一些作為中性刺激（NS）的聲響，將會使得這個聲響轉變為制約刺激（CS），能夠單獨在沒有食物的狀況下引起作為制約反應（CR）的唾液分泌，兩者的關係則被稱做制約反射。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;食物 (US) =&amp;gt; 唾液分泌（UR）&lt;/div&gt;
&lt;div class="line"&gt;食物 (US) + 聲音 (NS) =&amp;gt; 唾液分泌（UR）&lt;/div&gt;
&lt;div class="line"&gt;聲音 (CS) =&amp;gt; 唾液分泌（CR）&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;名詞解釋&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;非制約刺激（unconditioned stimulus，US) ： 不需經過學習就能引起反應的 刺激 ， 如上述狗食&lt;/li&gt;
&lt;li&gt;非制約反應（uncond itioned response，UR) ： 不需經過學習就能對非制約刺 激起的反應 ， 如上述狗對食物所流的口水&lt;/li&gt;
&lt;li&gt;制約刺激（conditioned stimulus，CS）： 本為中性刺激 ， 與非制約刺激連結 ， 能引起反應的刺激 ， 如上述聲音&lt;/li&gt;
&lt;li&gt;制約反應（conditioned response，CR）： 由制約刺激所引起的反應 ， 如上述 狗對聲音所流的口水&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="conditioning" src="/img/psycho/conditioning.png" /&gt;
&lt;img alt="Strength of the CR" src="/img/psycho/strength-of-cr.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;操作制約&lt;/h3&gt;
&lt;p&gt;Operant Conditioning: Learning About Consequences&lt;/p&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;正增強&lt;/h4&gt;
&lt;p&gt;行為後的獎賞&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;負增強&lt;/h4&gt;
&lt;p&gt;厭惡而欲避免&lt;/p&gt;
&lt;p&gt;ex: 陽光很大，出門會帶太陽眼鏡&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;處罰&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;正處罰&lt;/li&gt;
&lt;li&gt;負處罰&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;制約的歷程&lt;/h3&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;刺激類化&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;刺激區辨&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="taste-aversion-learning"&gt;
&lt;h3&gt;Taste-aversion Learning&lt;/h3&gt;
&lt;p&gt;味道嫌惡學習&lt;/p&gt;
&lt;p&gt;Garcia effect&lt;/p&gt;
&lt;p&gt;ex: 接受化療的癌症患者會對食物產生噁心，因為其化療往往在進食後進行，由此使癌症患者感到是食物導致其化療痛苦&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;觀察學習&lt;/h3&gt;
&lt;p&gt;見賢思齊，見不賢內自省&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bandura-s-research"&gt;
&lt;h3&gt;Bandura's Research&lt;/h3&gt;
&lt;p&gt;觀察學習&lt;/p&gt;
&lt;p&gt;BoBo Doll Study&lt;/p&gt;
&lt;p&gt;在該實驗中，Bandura 選用兒童作為實驗對象，因為通常兒童很少有社會條件反射。班杜拉試圖使兒童分別受到成人榜樣的攻擊性行為與非攻擊性行為的影響。然後將這些兒童置於沒有成人榜樣的新環境中，以觀察他們是否模仿了成人榜樣的攻擊性行為與非攻擊性行為。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.xuite.net/kc6191/study/22375433-%E7%8F%AD%E6%9D%9C%EF%A4%A5%28Albert+Bandura%29+-+%E7%A4%BE%E6%9C%83%E5%AD%B8%E7%BF%92%EF%A5%81%28social+learning+theory%29"&gt;班杜拉 (Albert Bandura) - 社會學習論 (social learning theory)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="video"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/128Ts5r9NRE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/NjTxQy_U3ac" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;記憶&lt;/h2&gt;
&lt;p&gt;7 +- 2 working memory chunks&lt;/p&gt;
&lt;img alt="Memory" src="/img/psycho/infoprocess.jpg" /&gt;
&lt;p&gt;events =&amp;gt; Sensory Memory =&amp;gt; Working Memory (include Short-term Memory) =&amp;gt; Long-term Memory&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;explicit memory : 取得資訊需要有意識的回想&lt;/li&gt;
&lt;li&gt;implicit memory : 取得資訊不需要有意識的的回想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Types :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Declarative Memory&lt;/li&gt;
&lt;li&gt;Procedural Memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dimensions of Long-Term Memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Long-term Memory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Declarative Memory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Episodic Memory (個人事件記憶/情節記憶)&lt;/li&gt;
&lt;li&gt;Semantic Memory (語意記憶)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Procedural Memory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Serial Position Effect&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Primacy Effect&lt;/li&gt;
&lt;li&gt;Recency Effect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Forget&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Proactive interference (順向干擾(對未來記憶的干擾))&lt;/li&gt;
&lt;li&gt;Retroactive interference (逆向干擾(對過去記憶的干擾))&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/bSycdIx-C48" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/HVWbrNls-Kw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;智力&lt;/h2&gt;
&lt;p&gt;Psychological Assessment 心理評量&lt;/p&gt;
&lt;p&gt;Formal Assessment : 信度、效度、標準化&lt;/p&gt;
&lt;p&gt;Galton's idea of Intelligence&lt;/p&gt;
&lt;p&gt;Theories of Intelligence&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Crystallized Intelligence 結晶智力&lt;/li&gt;
&lt;li&gt;Fluid Intelligence 流體智力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sternberg’s Triarchic Theory (1999) (智力三元論)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Analytical intelligence 分析智力&lt;/li&gt;
&lt;li&gt;Creative intelligence 創造智力&lt;/li&gt;
&lt;li&gt;Practical intelligence 實用智力&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/9xTz3QjcloI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/75g4d5sF3xI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h2&gt;人類發展&lt;/h2&gt;
&lt;p&gt;Developmental Psychology 發展心理學&lt;/p&gt;
&lt;p&gt;Locomotion&lt;/p&gt;
&lt;img alt="認知發展階段" src="/img/psycho/cognitive-developmental-theory.jpg" /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;research design&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Longitudinal Design 縱貫設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;長時間研究同年齡的受試者&lt;/li&gt;
&lt;li&gt;受試者流失 dropout,造成不同時間資料比較的困難&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cross-Sectional Design 橫向設計&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;某一時間研究不同年齡組&lt;/li&gt;
&lt;li&gt;世代效應 cohort effect: 不同年齡組受到不同的歷史的影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Piaget's theory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;認知發展理論&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;認知發展的基礎：基模，同化，調節，不平衡狀態&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;基模：知識的組織與結構&lt;/li&gt;
&lt;li&gt;同化：以已有的知識解釋來自環境中的各種刺激&lt;/li&gt;
&lt;li&gt;調節：個體同化外界事物時，受外界影響，知識組織產生變化&lt;/li&gt;
&lt;li&gt;不平衡狀態：個體知識結構與外界刺激間因不一致產生不平衡狀態，使個體有進一步學習的動機&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;認知發展階段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Cognitive development in adulthood&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;流體智力&lt;/li&gt;
&lt;li&gt;晶體智力&lt;/li&gt;
&lt;li&gt;選擇性最適化加上補償替代方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Erikson's theory&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;社會心理發展階段&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Attachment 依附關係&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Attachment_theory"&gt;Attachment theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Parenting style&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Identity formation 認同形成&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;James Marcia&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Identity diffusion 認同散亂&lt;/li&gt;
&lt;li&gt;Foreclosure 提早結束&lt;/li&gt;
&lt;li&gt;Moratorium 認同找尋中(延緩)&lt;/li&gt;
&lt;li&gt;Identity achievement 認同完成/成就&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Expanded on Erikson's analysis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Moral (道德) Development&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;Lawrence Kohlberg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lawrence_Kohlberg%27s_stages_of_moral_development"&gt;Lawrence Kohlberg's stages of moral development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Level 1&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Stage 1 : 避免懲罰&lt;/li&gt;
&lt;li&gt;Stage 2 : 贏得獎勵，強調報酬/交換&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Level 2&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Stage 3 : 贏得讚許，避免被反對，作個 &amp;quot;好人&amp;quot;&lt;/li&gt;
&lt;li&gt;Stage 4 : 被 &amp;quot;法律與秩序&amp;quot; 規範&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Level 3&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Stage 5 : 被公眾福利，&amp;quot;社會契約&amp;quot; 規範&lt;/li&gt;
&lt;li&gt;Stage 6 : 被自己建立的抽象道德原則規範&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="visual-cliff"&gt;
&lt;h3&gt;visual cliff&lt;/h3&gt;
&lt;p&gt;發展心理學的一個著名實驗，用來研究人類和動物的深度知覺，設計者為 Eleanor Gibson 和 Richard Walk&lt;/p&gt;
&lt;iframe src="//player.vimeo.com/video/77934" width="WIDTH" height="HEIGHT" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="erikson-s-theory"&gt;
&lt;h3&gt;Erikson's theory&lt;/h3&gt;
&lt;p&gt;社會心理發展階段&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Erikson%27s_stages_of_psychosocial_development"&gt;Erikson's stages of psychosocial development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stage 1 ~ 8&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parenting-styles"&gt;
&lt;h3&gt;Parenting Styles&lt;/h3&gt;
&lt;img alt="Parenting Styles" src="/img/psycho/parenting-styles.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="psycho"></category></entry><entry><title>[PyPy] IO improvements</title><link href="/posts/2014/11/pypy-io-improvements/" rel="alternate"></link><updated>2014-11-06T00:15:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-06:posts/2014/11/pypy-io-improvements/</id><summary type="html">&lt;p&gt;剛剛看到 &lt;a class="reference external" href="http://morepypy.blogspot.tw/2014/11/pypy-io-improvements.html"&gt;PyPy status blog 上的新文章&lt;/a&gt; ，
以下是大概的內容&lt;/p&gt;
&lt;p&gt;PyPy 在 Warsaw (為波蘭的首都及最大的城市) 的 sprint 順利結束了 (wrapped up)，
有些 branch (gc_no_cleanup_nursery, gc-incminimark-pinning) 已經順利 merge 回 master (improve I/O &amp;amp; GC)&lt;/p&gt;
&lt;div class="section" id="gc-no-cleanup-nursery"&gt;
&lt;h2&gt;改變一 - gc_no_cleanup_nursery&lt;/h2&gt;
&lt;p&gt;PyPy GC 會把 new objects allocate 在 young object area (就是 GC 上慣稱的 &lt;strong&gt;nursery&lt;/strong&gt; 啦)，
每經過一個 minor collection 都要把 nursery 清理。簡單起見，GC 通常會把整個 nursery 清成 0。&lt;/p&gt;
&lt;p&gt;這樣作法對於 cache 會有 bad effects，因為你一次把一大塊 memory 清成 0，
而且把一些不需要清成 0 的資料也清了 (例如 large strings)。對於這個問題，
可以用 incremental nursery zeroing 來減輕，
但是 gc_no_cleanup_nursery 這個 branch 把 zeroing 整個拿掉，
因此提升了 &lt;strong&gt;string handling&lt;/strong&gt; 和 &lt;strong&gt;recursive code&lt;/strong&gt; 的效率 (因為 jitframes 也不再需要把 memory 清成 0)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gc-incminimark-pinning"&gt;
&lt;h2&gt;改變二 - gc-incminimark-pinning&lt;/h2&gt;
&lt;p&gt;隨著時間的過去 PyPy GC 會把 objects 在 memory 裡做移動，也就是說 memory address 會改變，
因此要把 pointer 傳給 C function 時，必須確保指到 objects 不會被 GC 移動。&lt;/p&gt;
&lt;p&gt;PyPy 2.4 以前，用 copying the data into or from a non-movable buffer 來解決，
顯然這沒有效率。這個 branch 使用了 &amp;quot;pinning&amp;quot; 的概念，
這讓程式可以知會 GC 某些 objects 在一段時間內不允許被移動。
這會讓 GC 的複雜度稍微上升，但是可以大幅提升 I/O performance。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pypy"></category></entry><entry><title>ZIP unsupported compression method 99</title><link href="/posts/2014/11/zip-unsupported-99/" rel="alternate"></link><updated>2014-11-04T23:51:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-11-04:posts/2014/11/zip-unsupported-99/</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;前陣子朋友碰到有設密碼的 zip 檔不能用 unzip 來解開，&lt;/div&gt;
&lt;div class="line"&gt;會出現 &amp;quot;does not support compression method 99&amp;quot; 的錯誤，&lt;/div&gt;
&lt;div class="line"&gt;原因是這些檔案用 AES 加密，&lt;/div&gt;
&lt;div class="line"&gt;對 unzip 來說是新 method 所以不支援，&lt;/div&gt;
&lt;div class="line"&gt;這時候只好用其他支援的工具解開啦，&lt;/div&gt;
&lt;div class="line"&gt;例如 : 7z&lt;/div&gt;
&lt;/div&gt;
</summary><category term="zip"></category></entry><entry><title>[Prolog] Cut</title><link href="/posts/2014/10/prolog-cut/" rel="alternate"></link><updated>2014-10-29T01:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-29:posts/2014/10/prolog-cut/</id><summary type="html">&lt;p&gt;Prolog 裡，&amp;quot;+&amp;quot; 等同於 not (檢查一個 goal 不能證明為真的 predicate)&lt;/p&gt;
&lt;p&gt;&amp;quot;!&amp;quot; 則是切除邏輯判斷的結構&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 ! 左邊的 predicates 成立，就把在 ! 之後 head 相同的情況放棄，&lt;/li&gt;
&lt;li&gt;在 ! 左邊的 predicates 不成立，就把同一行程式 ! 右邊的 predicates 放棄掉&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:-&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;!,&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="s-Atom"&gt;?-&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;R&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nv"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;No&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:-&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;!.&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="s-Atom"&gt;?-&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;R&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nv"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ptt.cc/bbs/Programming/M.1261677915.A.162.html"&gt;PTT - Prolog的符號: &amp;quot;+&amp;quot;和&amp;quot;!&amp;quot;是甚麼?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikibooks.org/wiki/Prolog/Cuts_and_Negation"&gt;Prolog/Cuts and Negation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="prolog"></category></entry><entry><title>[FP] predicate</title><link href="/posts/2014/10/predicate/" rel="alternate"></link><updated>2014-10-28T11:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-28:posts/2014/10/predicate/</id><summary type="html">&lt;p&gt;short :&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;predicate&lt;/strong&gt; is a box that takes an argument and returns a &lt;strong&gt;Boolean value&lt;/strong&gt;. For example, &amp;quot;x -&amp;gt; x is even&amp;quot;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a box that takes an argument and returns a &lt;strong&gt;value&lt;/strong&gt;. For example, &amp;quot;x -&amp;gt; x*x&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="predicate-in-natural-language"&gt;
&lt;h2&gt;Predicate (謂語) in natural language&lt;/h2&gt;
&lt;p&gt;Subject + Predicate : The dog + barks.&lt;/p&gt;
&lt;p&gt;The predicate identifies and describes the action of the sentence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="predicate-in-functional"&gt;
&lt;h2&gt;Predicate in Functional&lt;/h2&gt;
&lt;p&gt;A predicate is a function that returns the &lt;strong&gt;Boolean value&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-python"&gt;
&lt;h2&gt;In Python&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/howto/functional.html"&gt;Python - Functional Programming How To&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;filter(predicate, iter)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_even&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c"&gt;# there are more in iterools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="in-prolog"&gt;
&lt;h2&gt;In Prolog&lt;/h2&gt;
&lt;p&gt;Prolog's BNF&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;program&amp;gt; ::= &amp;lt;clause list&amp;gt; &amp;lt;query&amp;gt; | &amp;lt;query&amp;gt;
&amp;lt;clause list&amp;gt; ::= &amp;lt;clause&amp;gt; | &amp;lt;clause list&amp;gt; &amp;lt;clause&amp;gt;
&amp;lt;clause&amp;gt; ::= &amp;lt;predicate&amp;gt; . | &amp;lt;predicate&amp;gt; :- &amp;lt;predicate list&amp;gt;.
&amp;lt;predicate list&amp;gt; ::= &amp;lt;predicate&amp;gt; | &amp;lt;predicate list&amp;gt; , &amp;lt;predicate&amp;gt;
&amp;lt;predicate&amp;gt; ::= &amp;lt;atom&amp;gt; | &amp;lt;atom&amp;gt; ( &amp;lt;term list&amp;gt; )
&amp;lt;term list&amp;gt; ::= &amp;lt;term&amp;gt; | &amp;lt;term list&amp;gt; , &amp;lt;term&amp;gt;
&amp;lt;term&amp;gt; ::= &amp;lt;numeral&amp;gt; | &amp;lt;atom&amp;gt; | &amp;lt;variable&amp;gt; | &amp;lt;structure&amp;gt;
&amp;lt;structure&amp;gt; ::= &amp;lt;atom&amp;gt; ( &amp;lt;term list&amp;gt; )
&amp;lt;query&amp;gt; ::= ?- &amp;lt;predicate list&amp;gt;.
&amp;lt;atom&amp;gt; ::= &amp;lt;small atom&amp;gt; | &amp;#39; &amp;lt;string&amp;gt; &amp;#39;
&amp;lt;small atom&amp;gt; ::= &amp;lt;lowercase letter&amp;gt; | &amp;lt;small atom&amp;gt; &amp;lt;character&amp;gt;
&amp;lt;variable&amp;gt; ::= &amp;lt;uppercase letter&amp;gt; | &amp;lt;variable&amp;gt; &amp;lt;character&amp;gt;
&amp;lt;lowercase letter&amp;gt; ::= a | b | c | ... | x | y | z
&amp;lt;uppercase letter&amp;gt; ::= A | B | C | ... | X | Y | Z | _
&amp;lt;numeral&amp;gt; ::= &amp;lt;digit&amp;gt; | &amp;lt;numeral&amp;gt; &amp;lt;digit&amp;gt;
&amp;lt;digit&amp;gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
&amp;lt;character&amp;gt; ::= &amp;lt;lowercase letter&amp;gt; | &amp;lt;uppercase letter&amp;gt; | &amp;lt;digit&amp;gt; | &amp;lt;special&amp;gt;
&amp;lt;special&amp;gt; ::= + | - | * | / | \ | ^ | ~ | : | . | ? | | # | $ | &amp;amp;
&amp;lt;string&amp;gt; ::= &amp;lt;character&amp;gt; | &amp;lt;string&amp;gt; &amp;lt;character&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prolog has two types of &lt;strong&gt;clause (子句)&lt;/strong&gt; : (clause = facts | rules)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;facts&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;tom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;rules&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;tom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:-&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;tom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both facts and rules are composed of predicates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Functional_predicate"&gt;Functional predicate - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Prolog"&gt;Prolog - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="funcitonal"></category></entry><entry><title>[FP] Referential Transparency</title><link href="/posts/2014/10/referential-transparency/" rel="alternate"></link><updated>2014-10-26T11:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-26:posts/2014/10/referential-transparency/</id><summary type="html">&lt;p&gt;Short : &lt;strong&gt;no side effect&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29"&gt;Referential Transparency - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Referential Transparency means a expression won't change the behavior of a program&lt;/p&gt;
&lt;p&gt;For example :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C code&lt;/span&gt;

&lt;span class="c1"&gt;// this is not referential transparency&lt;/span&gt;
&lt;span class="c1"&gt;// it&amp;#39;s referential opaqueness&lt;/span&gt;
&lt;span class="c1"&gt;// function will modify the variable outside the function&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// this is referential transparency&lt;/span&gt;
&lt;span class="c1"&gt;// function won&amp;#39;t modify the variable outside the function&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if a function is referential transparency, then it can be optimized by many ways,
ex:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;memoization&lt;/li&gt;
&lt;li&gt;common subexpression elimination&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;parallelization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;only referentially transparent functions can be memoized (cache the results)&lt;/p&gt;
&lt;p&gt;a referentially transparent expression is &lt;strong&gt;deterministic&lt;/strong&gt;
(the same results with the same input)&lt;/p&gt;
</summary><category term="funcitonal"></category></entry><entry><title>Python virtualenv upgrade</title><link href="/posts/2014/10/python-virtualenv-upgrade/" rel="alternate"></link><updated>2014-10-22T13:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-22:posts/2014/10/python-virtualenv-upgrade/</id><summary type="html">&lt;p&gt;If you want to upgrade main Python program in virtualenv,
then just run the creation command again.&lt;/p&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
virtualenv env
virtualenv env-pypy3 -p /usr/bin/pypy3
&lt;/pre&gt;
</summary><category term="Python"></category></entry><entry><title>RPython Intro.</title><link href="/posts/2014/10/RPython/" rel="alternate"></link><updated>2014-10-21T08:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-21:posts/2014/10/RPython/</id><summary type="html">&lt;p&gt;(not complete)&lt;/p&gt;
&lt;div class="section" id="what-s-rpython"&gt;
&lt;h2&gt;What's RPython&lt;/h2&gt;
&lt;p&gt;RPython is a subset of Python&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="83%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;RPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Static (not Manifest Typing, but Type Inference)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython"&gt;http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not all code in the PyPy repository is RPython.
For example, there are code generators (e.g. in rlib.parsing) that run at compile time and produce RPython code,
but are not RPython (frequently with a &amp;quot;NOT_RPYTHON&amp;quot; docstring, by the way).
Also, large parts of the standard library are written in full Python (mostly taken straight from CPython).&lt;/p&gt;
&lt;p&gt;To make a C code generator, code on interpreter level has to restrict to a subset of Python.
(Code on application level cat still use full Python)&lt;/p&gt;
&lt;p&gt;PyPy is &lt;strong&gt;not source-to-source translations&lt;/strong&gt;, it start translation from live &lt;strong&gt;python code objects&lt;/strong&gt; .&lt;/p&gt;
&lt;div class="section" id="type-inference-static-typing"&gt;
&lt;h3&gt;Type Inference &amp;amp; Static Typing&lt;/h3&gt;
&lt;p&gt;Types are not stated explicitly, they are infered, so RPython is static typing.&lt;/p&gt;
&lt;p&gt;Static typing doesn't mean the type has to be written out (that's &lt;strong&gt;manifest typing&lt;/strong&gt;),
it means each expression has a single type that never changes.&lt;/p&gt;
&lt;div class="section" id="analysis"&gt;
&lt;h4&gt;Analysis&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We cann't infer a (non-generic) type for a function like above,
the return type depends on arguments,
so the return type is determined by analysis the arguments (when the function is called)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rpythonic"&gt;
&lt;h3&gt;RPythonic&lt;/h3&gt;
&lt;div class="section" id="flow-restrictions"&gt;
&lt;h4&gt;Flow restrictions&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;variable&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;globals are considered constants (global instances don't have this restriction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;control structures&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;definitions&lt;/td&gt;
&lt;td&gt;run-time definition of classes or functions is not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;generators&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;exceptions&lt;/td&gt;
&lt;td&gt;fully supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="object-restrictions"&gt;
&lt;h4&gt;Object restrictions&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;int, float, bool&lt;/td&gt;
&lt;td&gt;works&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;strings&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;no variable-length tuples&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;lists&lt;/td&gt;
&lt;td&gt;annotator can figure out most of the time that your list is fixed-size,
even when you use list comprehension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dicts&lt;/td&gt;
&lt;td&gt;unique key type only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;functions&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="integer-types"&gt;
&lt;h4&gt;Integer Types&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-a-python-vm-with-rpython"&gt;
&lt;h2&gt;build a Python VM with RPython&lt;/h2&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category></entry><entry><title>Try the jitviewer</title><link href="/posts/2014/10/jitviewer/" rel="alternate"></link><updated>2014-10-15T17:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-15:posts/2014/10/jitviewer/</id><summary type="html">&lt;div class="section" id="the-jitviewer"&gt;
&lt;h2&gt;the jitviewer&lt;/h2&gt;
&lt;div class="section" id="target"&gt;
&lt;h3&gt;target&lt;/h3&gt;
&lt;p&gt;analysis log from PyPy, and display Python bytecode &amp;amp; jit operations via the web&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;install&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;jitviewer is a PyPy2 only program now (it need rpython)&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv env-pypy -p /usr/bin/pypy
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;active the virtual environment&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;env-pypy/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;get the PyPy2 source code (for rpython)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://bitbucket.org/pypy/pypy/downloads/pypy-2.4.0-src.tar.bz2
tar -xvf pypy-2.4.0-src.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;install jitviewer&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install jitviewer
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;set the env&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYTHONPATH pypy-2.4.0-src
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;run the sample&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jitviewer.py --log log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-log-of-pypy"&gt;
&lt;h3&gt;create log of PyPy&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setenv PYPYLOG jit-log-opt,jit-backend-counts:myprogram.log
pypy -c your_program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="with-pypy3"&gt;
&lt;h3&gt;with PyPy3&lt;/h3&gt;
&lt;p&gt;As jitviewer is a PyPy2 only program now (2014-10-15),
you should run your program by PyPy3 and output the log,
then use jitviewer with PyPy2 to analysis the log.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expect-in-the-future"&gt;
&lt;h3&gt;expect in the future&lt;/h3&gt;
&lt;p&gt;There are something that I think it should have ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;PyPy3 compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jitviewer with PyPy3 is not working now,
the smaller part is the syntax in jitviewer (something like print function),
the bigger part is the rpython module ...&lt;/p&gt;
&lt;p&gt;At the moment, rpython has a lot of Python 2 only syntax (even in PyPy3 source code).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CPython compatibility&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means to remove the depenency of rpython.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h3&gt;note&lt;/h3&gt;
&lt;p&gt;The PyPy does not modify the output of Python bytecodes,
so the Python bytecodes output from CPython's dis module or PyPy's are the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="PyPy"></category><category term="Python"></category></entry><entry><title>PTT - Python 版 - transpose 問題</title><link href="/posts/2014/10/ptt-python-transpose/" rel="alternate"></link><updated>2014-10-11T23:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/ptt-python-transpose/</id><summary type="html">&lt;p&gt;這篇在解 PTT Python 版上的一個問題 (#1KEG5cfG)&lt;/p&gt;
&lt;p&gt;基本上就是要做 transpose，但是資料長度不依，
所以就來試試囉 : &lt;a class="reference external" href="https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0"&gt;https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下都以 Python 3 為考量，而且以 zip 為出發點來解這個問題。&lt;/p&gt;
&lt;p&gt;如果是一個完整 n x m 的資料，
類似的工作可以用 zip 就完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在的狀況不是完整 n x m 的資料，而是長短不一的，
一種解是用 itertools 裡的 zip_longest，
參數是 iterables 還有 fillvalue (預設是 None)，
fillvalue 會拿來填滿資料短缺的部份。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;it&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 跟前面文章借測資&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊會把不夠的地方都補 None，
所以輸出會是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1, None)
(2, 2, 2, 2, 2, 2, None, None)
(3, 3, 3, 3, 3, 3, None, None)
(4, 4, 4, 4, 4, None, None, None)
(5, 5, 5, 5, None, None, None, None)
(6, 6, 6, None, None, None, None, None)
(7, 7, 7, None, None, None, None, None)
(8, 8, None, None, None, None, None, None)
(9, None, None, None, None, None, None, None)
&lt;/pre&gt;
&lt;p&gt;如果前面那種剛好符合需求，那就可以開心的拿來用了，
如果真的不想要看到多補的那些資料，就再把結果處理過。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterfalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此一來結果就變成:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(0, 0, 0, 0, 0, 0, 0, 0)
(1, 1, 1, 1, 1, 1, 1)
(2, 2, 2, 2, 2, 2)
(3, 3, 3, 3, 3, 3)
(4, 4, 4, 4, 4)
(5, 5, 5, 5)
(6, 6, 6)
(7, 7, 7)
(8, 8)
(9,)
&lt;/pre&gt;
&lt;p&gt;不過上面處理是以輸入 data 裡沒有 None 為前提的 XD
資料裡面可能有 None 的話就另外用別的值囉。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 3</title><link href="/posts/2014/10/pythoner-read-ruby-book-3/" rel="alternate"></link><updated>2014-10-11T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-11:posts/2014/10/pythoner-read-ruby-book-3/</id><summary type="html">&lt;div class="section" id="ch-8-regular-expression"&gt;
&lt;h2&gt;ch 8 Regular Expression&lt;/h2&gt;
&lt;p&gt;毫無反應就是 regular expression&lt;/p&gt;
&lt;p&gt;書上是介紹 Ruby 裡的 re，基本上長的就是 Perl 樣 (X&lt;/p&gt;
&lt;p&gt;基本 re 觀念都差不多&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Ruby&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;lt;.*?&amp;gt;)/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&amp;lt;.*?&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt;b&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書上提到 Ruby 1.9 的 re 使用了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Oniguruma"&gt;Oniguruma&lt;/a&gt; 這個 engine，
Ruby 2.0 後轉到 Oniguruma 的 fork : &lt;a class="reference external" href="https://github.com/k-takata/Onigmo"&gt;Onigmo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 的話可以看 &lt;a class="reference external" href="https://docs.python.org/3/library/re.html"&gt;re 的 document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這章節最後最後提到 DSL (Domain Specific Language)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-1-integer"&gt;
&lt;h2&gt;ch 9-1 Integer&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 C 裡，型態為 int 的狀態下，5 / 2 的結果會是 2&lt;/li&gt;
&lt;li&gt;int 有大小上限&lt;/li&gt;
&lt;li&gt;bitwise operation&lt;/li&gt;
&lt;li&gt;bitmask&lt;/li&gt;
&lt;li&gt;2's complement&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-9-2-float"&gt;
&lt;h2&gt;ch 9-2 Float&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fixed point number (不好用)&lt;/li&gt;
&lt;li&gt;IEEE 754&lt;/li&gt;
&lt;li&gt;電腦中的浮點數沒有結合律 (誤差會擴大)&lt;/li&gt;
&lt;li&gt;誤差會累積&lt;/li&gt;
&lt;li&gt;Inf, 0, NaN&lt;/li&gt;
&lt;li&gt;運算的值的絕對值相差過大時，計算會造成誤差&lt;/li&gt;
&lt;li&gt;cancellation error (相減兩個相近的數字時造成的誤差)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.234567889943719&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;10000001.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10000000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.12345678&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.11111111&lt;/span&gt;
&lt;span class="mf"&gt;1.23456789&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.0123456&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.0123444&lt;/span&gt;
&lt;span class="mf"&gt;1.1999999999998123e-06&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 2</title><link href="/posts/2014/10/pythoner-read-ruby-book-2/" rel="alternate"></link><updated>2014-10-10T20:50:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-2/</id><summary type="html">&lt;div class="section" id="ch-2-5-duck-typing"&gt;
&lt;h2&gt;ch 2-5 Duck Typing&lt;/h2&gt;
&lt;p&gt;duck typing 實在很常聽到，尤其自己常寫的是 Python XD&lt;/p&gt;
&lt;p&gt;在講到 type 時，常聽到的有 static 和 dynamic，static 的話不用執行就可以知道，
dynamic 的話要執行下去才能確認&lt;/p&gt;
&lt;p&gt;硬體看得懂的是二進位數字，其他寫程式用到的型別都是建立在這之上的，
如果沒有做成更好用的 type 的話會造成程式撰寫上的負擔，
於是 Fortran 提供了型別 (整數資料、浮點數陣列等等)，
於是有了 static type (宣告型別)&lt;/p&gt;
&lt;div class="section" id="lisp-dynamic-type"&gt;
&lt;h3&gt;Lisp &amp;amp; Dynamic type&lt;/h3&gt;
&lt;p&gt;在 Fortran 出現後幾年，出現了 Lisp，
1958 年的 Lisp 只有兩種型別 : list、atom，不是 list 的都是 atom&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cons cell&lt;/li&gt;
&lt;li&gt;car, cdr&lt;/li&gt;
&lt;li&gt;S-expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lisp 的 list 裡事先無法知道 cons cell 裡面指到的是 cons cell 還是 atom，
本質上可說是 polymorphism 的 data structure，
所以 Lisp 採用的是 &amp;quot;資料本身還有描述自己型別的資訊&amp;quot;，又稱為動態型別&lt;/p&gt;
&lt;pre class="literal-block"&gt;
  cons cell

+-----+-----+
| car | cdr |
+-----+-----+
   |     |
   |     |
 +---+  +-----+-----+
 | 5 |  | car | cdr |
 +---+  +-----+-----+
 atom      |     |
           |     |
        +----+  nil
        | 13 |  atom
        +----+
         atom
&lt;/pre&gt;
&lt;p&gt;Static Type 起自 Fortran、Dynamic Type 起自 Lisp，
在最初的物件導向語言 Simula 裡，出現了和 Dynamic Type 類似的型別 Ref (Simula 中除了物件之外都是靜態型別)，
之後從 Simula 的物件導向概念延生出的 Smalltalk 和 Lisp 一樣全面採用動態型別，
1980 年代前半，受到 Simula 影響而誕生了 C++，重要概念 : &amp;quot;subclass 可以視為 base class 的 instance&amp;quot;&lt;/p&gt;
&lt;p&gt;Duck Typing 的概念是: &amp;quot;走路像鴨子，看起來像鴨子，那就可以把他當成鴨子&amp;quot;&lt;/p&gt;
&lt;p&gt;Dynamic Type 裡避免名去檢查型別，而改以檢查是否有某 method&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>血月之 Stellarium</title><link href="/posts/2014/10/stellarium/" rel="alternate"></link><updated>2014-10-10T19:13:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/stellarium/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stellarium.org/"&gt;Stellarium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;月全蝕的時候從朋友那知道的 Open Source 軟體，
看起來蠻棒的 XD&lt;/p&gt;
</summary><category term=""></category></entry><entry><title>心理學概論 之 Chomsky</title><link href="/posts/2014/10/psychology-intro-chomsky/" rel="alternate"></link><updated>2014-10-10T18:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/psychology-intro-chomsky/</id><summary type="html">&lt;p&gt;這禮拜二在上心理學概論的時候，上到打瞌睡 zzz，
都是因為整天都有課 (晚上也有)，前面又上完體育課很累 ...&lt;/p&gt;
&lt;p&gt;就在半睡半醒中，突然聽到了 Chomsky !&lt;/p&gt;
&lt;p&gt;頓時精神力上升，腦中馬上浮現 Chomsky Normal Form，
馬上抬頭看一下 slide，上面寫著 Noam Chomsky，
立馬 Google ...&lt;/p&gt;
&lt;p&gt;果然是同個人啊 ...&lt;/p&gt;
&lt;p&gt;在上心理學的時候可以想到正規也是個奇妙的狀況 Orz&lt;/p&gt;
</summary><category term="psychology"></category></entry><entry><title>Pythoner 讀 「松本行弘的程式世界」 - part 1</title><link href="/posts/2014/10/pythoner-read-ruby-book-1/" rel="alternate"></link><updated>2014-10-10T16:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-10-10:posts/2014/10/pythoner-read-ruby-book-1/</id><summary type="html">&lt;p&gt;這邊是讀了書上內容的節錄和獨後自己查的資料&lt;/p&gt;
&lt;p&gt;目前心得 : 可以看到一些觀念，但是有些例子就 ... (尤其是少部份有提到 Python 的)&lt;/p&gt;
&lt;div class="section" id="ch-14-1-functional-programming"&gt;
&lt;h2&gt;ch 14-1 - functional programming&lt;/h2&gt;
&lt;p&gt;是的沒錯，我第一個翻的章節是 chapter 14 ...&lt;/p&gt;
&lt;p&gt;Fortran 設計者為 John Backus (John Backus 還發明了 BNF)，
其在 1997 年 Turing Award 上發表的語言 &amp;quot;FP&amp;quot; 被認為是 Functional Programming 的起點&lt;/p&gt;
&lt;p&gt;Feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Higher-order function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;pure function (no side effect)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Referential transparency&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="lisp"&gt;
&lt;h3&gt;Lisp&lt;/h3&gt;
&lt;p&gt;Lisp 的基礎是 Alonzo Church 提的 lambda calculus，也支援 Higher-order function&lt;/p&gt;
&lt;p&gt;Lisp 具有一些 functional 的特性，但不是純粹的 functional&lt;/p&gt;
&lt;p&gt;Lisp 最大的特色是 S-expression&lt;/p&gt;
&lt;p&gt;另一個特色是 list (LISP = LISt Processing)，Lisp 把節點稱為 cons cell，
cons 是從建立新 cell 的 function : cons (construct) 而來，
而一開始的 Lisp 環境把第一個資料放在 address register，第二個放在 data register，
所以 car = content of address register、cdr = content of data register，
構成 list 的資料成為 atom (symbol or number)&lt;/p&gt;
&lt;p&gt;cons cell:&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;cdr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lisp 的 list 底下結構是 singly linked-list&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="haskell"&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;p&gt;Haskell Curry 的 Combinatory logic 和 Alonzo Church 的 lambda calculus 幾乎相同的東西&lt;/p&gt;
&lt;p&gt;Haskell feature:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no side effect&lt;/li&gt;
&lt;li&gt;Higher-order function&lt;/li&gt;
&lt;li&gt;partial function application&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;type inference&lt;/li&gt;
&lt;li&gt;list comprehension&lt;/li&gt;
&lt;li&gt;block by indent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell 有靜態多型的型別系統和 type inference，可以在接近 duck typing 的情況下，
在編譯時完成 type checking&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocaml"&gt;
&lt;h3&gt;OCaml&lt;/h3&gt;
&lt;p&gt;OCaml 歷史比 Haskell 早，誕生於法國&lt;/p&gt;
&lt;p&gt;和 Haskell 相比有些不同:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;has side effect&lt;/li&gt;
&lt;li&gt;no lazy evaluation&lt;/li&gt;
&lt;li&gt;module system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OCaml 想要 lazy evaluation 時可以明確標示&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="erlang"&gt;
&lt;h3&gt;Erlang&lt;/h3&gt;
&lt;p&gt;Erlang 是為了平行處理而設計的，設計受到 Prolog 影響&lt;/p&gt;
&lt;p&gt;dynamic type, no lazy evaluation&lt;/p&gt;
&lt;p&gt;以 actor 理論為基礎&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Block&lt;/li&gt;
&lt;li&gt;Proc object&lt;/li&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;enumerator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/"&gt;What Is the Difference Between a Block, a Proc, and a Lambda in Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="c1"&gt;# block is everything between the do and end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;lam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# The &amp;#39;&amp;amp;&amp;#39; tells ruby to turn the proc into a block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-2-code-generation"&gt;
&lt;h3&gt;ch 14-2 Code Generation&lt;/h3&gt;
&lt;p&gt;nothing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-3-memory-management"&gt;
&lt;h3&gt;ch 14-3 Memory Management&lt;/h3&gt;
&lt;p&gt;因為一些概念之前有看過了，所以這邊算是複習和加強 XD&lt;/p&gt;
&lt;p&gt;Garbage Collection 的誕生是在 1960 年代，
起因於 Lisp 需要產生大量 cons cell object，不能明確管理各個 object&lt;/p&gt;
&lt;p&gt;GC 衡量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;GC 所佔的時間比例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Pause Time&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;平均 pause time&lt;/li&gt;
&lt;li&gt;最長的 pause time&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="no-gc"&gt;
&lt;h4&gt;no GC&lt;/h4&gt;
&lt;p&gt;例如 C 或 C++，programmer 自己管理 memory，自己 malloc/free、new/delete&lt;/p&gt;
&lt;p&gt;programmer 沒把程式寫好會造成:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;dangling pointer (因為把還在用的 free 掉了)&lt;/li&gt;
&lt;li&gt;memory leak (該 free 的沒 free 到)&lt;/li&gt;
&lt;li&gt;double free&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要檢查這些問題可以使用 valgrind&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gc-algorithm"&gt;
&lt;h4&gt;GC algorithm&lt;/h4&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="50%" /&gt;
&lt;col width="31%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Problem&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;reference counting&lt;/td&gt;
&lt;td&gt;用一數字紀錄被 reference 的次數，最容易實作&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;cycle reference&lt;/li&gt;
&lt;li&gt;不適合平行處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; sweep&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，沒標到的清掉&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;objects 量上升時，速度容易下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mark &amp;amp; compact&lt;/td&gt;
&lt;td&gt;把 trace 的到的 objects 做標記，
接著把標過的集合起來，
如此一來 memory 操作就有了區域性，
讓快取之類的機制效率提高&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;比 mark &amp;amp; sweep 慢&lt;/li&gt;
&lt;li&gt;不能使用保守 GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;copying&lt;/td&gt;
&lt;td&gt;把還在用的複製一份到新的 memory 區域 (會分成新和舊)，
接著把舊區域整個清掉&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Generational&lt;/td&gt;
&lt;td&gt;多數 objects 會在短時間內變成 garbage，所以可以用 age 做不同處理，
會分成 minor GC 和 major GC，
有 write barrier (紀錄 old object 裡用到 young object 的狀況，這紀錄稱為 remembered set)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Conservative&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;在 C 這種本來沒有 GC 的語言，compile 後就沒有區分 integer 和 pointer 的資訊，
因為 CPU 不需要，這時可以使用 Conservative 實作，概念是 &amp;quot;碰到 address 相同時，
代表可能被引用，視為存活&amp;quot;&lt;/p&gt;
&lt;p class="last"&gt;(heap 會整個被掃過)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Incremental&lt;/td&gt;
&lt;td&gt;把 GC 操作切割，以降低每次 GC 的最長時間，也用了 write barrier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Concurrent&lt;/td&gt;
&lt;td&gt;機制和 Incremental GC 類似，利用 write barrier 維持狀態資訊，實作時也可能有專用的 GC thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bitmap Marking&lt;/td&gt;
&lt;td&gt;Linux 這類 Unix-like 在 fork 時 memory addres 是 copy-on-write 的，
可以避免不必要的 page copy，但是和 GC 的搭配不太好，GC 在改動時就會大量複製，
Bitmap Marking 就是用來降低複製 page 的次數，不時直接對 object 做標記，
而是有另外的空間用於標記，所以複製的只有標記用的 Bitmap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-4-ruby-with-c"&gt;
&lt;h2&gt;ch 14-4 Ruby with C&lt;/h2&gt;
&lt;p&gt;介紹 Ruby 如何和 C 一起用&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ch-14-5-open-source"&gt;
&lt;h2&gt;ch 14-5 Open Source&lt;/h2&gt;
&lt;p&gt;Open Source 發展簡史&lt;/p&gt;
&lt;/div&gt;
</summary><category term="book"></category></entry><entry><title>People who make VMs</title><link href="/posts/2014/09/vm-people/" rel="alternate"></link><updated>2014-09-28T13:25:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-28:posts/2014/09/vm-people/</id><summary type="html">&lt;p&gt;剛剛碰巧看到一個 &lt;a class="reference external" href="http://stackoverflow.com/questions/5168718/what-blocks-ruby-python-to-get-javascript-v8-speed/5172833#5172833"&gt;StackOverflow 上的回應&lt;/a&gt; ，
原來 V8 的 team 和 HotSpot JVM 的有很大重複，還有其他像是 Self VM、Animorphic Smalltalk VM、OOVM 都是，
而其中的 tech lead 叫 Lars Bak。&lt;/p&gt;
&lt;p&gt;Lars Bak 是 Dart 語言的創始人 (Dart 語言是 Google 想用來取代 Javascript 的一個語言) 也是 V8 和 Java HostSpot JVM 的領導，對於 VM 的技術有非常多的經驗，住在丹麥的 Aarhus 的農舍。&lt;/p&gt;
&lt;p&gt;剛好有找到一篇報導，請見下面連結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.ft.com/cms/s/0/03775904-177c-11de-8c9d-0000779fd2ac.html"&gt;The genius behind Google's browser&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hksilicon.com/kb/articles/6993/Lars-BakGoogle-Chrome"&gt;對岸翻譯版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="vm"></category></entry><entry><title>Incremental Garbage Collector</title><link href="/posts/2014/09/incremental-gc/" rel="alternate"></link><updated>2014-09-26T21:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/incremental-gc/</id><summary type="html">&lt;div class="section" id="pause-time"&gt;
&lt;h2&gt;前情提要 - Pause Time&lt;/h2&gt;
&lt;p&gt;在 CPython 中使用的是 reference count，所以當 count 變成 0 時就必須把空間回收，
當一個巨大的 object 要被回收時，就會產生不小的 pause time，但是這個時間是 deterministic 的。
reference count 有個問題就是 reference cycle，為了找出 cycle 就必須爬過所有 objects，
但是這就會產生 nondeterministic GC pause。&lt;/p&gt;
&lt;p&gt;reference count 是把回收的 cost 分開在各個時間點，而 tracing 的 GC 是把回收的 cost 集中在某一段時期，
回收所需時間可能不低，在這之中得把程式 pause，可能會讓使用者感覺到停頓，
而 Incremental GC 想做的就是把這段過程拆分成好幾個小步驟，
分別在不同時間執行 (打散)，讓程式執行更平順。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tech.mozilla.com.tw/posts/1605/你丟我撿！神奇的-firefox-內部記憶體回收機制"&gt;你丟我撿！神奇的 Firefox 內部記憶體回收機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/dmandelin/2012/07/20/incremental-gc-now-in-firefox-aurora/"&gt;Incremental GC now in Firefox Aurora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.mozilla.org/javascript/2012/08/28/incremental-gc-in-firefox-16/"&gt;Incremental GC in Firefox 16!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://morepypy.blogspot.tw/2013/10/incremental-garbage-collector-in-pypy.html"&gt;Incremental Garbage Collector in PyPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="gc"></category></entry><entry><title>Generational Garbage Collection for SpiderMonkey</title><link href="/posts/2014/09/ggc-spidermonkey/" rel="alternate"></link><updated>2014-09-26T12:27:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-26:posts/2014/09/ggc-spidermonkey/</id><summary type="html">&lt;p&gt;原文章 : &lt;a class="reference external" href="https://hacks.mozilla.org/2014/09/generational-garbage-collection-in-firefox/"&gt;Generational Garbage Collection in Firefox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天看到上面那篇 SpiderMonkey 的 Generational Garbage Collection 的文章，
就讀一讀理解一下並做些紀錄&lt;/p&gt;
&lt;div class="section" id="generational-garbage-collection"&gt;
&lt;h2&gt;Generational garbage collection&lt;/h2&gt;
&lt;p&gt;Generational garbage collection 的核心觀念就是 &amp;quot;大多數的物件的生命都很短&amp;quot;，
所以就修改原本的 GC 設計，依照不同的存在時間有不同的處理方式，
對於 Tracing 的 GC 會需要去掃過物件來檢查是否有物件已經成為 Garbage，
當程式會製造出大量的物件時，檢查的時間就會上升，這時如果用已經存在的時間來區分，
而做不同的處理方式時，多數的短期物件就可以更快的被回收，也不必頻繁檢查會長期存在的物件。&lt;/p&gt;
&lt;p&gt;原文章裡的 SpiderMonkey 利用了這種方式來讓 temporary objects 的 penalty 下降&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nursery-tenured"&gt;
&lt;h2&gt;Nursery &amp;amp; Tenured&lt;/h2&gt;
&lt;p&gt;多數的 objects 都會 allocate 到一個叫做 Nursery 的 memory region，
當 Nursery 滿的時候，只檢查 Nursery 裡的 objects，此時多數的 short-lived temporary objects 就會被清掉，
而這樣的檢查相對於原本 (檢查全部的 objects) 也來的快&lt;/p&gt;
&lt;p&gt;此時，依然存活的 objects 就會被放到 Tenured region&lt;/p&gt;
&lt;p&gt;Tenured heap 仍然會回收 grabage，但是頻率會比 Nursery 來的低&lt;/p&gt;
&lt;p&gt;最終然會需要原整的 GC，但是頻率也會比 Nursery GC 來的低&lt;/p&gt;
&lt;p&gt;所以就分成下面這種情況&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="14%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Garbage Collection&lt;/th&gt;
&lt;th class="head"&gt;Scan Place&lt;/th&gt;
&lt;th class="head"&gt;frequency&lt;/th&gt;
&lt;th class="head"&gt;speed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;minor GCs&lt;/td&gt;
&lt;td&gt;Nursery&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;fast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;major GCs&lt;/td&gt;
&lt;td&gt;full heap&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;slow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="68%" /&gt;
&lt;col width="32%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;memory region&lt;/th&gt;
&lt;th class="head"&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Nursery&lt;/td&gt;
&lt;td&gt;young&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tenured&lt;/td&gt;
&lt;td&gt;old&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Tenured object 裡面可能有指向 Nursery object 的資料
(Nursery objects 因為某些 Tenured objects 而持續 alive)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;解法一&lt;/h3&gt;
&lt;p&gt;掃過整個 Tenured heap 來找出指到 Nursery objects 的 pointer，
但是這麼做的話就違背了 GGC 的設計本意，所以需要更 cheap 的解決方案&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;解法二&lt;/h3&gt;
&lt;p&gt;先注意到，在 heap graph 中 Tenured 指向 Nursery 的 edges 不會存在很久，
因為接下來 minor GC 就會把 Nursery 中的 survivors 移到 Tenured heap&lt;/p&gt;
&lt;p&gt;所以我們在意的是從上次 minor/major GC 後，有更動過的 Tenured objects，
而這些 objects 的數量相對來說就會比較少&lt;/p&gt;
&lt;p&gt;因此我們做的是在更動 Tenured objects 時，檢查是否有 Nursery pointers，
如果有的話就把這些 cross-generational edges 紀錄到 &lt;strong&gt;store buffer&lt;/strong&gt; ，
這樣的事情稱為 write barrier&lt;/p&gt;
&lt;p&gt;在 minor GC 時，我們就跑過一遍 store buffer 裡的資料並且把裡面的 Nursery objects 標記為存在&lt;/p&gt;
&lt;p&gt;(edge 的來源都需要被使用，因為當 Nursery objects 被標記為存在之後，將會移往 Tenured area，
所以原本的 Tenured (裡面有指向 Nursery 的 pointer) 也需要被 update&lt;/p&gt;
&lt;p&gt;minor GC 需要的執行時間決定於新 cross-generational edges 和 Nursery 裡的 objects 數量，
當然，追蹤 store buffer records 或是單純的檢查是否要新增 record 都會讓 normal heap access 有些許的效能損失，
所以某些 code 可能在 GGC 裡會變慢一些&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="gc"></category></entry><entry><title>Python coding style</title><link href="/posts/2014/09/python-coding-style/" rel="alternate"></link><updated>2014-09-13T15:20:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-13:posts/2014/09/python-coding-style/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;不能不提的 &lt;a class="reference external" href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://google-styleguide.googlecode.com/svn/trunk/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Python"></category></entry><entry><title>Levenshtein distance</title><link href="/posts/2014/09/levenshtein-distance/" rel="alternate"></link><updated>2014-09-10T01:16:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-09-10:posts/2014/09/levenshtein-distance/</id><summary type="html">&lt;p&gt;第一次碰這類的東西，做些筆記 XD&lt;/p&gt;
&lt;div class="section" id="edit-distance"&gt;
&lt;h2&gt;edit distance&lt;/h2&gt;
&lt;p&gt;edit distance = 更動多少次數後，兩字串會一樣&lt;/p&gt;
&lt;p&gt;計算方式有很多種&lt;/p&gt;
&lt;table border="1" class="table table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="34%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;insertion&lt;/th&gt;
&lt;th class="head"&gt;deletion&lt;/th&gt;
&lt;th class="head"&gt;substitution&lt;/th&gt;
&lt;th class="head"&gt;transposition (換位)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Hamming distance&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Longest Common Subsequence&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Levenshtein distance&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Damerau-Levenshtein distance&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="levenshtein-distance"&gt;
&lt;h2&gt;Levenshtein distance&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Levenshtein_distance"&gt;http://en.wikipedia.org/wiki/Levenshtein_distance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance"&gt;http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Levenshtein distance 是用來評估兩 sequence 差別度的一種 string metric，
兩個字串的 Levenshtein distance 就是一個字串變成另一個字串的最小字元編輯次數 (insert, delete, substitute)，
由俄國科學家 Vladimir Levenshtein 在 1965 年提出&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;substitution : s &lt;strong&gt;a&lt;/strong&gt; t -&amp;gt; s &lt;strong&gt;i&lt;/strong&gt; t&lt;/li&gt;
&lt;li&gt;insertion : st -&amp;gt; s &lt;strong&gt;i&lt;/strong&gt; t&lt;/li&gt;
&lt;li&gt;deletion : si &lt;strong&gt;a&lt;/strong&gt; t -&amp;gt; sit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看一段簡單的 Python code 來了解運算:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
               &lt;span class="n"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;傳入 min function 的有 3 個，
第一個是兩邊都減一個字元，如果減去字元不一樣就把次數加 1 (substitute)，
第二個是 a 減去一個字元並且次數加一，這可以看成 a 字串的 delete 或是在 b 前面 insert 了和 a match 的字元，
第三個跟第二個雷同&lt;/p&gt;
&lt;p&gt;當然，這個寫法很沒有效率，做了很多次不必要的遞迴，用 CPython (Python 3.4) 下去跑測試，
丟個簡單的字串當測試 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lev('fasfasf',&lt;/span&gt; 'afvq')&lt;/tt&gt; 這個做法大約要 1.9 ms&lt;/p&gt;
&lt;p&gt;簡單地用 lru cache 來做 DP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@lru_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                   &lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_lev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用 lru cache 來簡單地做 DP 後，剛剛的測試現在大約變成 370 µs&lt;/p&gt;
&lt;p&gt;當然，還有很多改進空間，像是&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;自己實際寫 DP&lt;/li&gt;
&lt;li&gt;判斷字串相同就直接回傳 0 (對於有很多相同子字串的情況可以用字串比對的 cost 換掉一些遞迴)&lt;/li&gt;
&lt;li&gt;減去頭尾相同的子字串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要速度的話: &lt;a class="reference external" href="https://github.com/ztane/python-Levenshtein"&gt;python-Levenshtein&lt;/a&gt;
，C 寫的 Python extension，剛剛的測試丟下去大概會變成 300 ns 以內&lt;/p&gt;
&lt;p&gt;計算的 cost 大約會是 O(len(a) * len(b))，所以在幫助 fuzzy string searching 的時候，
比較的字串同常會比較小，以便於提升速度&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;其他性質&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;lower bound : 兩字串的長度差&lt;/li&gt;
&lt;li&gt;upper bound : 較長的字串的長度&lt;/li&gt;
&lt;li&gt;只有當字串相等時會是 0&lt;/li&gt;
&lt;li&gt;當字串長度相同時，Hamming distance 會是 Levenshtein distance 的 upper bound&lt;/li&gt;
&lt;li&gt;[三角不等式] 兩個字串的 Levenshtein distance 不會大於分別和第三個字串的 Levenshtein distance 的合&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;使用情境&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;spell checkers&lt;/li&gt;
&lt;li&gt;OCR&lt;/li&gt;
&lt;li&gt;assist natural language translation based on translation memory&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Record_linkage"&gt;http://en.wikipedia.org/wiki/Record_linkage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="Fuzzy"></category></entry><entry><title>About Stackless Python</title><link href="/posts/2014/02/stackless-python/" rel="alternate"></link><updated>2014-02-24T19:44:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-24:posts/2014/02/stackless-python/</id><summary type="html">&lt;p&gt;Stackless Python 背後的由來以及現況 ~&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/588958/what-are-the-drawbacks-of-stackless-python/590412#590412"&gt;聽故事去&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>Chart.js 簡單的畫出 Chart</title><link href="/posts/2014/02/chart-js/" rel="alternate"></link><updated>2014-02-22T14:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-22:posts/2014/02/chart-js/</id><summary type="html">&lt;script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"&gt;&lt;/script&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; 是利用 HTML5 的 canvas 去畫的，
而 Chart.js 這個 library 本身是 open source 的 (MIT license) (&lt;a class="reference external" href="https://github.com/nnnick/Chart.js"&gt;Chart.js - github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;所以到底要怎麼用呢？&lt;/p&gt;
&lt;p&gt;其實要用這個 library 很簡單，
首先要先把 Chart.js (或 Chart.min.js) include 進來 (這邊先用 CDN 上的做範例，要擺到自己機器上的再去修改 src)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再來是要有畫布啦 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著是給資料然後畫圖 ~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#F38630&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#E0E4CC&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#69D2E7&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//Get the context of the canvas element we want to select&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myNewChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;canvas id="myChart" width="400" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
    var data = [
        {
            value: 30,
            color:"#F38630"
        },
        {
            value : 50,
            color : "#E0E4CC"
        },
        {
            value : 100,
            color : "#69D2E7"
        }
    ];
    var ctx = document.getElementById("myChart").getContext("2d");
    var myNewChart = new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;p&gt;Chart.js 目前有六種 Charts，
可以在 &lt;a class="reference external" href="http://www.chartjs.org/docs/"&gt;官方文件&lt;/a&gt; 看到相關的設定、資料格式，
每個 Chart 除了本身的資料外，還有一些 option 可以調整，
例如要不要 animation 啦、要不要顯示 label 啦 ... etc&lt;/p&gt;
&lt;div class="section" id="chart"&gt;
&lt;h2&gt;六種 Chart&lt;/h2&gt;
&lt;div class="section" id="line-chart"&gt;
&lt;h3&gt;Line Chart&lt;/h3&gt;
&lt;canvas id="LineChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("LineChart").getContext("2d");
new Chart(ctx).Line(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="bar-chart"&gt;
&lt;h3&gt;Bar Chart&lt;/h3&gt;
&lt;canvas id="BarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["January","February","March","April","May","June","July"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("BarChart").getContext("2d");
new Chart(ctx).Bar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="radar-chart"&gt;
&lt;h3&gt;Radar chart&lt;/h3&gt;
&lt;canvas id="RadarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = {
    labels : ["Eating","Drinking","Sleeping","Designing","Coding","Partying","Running"],
    datasets : [
        {
            fillColor : "rgba(220,220,220,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : [65,59,90,81,56,55,40]
        },
        {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(151,187,205,1)",
            pointColor : "rgba(151,187,205,1)",
            pointStrokeColor : "#fff",
            data : [28,48,40,19,96,27,100]
        }
    ]
};
var ctx = document.getElementById("RadarChart").getContext("2d");
new Chart(ctx).Radar(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="polar-area-chart"&gt;
&lt;h3&gt;Polar area chart&lt;/h3&gt;
&lt;canvas id="PolarChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value : 30,
        color: "#D97041"
    },
    {
        value : 90,
        color: "#C7604C"
    },
    {
        value : 24,
        color: "#21323D"
    },
    {
        value : 58,
        color: "#9D9B7F"
    },
    {
        value : 82,
        color: "#7D4F6D"
    },
    {
        value : 8,
        color: "#584A5E"
    }
];
var ctx = document.getElementById("PolarChart").getContext("2d");
new Chart(ctx).PolarArea(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="pie-chart"&gt;
&lt;h3&gt;Pie chart&lt;/h3&gt;
&lt;canvas id="PieChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F38630"
    },
    {
        value : 50,
        color : "#E0E4CC"
    },
    {
        value : 100,
        color : "#69D2E7"
    }
];
var ctx = document.getElementById("PieChart").getContext("2d");
new Chart(ctx).Pie(data);
&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="doughnut-chart"&gt;
&lt;h3&gt;Doughnut chart&lt;/h3&gt;
&lt;canvas id="DoughnutChart" width="800" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var data = [
    {
        value: 30,
        color:"#F7464A"
    },
    {
        value : 50,
        color : "#E2EAE9"
    },
    {
        value : 100,
        color : "#D4CCC5"
    },
    {
        value : 40,
        color : "#949FB1"
    },
    {
        value : 120,
        color : "#4D5360"
    }

];
var ctx = document.getElementById("DoughnutChart").getContext("2d");
new Chart(ctx).Doughnut(data);
&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Javascript"></category></entry><entry><title>自製 template tags 和 filters</title><link href="/posts/2014/02/django-templatetags/" rel="alternate"></link><updated>2014-02-20T00:10:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-20:posts/2014/02/django-templatetags/</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起手式&lt;/h2&gt;
&lt;p&gt;要建立自己的 template tags 之前，要先在一個 app 資料架底下建立 &amp;quot;templatetags&amp;quot; 資料夾，
如果這些 tags 是跟 app A 有關的話，那很理所當然可以放在 app A 資料夾下的 &amp;quot;templatetags&amp;quot;，
如果是比較不能區分的話，可以建立一個 app 專門放 template tags。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意要有 __init__.py 來讓 Python 把這個資料夾當作 package&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自製的 tags 和 filter 就放在 templatetags 資料夾底下的檔案，
檔案名字就是在 template 要 load 時的名字&lt;/p&gt;
&lt;p&gt;結構可能長這樣:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;App/&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;__init__.py&lt;/div&gt;
&lt;div class="line"&gt;models.py&lt;/div&gt;
&lt;div class="line"&gt;templatetags/&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;__init__.py&lt;/div&gt;
&lt;div class="line"&gt;abc.py&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;view.py&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在 template 裡要用到 abc.py 這個檔案裡寫的 tags、filter 時，
就在 template 裡 &amp;quot;{% load abc %}&amp;quot;&lt;/p&gt;
&lt;p&gt;有包含 custom tags 的 app 要加到 &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt; 裡 &lt;strong&gt;{% load %}&lt;/strong&gt; 才會 work。&lt;/p&gt;
&lt;p&gt;(security feature: 你可以在一台機器上裝多個 template libraries 而不讓它們可以 access 機器上的每個 Django 的程式)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;鍛冶&lt;/h2&gt;
&lt;p&gt;要能製造出一個 valid 的 tag library 首先要有一個叫作 &lt;strong&gt;register&lt;/strong&gt; 的 &lt;strong&gt;template.Library&lt;/strong&gt; instance&lt;/p&gt;
&lt;p&gt;所以開頭會長這樣 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="filters"&gt;
&lt;h3&gt;filters&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="tags"&gt;
&lt;h3&gt;tags&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"&gt;Custom template tags and filters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Django default tags &amp;amp; filters&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;django/template/defaultfilters.py&lt;/li&gt;
&lt;li&gt;django/template/defaulttags.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Django"></category></entry><entry><title>[回憶] 2012 年夏 ~ 2014 年春</title><link href="/posts/2014/02/recall-2012-summer-2014-spring/" rel="alternate"></link><updated>2014-02-18T21:00:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-18:posts/2014/02/recall-2012-summer-2014-spring/</id><summary type="html">&lt;p&gt;一年半內除了學校的課程能學到些什麼？&lt;/p&gt;
&lt;p&gt;不多也不少，這樣而已&lt;/p&gt;
&lt;p&gt;(想到什麼就紀錄些什麼吧)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起頭&lt;/h2&gt;
&lt;p&gt;2012 年夏，正值升大學的時期，雖然進了資工系，但其實什麼都還不會，
暑假期間開始常上 BBS，後來看到上面的色碼還有其他的控制碼覺得很有趣，
接著就開始在上面試了一下，然後又看到某人在上面搞出一堆神奇的東西 (?)，
再來是開到上面的 vim mode (當時還不會用 vim)，
這算是初步接觸到 vim 的地方之一吧 XD (另外是鳥哥寫的文章)。&lt;/p&gt;
&lt;p&gt;之後拿到了社團 server 上的帳號，開始連進去亂試指令 w，
從此掉進無底的坑洞 (X，這時間大概有時候會翻翻鳥哥吧，
到了學校後開始接觸 FreeBSD，
就裝來玩玩看，翻翻 FreeBSD handbook，開始認識 configure、make、ports ... etc，
當時在 FreeBSD 上用的是 tcsh (因為社團 server 預設是 tcsh，所以先接觸到 XD)，
因為一些原因開始看怎麼寫 shell script (Bourne Shell 的)，
慢慢知道有 sed、awk 這些東西，
開始使用 regular expression (已經想不起來從哪個時間點開始了)。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;寫到這裡開始回去翻以前寫在 BBS 的文章回想 XD&lt;/p&gt;
&lt;p&gt;阿對一開始還去玩了 pi 的貪吃蛇 ~&lt;/p&gt;
&lt;p&gt;哦哦哦！BBS 上看到的有石頭文、guest 發文、... (?)&lt;/p&gt;
&lt;p&gt;原來暑假就有翻過 regular expression，只是沒有碰到要使用的地方就不熟 XD，
後來有在用就比較 OK 了 ~&lt;/p&gt;
&lt;p&gt;喔對，BBS 有聊天指令 XD&lt;/p&gt;
&lt;p&gt;看到移位碼就想起之前試一試發現，
原本應該擋掉的名片檔移位碼在我亂試的情況下發現有 bug XDDDD，
後來被 PO 到 sysop，之後又修掉了。&lt;/p&gt;
&lt;p&gt;原來當初 9 月開始就有去過 PyHUG，但是當時完全不會 Python zzz&lt;/p&gt;
&lt;p&gt;找到了 ~ &lt;strong&gt;2012/10/17 拋棄 Windows，轉用 Linux&lt;/strong&gt; ，
當時裝了 Ubuntu，DE 預設是 Unity，用沒多久後換成 Gnome 2，大概就這樣用了一學期。
寒假換成 LXDE 又用了一學期，中間好像有試過 Gnome 3 一陣子吧，
一下學期末把 WM 換成了 awesome wm，然後就離不開 awesome 一直到現在，
一下結束的暑假把 Ubuntu 換成了 Arch Linux ，變成 Arch Linux + awesome。&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;說到 Vim 啊 ...&lt;/p&gt;
&lt;p&gt;一開始其實看到很多次，但是都沒有真的把它拿來用，所以不熟 zzz。
後來毅然決然把所有編輯純文字的東西都只用 vim ，一陣子後就習慣整個操作，
不過當時對 hjkl 的移動還不是很熟，索性在 .vimrc 裡把方向鍵 map 掉，
只用 hjkl 移動，後來也就習慣了。&lt;/p&gt;
&lt;p&gt;一上結束的寒假稍微看了一下 .vimrc 的設定，調了一些東西和試了一些 plugin (雖然最後大多把 plugin 關了 XD)，
做的設定中幾個最常用到的是 paste mode 切換的快捷鍵、儲存時自動移除行尾多餘空白、下次開啟時回到關閉前的位置 ... etc。&lt;/p&gt;
&lt;p&gt;plugin 部份的話用 Vundle 管理很方便，在加上一小段 script 後，
到新的地方只要打開 vim 就會自動裝好 vundle，
接著就可以利用 vundle 很快的把你的 plugin 裝起來，
利用 vundle 後 update plugin 也一樣只需要一個 command。&lt;/p&gt;
&lt;p&gt;現在只要是純文字的東西我都用 vim，可以說是離不開了 XD，就連這篇文章也是我用 vim 打出來的 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;到底是從什麼時候開始比較常寫 Python 的我又忘了 (X&lt;/p&gt;
&lt;p&gt;剛開始因為別人介紹，陸陸續續有看一點 Python 的東西，社課後知道了 list、tuple，
不過這時還是沒有在使用它，後來假期有人約讀書會所以看了 Python tutorial 的前部份。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假 (不知道是不是這個時期開始)，因為在跟高中同學打 game，
那遊戲在有人踩到紀錄點時會存資料在 host user，
而在某次遊戲中有人不小心在很糟糕的時間點踩到了，
結果只能回溯到那悲慘的時間點，
後來我就想說寫個程式讓他去 check 有新紀錄時就 backup 一次，
就開始用 Python 寫個小程式去 check，
東查西查，開始對 Python 變比較熟一點，
後來為了能一次 check 多個檔案又嘗試了 Python 的 multiprocessing，
而另一個同學則是去寫了簡單的 GUI，
在看了他的 code 並幫忙修改後，稍微對 Python 的 class 有點感覺了，
然後這也是我第一次使用內建的 tkinter 做簡單的 GUI。&lt;/p&gt;
&lt;p&gt;之後開始愈來愈常寫 Python，慢慢的學會愈來愈多東西 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;筆記&lt;/h2&gt;
&lt;p&gt;做筆記的方式嘛 ...&lt;/p&gt;
&lt;p&gt;高中用過 Evernote 記了一點東西(不多)，
後來大一有陣子是 Google Docs + Markdown (本機)。&lt;/p&gt;
&lt;p&gt;一下結束後的暑假聽到 Sphinx 這玩意，
看起來還不錯，也看到別人寫出來的東西，
所以就開始變成寫 reStructuredText 、用 Sphinx generate HTML，
不過 Markdown 也還是有再用 (這篇就是用 Markdown 寫的)，
所以目前是 Markdown &amp;amp; reStructuredText 亂用中 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h2&gt;Version Control&lt;/h2&gt;
&lt;p&gt;我現在常用的 Version Control 是 git，
一開始也是不熟 (看了看還是沒常用)，後來把一些東西用 git 上去後，
變成只熟 add &amp;amp; commit (X，後來碰到一些狀況而對 checkout、push、partial add、cherry-pick、stash 比較熟一點，
目前是基本操作還 OK 啦 (自己說&lt;/p&gt;
&lt;p&gt;mercurial ...，目前無緣 XD，只在別人教的時候試過一次，不過因為已經慣用 git 了，所以 ... XD&lt;/p&gt;
&lt;p&gt;cvs 只在抓 FreeBSD kernel source 的時候用過 zzz&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;一個無底洞 (X&lt;/p&gt;
&lt;p&gt;我掉進去後就再也出不來了 XD&lt;/p&gt;
&lt;p&gt;因為已經太融入生活了，不知道該說什麼 ~&lt;/p&gt;
&lt;p&gt;現在用 Arch Linux 用的很開心  O w O&lt;/p&gt;
&lt;p&gt;改天想到再補東西吧 ~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="freebsd"&gt;
&lt;h2&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;FreeBSD 的部份算是配合修課做了點基本的學習，
內容大概有 FTP、Samba、ZFS、FAMP (FreeBSD + Apache + MySQL + PHP)、
NFS、amd (Berkeley Automounter)、NIS、PF、NAT、DHCP、SSL/TLS、Proxy、DNS、Postfix ...&lt;/p&gt;
&lt;p&gt;這些算是有基本的接觸過了 (有架出東西)，最不熟的大概是最後的 Mail Server 部份吧 zzz，
東西弄起來有點麻煩，最後交作業的時候 ClamAV 偵測病毒信件的部份沒弄好 = =。&lt;/p&gt;
&lt;p&gt;以前課程有 VPN，修課的時候剛好沒有，想之後找時間架來玩玩。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-css-javascript"&gt;
&lt;h2&gt;HTML, CSS, Javascript&lt;/h2&gt;
&lt;p&gt;這邊要從一下結束的暑假開始，
社團決定大家要一起用 Django 寫社團網站，
這時候就開始摸索 Django 和認識基本的 HTML，
不過 CSS 部份是由另一位負責，所以沒接觸。&lt;/p&gt;
&lt;p&gt;後來進 OH 去用 Django 改寫目前的網站，
OH 原本的網站是套 Bootstrap 2，我在做新網站的時候改用了 Bootstrap 3，
接著就因為 Bootstrap 3 改了很多地方，所以要到處去修 Orz，
中間調樣式的時候開始認識一些 CSS 的東西，
某些地方因為用到 Javascript 所以也開始有了點接觸。&lt;/p&gt;
&lt;p&gt;2014 2月，開始想用 GitHub Pages 來寫 blog，
於是開始使用 Pelican 這個 Python 寫的 static site generator，
因為可以用 Markdown 和 reStructuredText 所以可以很開心的用 vim 寫文章 ~~~&lt;/p&gt;
&lt;p&gt;在使用 Pelican 寫 blog 後，想說順便來試著自己寫個 theme 來看看，
所以就開始寫更多的 CSS，中間在調某些功能的時候用到了 Javascript，
所以也寫了一小段的 Javascript code。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h2&gt;Database&lt;/h2&gt;
&lt;p&gt;Database 的話只會一點點簡單的 SQL 語法，
大多是寫東西需要去查的，用一用就知道了幾個，
只用過 SQLite、MySQL、MariaDB，不過都不熟就是了 XD，
因為碰到的東西重點都不是在調 Database，
很多都只是接上去而已。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c"&gt;
&lt;h2&gt;C&lt;/h2&gt;
&lt;p&gt;說實話，C 其實只會些基本的東西，沒有很熟 XD&lt;/p&gt;
&lt;p&gt;現在只想到好幾個月前在 Wikipedia 的 Multiple dispatch 頁面看到的 C code 感覺還蠻有趣的 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;C++&lt;/h2&gt;
&lt;p&gt;一下的 OOP 課開始頻繁接觸 C++，
因為老師的課程安排，所以學了一些 C++11 的東西，
老師在 constructor 那部份講了好一陣子，
後來作業的關係寫了自己的 vector 和 list Orz，
還記得那時候在講 new，new operator、operator new、placement new ...&lt;/p&gt;
&lt;p&gt;某次作業好像用到了 C++11 加進來的 lambda expression。&lt;/p&gt;
&lt;p&gt;其實老師的講義寫了很多東西，只是我還沒能好好吸收起來 ...，
只好一定要好好補起來 = =&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;曾經在某陣子因為寫 C++ 作業的關係看了些 Makefile 的東西，
也寫了些簡單的 Makefile ...，不過現在差不多忘了 (X&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="awk"&gt;
&lt;h2&gt;awk&lt;/h2&gt;
&lt;p&gt;awk 好像寫過那麼一下 ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sed"&gt;
&lt;h2&gt;sed&lt;/h2&gt;
&lt;p&gt;sed 好像在某次作業用過，還有自己寫的 shell script 裡用過，
不過基本上 ... 不熟 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-script-bourne-shell"&gt;
&lt;h2&gt;shell script (Bourne Shell)&lt;/h2&gt;
&lt;p&gt;shell script 少數時候會因需求寫一點，
不過都是寫純 Bourne Shell 的 (X，
Bash 的只有在 .bashrc 裡寫過 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lua"&gt;
&lt;h2&gt;lua&lt;/h2&gt;
&lt;p&gt;接觸到 lua 是因為轉用 awesome wm 的關係 XD，
awesome wm 的設定檔是用 lua 寫的，
所以改的時候會看到一些 lua 語法 ~，
前陣子在看 coroutine 的時候又看到用 lua 去說明的文章，
不過說那麼多其實還是沒在寫 lua XD (根本沒好好學過)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="perl"&gt;
&lt;h2&gt;Perl&lt;/h2&gt;
&lt;p&gt;Perl 只有在寫作業 (irc bot、大量寄信程式、登入時間統計) 的時候用過，
寫完之後就沒用過了 (X，現在可以說是完全不會了 XD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;有想要接觸 Functional 的東西耶&lt;/p&gt;
&lt;p&gt;之後想找時間學 Haskell ~ (曾經在某天翻過，連基本的都差不多忘光了 XD&lt;/p&gt;
&lt;p&gt;最近寫 Python 開始慢慢使用 lambda、filter、map、reduce (X&lt;/p&gt;
&lt;/div&gt;
</summary><category term="recall"></category></entry><entry><title>XMLHttpRequest</title><link href="/posts/2014/02/XMLHttpRequest/" rel="alternate"></link><updated>2014-02-11T00:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-11:posts/2014/02/XMLHttpRequest/</id><summary type="html">&lt;p&gt;有了 XMLHttpRequest 就讓我們可以利用 Javascript 去做 request&lt;/p&gt;
&lt;p&gt;以下直接用一段 Javascript 去說明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是建立 XMLHttpRequest 物件，再來撰寫 readyState 改變時所要做的動作 ( &lt;strong&gt;onreadystatechange&lt;/strong&gt; )，
open method 去指定要做的 request，再來呼叫 send method 送出&lt;/p&gt;
&lt;div class="section" id="xmlhttprequest"&gt;
&lt;h2&gt;在收到回應後，XMLHttpRequest 物件會設定的一些屬性&lt;/h2&gt;
&lt;div class="section" id="readystate"&gt;
&lt;h3&gt;readyState&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;0 (UNSENT)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The object has been constructed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;1 (OPENED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The open() method has been successfully invoked. During this state request headers can be set using setRequestHeader() and the request can be made using the send() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;2 (HEADERS_RECEIVED)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All redirects (if any) have been followed and all HTTP headers of the final response have been received. Several response members of the object are now available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;3 (LOADING)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The response entity body is being received.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;4 (DONE)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此才在 onreadystatechange 裡做了 readyState 判斷，
on readyState change 顧名思義就是 readyState 有變動時會去 call 這個 method，
所以加上 readyState 的判斷後變成只有處理完後 &amp;quot;readyState 是 4 &amp;quot; 時才做動作&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status"&gt;
&lt;h3&gt;Status&lt;/h3&gt;
&lt;p&gt;就是 HTTP 的 Status Code&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsetext"&gt;
&lt;h3&gt;responseText&lt;/h3&gt;
&lt;p&gt;收到的內容&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responsexml"&gt;
&lt;h3&gt;responseXML&lt;/h3&gt;
&lt;p&gt;收到的內容 (XML 格式)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/XMLHttpRequest"&gt;XMLHttpRequest - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;Ajax (programming)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="XMLHttpRequest"></category><category term="ajax"></category></entry><entry><title>closure 概念</title><link href="/posts/2014/02/closure/" rel="alternate"></link><updated>2014-02-07T21:06:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-07:posts/2014/02/closure/</id><summary type="html">&lt;p&gt;Closure 擁有非區域變數且非參數的變數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個例子可以看到 x 是個 func 的區域變數，但是在 f 當中又用到 x，
對於 f 來說 x 既不是區域變數又不是參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python 3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 12&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;# 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;Closure (computer programming) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109906-javascript-closure"&gt;[JavaScript] Closure 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kvzhuang.net/posts/109890-closure-javascript-closure-private"&gt;[Closure] JavaScript使用 Closure模擬出 Private Member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://openhome.cc/Gossip/JavaScript/Closure.html"&gt;JavaScript Essence: Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="closure"></category><category term="program"></category></entry><entry><title>coroutine 概念</title><link href="/posts/2014/02/coroutine/" rel="alternate"></link><updated>2014-02-06T21:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/coroutine/</id><summary type="html">&lt;p&gt;直接往下到 Reference 看別人寫的文章比較好 (X&lt;/p&gt;
&lt;p&gt;coroutine 是由 Melvin Conway 在 1960 年代所提出來&lt;/p&gt;
&lt;div class="section" id="coroutine"&gt;
&lt;h2&gt;Coroutine 基本概念&lt;/h2&gt;
&lt;p&gt;Coroutine 可以視為 &lt;strong&gt;可以中斷及繼續執行的 function call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在程式語言中，通常這種中斷會用 &lt;strong&gt;yield&lt;/strong&gt; 來表示，中斷時程式狀態會被保留，下次就恢復到該狀態繼續執行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generator"&gt;
&lt;h2&gt;Generator&lt;/h2&gt;
&lt;p&gt;generator 又稱為 semicoroutine&lt;/p&gt;
&lt;p&gt;雖然 generator 一樣可以中斷、繼續，但是 coroutine 可以指定從哪裡繼續執行，而 generator 不行，generator 只能回到上次中斷處&lt;/p&gt;
&lt;p&gt;但是 coroutine 可以用 generator 實作出來&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coroutines-in-python"&gt;
&lt;h2&gt;Coroutines in Python&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/"&gt;Improve Your Python: 'yield' and Generators Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/3.4/library/asyncio-task.html"&gt;Tasks and coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/"&gt;Coroutine: 入門篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/implement-iterators-by-coroutine/"&gt;使用 Coroutine 實作 Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine/"&gt;使用 Coroutine 改寫狀態機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://electronic-blue.herokuapp.com/blog/2012/06/rewrite-state-machines-by-coroutine-part-2/"&gt;使用 Coroutine 改寫狀態機－續&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.linux.org.tw/~jserv/archives/001848.html"&gt;使用 coroutine 實做 user-level thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coroutine"&gt;Coroutine - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="coroutine"></category><category term="program"></category></entry><entry><title>Python - @wraps</title><link href="/posts/2014/02/python-wraps/" rel="alternate"></link><updated>2014-02-06T11:30:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-06:posts/2014/02/python-wraps/</id><summary type="html">&lt;p&gt;在這邊先假設看這篇文章的都知道 decorator&lt;/p&gt;
&lt;p&gt;在使用 decorator 時，若沒有經過處理，可能會造成 function 的 property 改變，例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   haha , this is in haha function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 func1 的 &lt;cite&gt;__name__&lt;/cite&gt; 和 &lt;cite&gt;__doc__&lt;/cite&gt; 都改變了，這通常不是我們想要的，還有可能在 debug 的時候造成麻煩&lt;/p&gt;
&lt;p&gt;因此 Python 有了 wraps 這個 decorator 去處理這個問題 (在 functools 裡)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in test function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;haha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in haha function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;haha&lt;/span&gt;

&lt;span class="nd"&gt;@test&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this is in func1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;func1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# OUTPUT :&lt;/span&gt;
&lt;span class="c"&gt;#   func1 , this is in func1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，加上了 &amp;#64;wraps 後維持了 function 本來的 property ~&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>初次使用 Pelican</title><link href="/posts/2014/02/pelican/" rel="alternate"></link><updated>2014-02-01T14:33:00+08:00</updated><author><name>wdv4758h</name></author><id>tag:,2014-02-01:posts/2014/02/pelican/</id><summary type="html">&lt;p&gt;首先，什麼是 &lt;a class="reference external" href="http://docs.getpelican.com/en/"&gt;Pelican&lt;/a&gt; 呢？
Pelican 是個 Python 寫的靜態網站 generator，
你可以使用 Markdown, reStructuredText, AsciiDoc 等 markup language 作為撰寫的格式，
然後經由 Pelican 去生成靜態的網頁，經由這種方式，可以方便地使用你喜歡的文字編輯器去撰寫你的文章，
還可以結合 Version Control 去管理，
而由於生成的網頁是靜態的，所以可以放到 Github Pages 或者其他可以放置靜態網頁的地方去 Host，無疑是個很方便的模式。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Pelican 初步設定&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="theme"&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="disqus-support"&gt;
&lt;h2&gt;Disqus Support&lt;/h2&gt;
&lt;p&gt;Pelican 要支援 Disqus 非常簡單，首先只要在你的 Disqus 新增好你的網站，獲得你的 Disqul url 後，
只要在你的 pelicanconf.py 裡新增 DISQUS_SITENAME = 'your-disqus-url' 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;my-blog.disqus.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="Python"></category></entry></feed>