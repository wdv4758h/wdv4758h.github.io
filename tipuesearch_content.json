{"pages":[{"text":"剛剛要做系統更新的時候， 發現我這邊 Arch Linux 機器上的 virtualenv 要從 1.11.6-2 升到 12.0.5-1， 一看到覺得這版本會不會跳太大了 XD， 去翻了 virtualenv - changes 才知道在 12 月底的時候有做過版本號規則的改動 XD， 從 1.11 變 12.0 www","tags":"Misc","loc":"/posts/2015/01/virtualenv-version-change/","title":"virtualenv 版本號異動"},{"text":"剛好看到一個 Vim 的 Plugin 叫作 rogue (GitHub repo 在這裡 katono/rogue.vim ) 如果看到 rogue 這個詞會有反應的， 極有可能知道 roguelike 這個遊戲種類， 沒錯這個 Plugin 指的就是這種類的起源 Rogue 這款遊戲， 這遊戲以及其衍生出的 roguelike 的遊戲一直以來都包含著好玩的遊戲的重要要素 ~， 如果對於 roguelike 不熟悉也沒關係， 可以先看看這篇豐富的介紹文 Roguelike 到底是啥 (其中的發展還涉及了當時的 Unix 以及 BSD 還有 curses 這個 library)， roguelike 遊戲的元素到現在都還是處處可見， 早期知名的像是 NetHack (介紹文 : Jedi - 如果你一生只打算做一件事的話，玩 NetHack )， 最近很紅的像是 The Binding Of Issac ， 而這 Vim Plugin 的作者則是把 rogue 這款遊戲 (Clone 版本) porting 到 Vim 上了 ... 用 Vundle 把 Plugin 裝完後只要在 Vim 裡下 :Rogue 就可以開始遊戲 ... 雖然這對我使用 Vim 來編輯一點幫助也沒有 XD， 但是看到有人對這遊戲如此熱愛就讓我想紀錄一下 ~","tags":"Misc","loc":"/posts/2015/01/vim-plugin-rogue/","title":"Vim Plugin - rogue"},{"text":"9 個 GIF 動畫，看懂 Web 演化史 原文 : The History Of Web Design Explained In 9 GIFs GIFs 來源 : A brief history of web design for designers","tags":"Misc","loc":"/posts/2015/01/web-history-9-gifs/","title":"[文章閱讀] 9 個 GIF 動畫，看懂 Web 演化史"},{"text":"Basic Linux IPC Wikipedia - Inter-process communication [Linux.conf.au 2013] - An Introduction to Linux IPC Facilities [Linux.conf.au 2013] - An Introduction to Linux IPC Facilities - slide sockets FIFOs shared memory D-Bus D-Bus is a message bus system for inter-process communication ( IPC ) D-Bus Wikipedia - D-Bus Freedesktop - Introduction to D-Bus Linux From Scratch - D-Bus D-Bus Specification D-Bus is enabled automatically when using systemd because dbus is a dependency of systemd. What's D-Bus a powerful IPC system the closest thing to a standard in this area as can be found on Linux provides a nice method-call transaction mechanism has fundamental inefficiencies of the user-space implementation well suited to control tasks works well to tell a sound server to change the volume less so for anything that has to carry significant amounts of data one would not want to try to send the actual audio data over the bus In D-Bus a call-return message requires 10 message copies , 4 message validations , 4 context switches D-Bus has no timestamps on messages not available at early boot We need a better implementation -> kdbus D-Bus - Architecture libdbus dbus-daemon wrapper libraries based on particular application frameworks Interesting : In 2013 the systemd project rewrote libdbus in an effort to simplify the code, but it turned out to significantly increase the performance of D-Bus as well. In preliminary benchmarks, BMW found that the systemd D-Bus library increased performance by 360%. kdbus D-Bus in the kernel [linux.conf.au 2014] D-Bus in the Kernel - slide ALS: Linux interprocess communication and kdbus (May 30, 2013) The unveiling of kdbus (Jan 13, 2014) Linux Kernel only have primitives IPC : sockets, FIFOs, and shared memory kdbus is a in-kernel implementation of D-Bus can carry large amounts of data even used for gigabyte-sized message streams have zero-copy message passing worst case : 2 copy operations , 2 validations , 2 context switches all messages carry timestamps full credential information (user ID, process ID, SELinux label, control group information, capabilities, and much more) is passed with each message always available to the system (no need to wait for the D-Bus daemon to be started) Linux security modules can hook into it directly various race conditions have been fixed API has simplified Kdbus is implemented as a character device in the kernel signal broadcasting mechanism has been rewritten to use Bloom filters to select recipients There is a user-space proxy server that can be used by older code that has not been rewritten to use the new API, so everything should just work on a kdbus-enabled system with no code changes required. the new memfd syscall was merged into Linux kernel 3.17 memfd is a mechanism similar to Android's ashmem that allows zero-copy message passing in KDBUS. Android \"ashmem\" subsystem Android Binder Kdbus meets linux-kernel (Nov 4, 2014) D-Bus, FreeDesktop, and lots of madness Hacker News - D-Bus, FreeDesktop, and lots of madness Kdbus Details - Greg Kroah-Hartman Binder vs. kdbus Binder is bound to the CPU, D-Bus (and hence kdbus), is bound to RAM kdbus.txt","tags":"Misc","loc":"/posts/2014/12/d-bus/","title":"D-Bus"},{"text":"Linux Arch Wiki - Desktop Notifications Libnotify Arch Package - libnotify desktop independent need a notification server Dependencies gdk-pixbuf2 Wikipedia - GDK GIMP Drawing Kit GDK was originally developed on the X Window System for the GIMP GdkPixbuf is a toolkit for image loading and pixel buffer manipulation. In GTK+ version 2.22 from 2010-09-23 GdkPixbuf was split off from GDK into a separate package in preparation for the transition to GTK+ 3. Notification servers Bult-in The following desktop environments use their own implementations to display notifications, and you cannot replace them. Their notification servers are started automatically on login to receive notifications from applications via DBus . Cinnamon Enlightenment GNOME KDE Standalone Mac OS X Growl Wikipedia - Growl Growl - Website Browser Firefox MDN - Notification - Web API Interfaces Chromium Chromium - Linux Technical FAQ Why don't Chromium notifications use the D-BUS-based notifications system (aka libnotify / notification-daemon)? HTML5 notifications can contain arbitrary HTML, which is not supported by the notification protocol. (This is the same reason we don't use Growl on OS X.) Chromium's notifications include a button that brings up an options menu, which is also not supported by the notification protocol. The glitzy Ubuntu notifications daemon, by design, does not allow the user to interact with notifications at all, which doesn't work when the notification HTML includes clickable links. It would be nice to extend the protocol to allow Chromium to integrate.","tags":"Misc","loc":"/posts/2014/12/notification-things/","title":"Notification things"},{"text":"from Coverity : In 2006, the Coverity Scan service was initiated with the U.S. Department of Homeland Security as the largest public-private sector research project in the world, focused on open source software quality and security. Coverity now manages the project, providing its development testing technology as a free service to the open source community to help them build quality and security into their software development process. Register your open source project for the Coverity Scan service, and follow us on Twitter to get the latest updates. Coverity Scan Static Analysis Find and fix defects in your Java, C/C++ or C# open source project for free Wikipedia - Coverity Projects that use this service Linux Kernel CPython Jenkins PHP PostgreSQL Hadoop ... example :","tags":"Misc","loc":"/posts/2014/12/coverity/","title":"Coverity"},{"text":"Linux Standard Base (LSB) Wikipedia - Linux Standard Base The DRAFT LSB 5.0 Specification Filesystem Hierarchy Standard (FHS) Wikipedia - Filesystem Hierarchy Standard Filesystem Hierarchy Specification - Beta","tags":"Misc","loc":"/posts/2014/12/linux-standard-base/","title":"Linux Standard Base, Filesystem Hierarchy Standard"},{"text":"這個 talk 講的是利用影像處理來放大細微的動作，甚至藉此來初步還原出當時的聲音","tags":"TED","loc":"/posts/2014/12/ted-motion-microscope/","title":"[TED] Michael Rubinstein: See invisible motion, hear silent sounds. Cool? Creepy? We can't decide"},{"text":"Linux/Documentation/x86/boot.txt Wikipedia - vmlinux vm is for virtual memory the Linux kernel in an statically linked executable file format vmlinuz compressed vmlinux What is the difference between the following kernel Makefile terms: vmlinux, vmlinuz, vmlinux.bin, zimage & bzimage? Arch Wiki - Arch boot process Linux Kernel Booting Process (1) - For NLKB from shimosawa Linux Kernel Booting Process (2) - For NLKB from shimosawa bzImage bzImage = big zImage Linux <= 2.6.22 bbootsect (bootsect.o): bsetup (setup.o) bvmlinux (head.o, misc.o, piggy.o) piggy.o contains the gzipped vmlinux file in its data section ( ELF ) (see compressed/Makefile piggy.o). All source files mentioned are in arch/i386/boot/ Linux >= 2.6.23 merged bbootsect and bsetup into one ( header.o ) initramfs 深入理解 Linux 2.6 的 initramfs 機制 (上) - Jserv Wikipedia - initramfs Linux/Documentation/filesystems/ramfs-rootfs-initramfs.txt Arch Wiki - mkinitcpio zlib an abstraction of the DEFLATE compression algorithm used in the gzip file compression program Wikipedia - zlib Applications Linux Kernel libpng Apache OpenSSH OpenSSL FFmpeg rsync dpkg Subversion Git PostgreSQL ... feature : code is portable, liberally licensed, and has a relatively small memory footprint","tags":"Misc","loc":"/posts/2014/12/linux-kernel-booting-process/","title":"Linux Kernel Booting Process"},{"text":"Wikipedia - QEMU Arch Wiki - QEMU Install QEMU pacman -S qemu # Arch Linux Name New Version Net Change Download Size extra/bluez-libs 5.26-1 0.28 MiB 0.06 MiB extra/celt0.5.1 0.5.1.3-3 0.16 MiB 0.04 MiB extra/libcacard 2.1.2-1 0.09 MiB 0.03 MiB extra/libiscsi 1.12.0-1 0.44 MiB 0.10 MiB extra/seabios 1.7.5-2 1.69 MiB 0.12 MiB extra/spice 0.12.5-1 2.41 MiB 0.56 MiB community/usbredir 0.6-4 0.15 MiB 0.03 MiB extra/vde2 2.3.2-6 0.78 MiB 0.19 MiB extra/qemu 2.1.2-1 178.21 MiB 19.38 MiB Total Download Size: 20.53 MiB Total Installed Size: 184.21 MiB Create Image qemu-img create -f qcow2 test.qcow2 100G output : Formatting 'test.qcow2', fmt=qcow2 size=107374182400 encryption=off cluster_size=65536 lazy_refcounts=off Install OS from bootable ISO -m to assign memory size -cdrom to assign bootable ISO -boot order=d to change the booting priority for cdrom qemu-system-x86_64 -m 2G -cdrom ArchLinux.iso -boot order = d test.qcow2 QEMU with KVM check your kernel has KVM support : lsmod | grep kvm output : kvm_intel 143245 0 kvm 421519 1 kvm_intel start QEMU in KVM mode (add --enable-kvm ) qemu-system-x86_64 --enable-kvm test.qcow2 with previous booting optinos : qemu-system-x86_64 --enable-kvm -m 2G -cdrom ArchLinux.iso -boot order = d test.qcow2","tags":"QEMU","loc":"/posts/2014/12/qemu-first-step/","title":"QEMU - First Step"},{"text":"原本是在找 vim 啟動時間相關的資料，找到了 這個網站 ， 發現有 --startuptime 這個參數可以用，於是就立馬來試一下， vim --startuptime vim.log test.py 接著就可以去 vim.log 看整個啟動狀況 times in msec clock self+sourced self: sourced script clock elapsed: other lines 000.013 000.013: --- VIM STARTING --- 000.142 000.129: Allocated generic buffers 000.277 000.135: locale set 000.305 000.028: GUI prepared 000.313 000.008: clipboard setup 000.321 000.008: window checked 000.881 000.560: inits 1 000.888 000.007: parsing arguments 000.889 000.001: expanding arguments 000.903 000.014: shell init 001.163 000.260: Termcap init 001.214 000.051: inits 2 001.356 000.142: init highlight 042.935 041.473 041.473: sourcing /usr/share/vim/vimfiles/archlinux.vim 043.008 041.604 000.131: sourcing /etc/vimrc 044.222 000.267 000.267: sourcing /usr/share/vim/vim74/syntax/syncolor.vim 044.368 000.480 000.213: sourcing /usr/share/vim/vim74/syntax/synload.vim 067.980 023.555 023.555: sourcing /usr/share/vim/vim74/filetype.vim 068.028 024.211 000.176: sourcing /usr/share/vim/vim74/syntax/syntax.vim ... 161.306 000.881: loading plugins 161.907 000.601: inits 3 162.125 000.218: reading viminfo 163.820 001.695: setup clipboard 163.846 000.026: setting raw mode 163.855 000.009: start termcap 163.876 000.021: clearing screen ... 185.539 000.358: BufEnter autocommands 185.541 000.002: editing files in windows 190.308 004.767: VimEnter autocommands 190.311 000.003: before starting main loop 190.445 000.134: first screen update 190.447 000.002: --- VIM STARTED --- manual in Vim : :help slow-start 這個 log 參數剛好拿來解掉一個朋友碰到的問題 ~ 他在用 mosh 連到某台機器上開 vim 時會 hang 住， 藉由這個 log，發現是卡在 clipboard 那裡， 原因是因為程式嘗試和 X server connect，但一直連不到， 接著就找到了解法 vim -X 詳細問題解法可以看 這篇 stackoverflow 回答","tags":"Vim","loc":"/posts/2014/12/vim-startup-time-log/","title":"Vim startup time log"},{"text":"Vim is a wonderful editor which appears long long ago. Now, a project called Neovim wants to refactor Vim and simplify maintenance and improve plugin architecture and many thing else. It's making progress now, you can see Neovim - Progress - GitHub wiki for more information. Today, I install neovim on my computer, and it seems to work fine as original Vim (with a lots of change that user hard to detect) Now, Neovim is working on port all IO to libuv and a VimL to Lua transpiler. I hope another language will replace the Vimscript soon ... The Neovim Website Neovim - GitHub Install I install it on my Arch Linux yaourt -S neovim-git python2-neovim-git After installation, you can use nvim to start neovim, and the config is .nvimrc","tags":"Vim","loc":"/posts/2014/12/neovim-first-try/","title":"neovim first try"},{"text":"This talk is funny and easy to understand ~ slide","tags":"Misc","loc":"/posts/2014/12/the-real-story-behind-wayland-and-x/","title":"[Video]  The Real Story Behind Wayland and X - Daniel Stone (linux.conf.au 2013)"},{"text":"今天剛好看到在隔壁校的活動在談 \"淺談編譯器最佳化技術\"，內容蠻好懂的 ~ 淺談編譯器最佳化技術 from Kito Cheng","tags":"Compiler","loc":"/posts/2014/12/compiler-optimization-intro/","title":"[Slide] 淺談編譯器最佳化技術"},{"text":"JCConf 官網連結 (有 Video) Preface 這裡不提 JVM tuning JNI, GC, invokedynamic Production tweaking Android Programming Content +----------------+ | CLDC-HI (Java) | +----------------+ &#94; | +----------------+ +---------------------------+ +-------------------+ | Self VM (Self) |->| Strongtalk VM (Smalltalk) |->| HotSpot VM (Java) | +----------------+ +---------------------------+ +-------------------+ | | | | | | | | | | | | | | +-----------------+ | ---------------> | V8 (Javascript) | ------------------------------------------> +-----------------+ JIT Compiled when needed Mixed-Mode Interpreted Bytecode-walking Artificial stack machine Compiled Direct native operations Native register machine Profiling Gather data about code while interpreting Invariants (types, constants, nulls) Statistics (branches, calls) Optimizations Method inlining Loop unrolling Lock coarsening/eliding Dead code elimination Duplicate code elimination Escape analysis Hotspot client mode (C1) inlines, less aggressive Fewer opportunities to optimize server mode (C2) inlines aggressively Based on richer runtime profiling Profile until 10k calls Tiered Level 0 = Interpreter Level 1~3 = C1 Level 4 = C2 from Interpreter to Compiler Bytecode interpreter switch-threading indirect-threading token-threading ... Summary : OpenJDK Introduction to Dalvik VM 因為硬體限制，不能像 HotSpot 一樣做那麼多優化 Dalvik 是 Register-based 的 VM Dalvik Executable (DEX) convert tool : dx Optimizing Dispatch selective inlining + 打開 Java 程式執行的時候，CPU 就是不知道在忙什麼 + 只是個印出 Hello World 的程式，發現 CPU 有點忙 dexopt : Instruction Rewritten libART (Android RunTime Library) Use Ahead-Of-Time (AOT) scheme instead of JIT Precompile Dalvik Bytecode into machine language during installation Summary Hotspot 和 Dalvik 完全不同 codebase，但設計原理很像，Hotspot 實作比較完整，Dalvik 有很多先天限制 Android L 啟動時間變更久 (重新 scan bytecode 來生成 machine code) 要兼顧效能和啟動時間","tags":"Misc","loc":"/posts/2014/12/openjdk-vs-dalvik-and-art-vm/","title":"[JCConf] OpenJDK vs. Dalvik/ART virtual machine"},{"text":"Although I usually use Arch Linux, this time I need to install every thing on Ubuntu Server (I get a task to install something on Ubuntu VM) ... First, I give my public key to current VM administrator, so I can get permission to ssh to server by key. Install Apache, mod-wsgi ... Making a virtualenv, cloning current project, installing the requirement.txt Modify Apache's configuration (Apache's configuration in Ubuntu is at /etc/apache2/apache2.conf , and default user that Apache use in Ubuntu is \"www-data\"), setting WSGIPythonPath to the virtualenv one Install PostgreSQL (this is my first time to install PostgreSQL) Setting PostgreSQL (create user, database, ...)","tags":"Django","loc":"/posts/2014/11/django-apache-postgresql/","title":"Django, Apache, PostgreSQL"},{"text":"It has been a while since last time I upgrade my notebook, now I upgrade many software in my notebook including the Linux Kernel, everything works well after upgrade :) I love rolling release :P","tags":"Misc","loc":"/posts/2014/11/archlinux-upgrade-2014-11-11/","title":"Arch Linux upgrade (11/11)"},{"text":"Note: 本篇仍在未完成狀態 課程講義 期中考: 第 5,6,7,8,9 章 (boundary value, equivalence class, decision table, path testing, data flow testing) Intro. white & black 測試大概可以分成 白箱測試 (white-box testing) 與 黑箱測試 (black-box testing) white-box testing 又可以稱為 透明箱測試 (glass box testing) ， 因為可以看到內部結構，因此又稱為 結構測試 (structural testing) 或 邏輯驅動測試 (logic-driven testing) test case adequacy criteria test case adequacy criteria 討論的是 \"需要多少的測試才足夠\"， 這可以由涵蓋的 control-flow & data-flow 比例來衡量 control-flow coverage (測量可以經過多少 execution path) statement coverage branch coverage data-flow coverage (definition & use & kill) all-du-paths (definition & use) all-uses all-defs + 如果每條 variable 的 dc-paths 都包含的話 all-c-uses (computation) all-p-uses (predicate) all-c-uses/some-p-uses all-p-uses/some-c-uses dc-paths (definition & clear) test case 難寫通常也代表著程式太複雜，因此要降低結構複雜度，再來是避免 non-determinism Rapps-Weyuker hierarchy of data flow coverage metrics : +-----------+ | All-Paths | +-----------+ | +--------------+ | All-DU-Paths | +--------------+ | +----------+ | All-Uses | +----------+ | | |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| | | +------------------------+ +------------------------+ | All C-Uses some P-Uses | | All P-Uses some C-Uses | +------------------------+ +------------------------+ | | |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| | | +----------+ +------------+ | All-Defs | | All P-Uses | +----------+ +------------+ | +-----------+ | All Edges | +-----------+ | +-----------+ | All Nodes | +-----------+ P-use use in predicate C-use use in computation O-use use for output L-use use for location (pointers, subscripts) I-use iteration (internal counters, loop indices) I-def defined by input A-def defined by assignment Wikipedia - Program Slicing https://github.com/romanofski/programslice http://www.researchgate.net/publication/261261093_Static_Slicing_for_Python_First-Class_Objects Spyder ANSI C Dynamic http://spaf.cerias.purdue.edu/Students/spyder.html Unravel CodeSonar Indus/Kaveri JSlice SeeSlice Programslice decision-to-decision path (DD-path) coverage.py coverage report -m $ coverageg report -m Name Stmts Miss Cover Missing ------------------------------------- hw1 58 2 97% 49-50 test 21 0 100% ------------------------------------- TOTAL 79 2 97% Ch5 - Boundary Value Testing Ch5 課程講義 Ch6 - Equivalence Class Testing weak normal strong normal weak robust strong robust Ch7 - Decision Table-based Testing CH7 課程講義 Ch8 - Path Testing Program Graphs 用 imperative 寫出來的程式的 program graphs 會是 directed graph nodes are statement fragements edges are flow of control DD-Paths Test Coverage Metrics node coverage edge coverage chain coverage path coverage https://bitbucket.org/ned/coveragepy Miller's Coverage Metrics Todo DO-178B Ch9 - Data Flow Testing Define/Use Testing Slice-Based Testing Program Slicing Tools 重點: 變數在哪裡拿到 values、在哪裡被使用 unifying structure of test coverage metrics program slice (1979 - Mark Weiser) define/reference anomalies 檢查以下 issue 只有定義但沒有被使用的變數 變數未定義就使用 變數定義了多次 變數在使用之前就被 deallocate defining node usage node P-use & C-use Ref 白箱測試與黑箱測試（上）","tags":"Misc","loc":"/posts/2014/11/software-testing-intro/","title":"[WIP][Software Testing] Intro."},{"text":"修心理學通識的隨便紀錄 (? Ch1 - Psychology and Life Psychology 研究的是 個人行為和心智歷程 (behavior of individuals and their mental processes) Scientific method : 蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括) Behavior : 生物依照環境而產生的可觀察的行為 描述 => 解釋 => 預測 => 控制 behavioral data reports of observations explanations Internal factors External factors predictions Causal Prediction (因果預測) Scientific Prediction 由分析結果來判斷關係 control Interventions (介入) 控制行為發生與否 Psychology's Historical Foundations Hermann Ebbinghaus 早期的實驗心理學家之一 遺忘曲線 先天論者 vs. 經驗論者 (nativist vs. empiricist) Plato (柏拉圖) and Aristotle (亞里斯多德) opposing views of how mind works John Locke 洛克 empiricist view (經驗主義) 1632-1704 Immanuel Kant 康德 nativist view 心理會影響對世界的感受 1724-1804 René Descartes (笛卡兒) 人類可以用科學來理解 1596-1650 Wilhelm Wundt First formal experimental psychology lab 1879 Edward Titchener 建立美國早期的 psychology labs 之一 1892 William James Principles of Psychology 1890 comfort food 吃下去後可以撫慰心情和精神的食物 Evolution of Modern Psychology 結構論學派 School of Structuralism 創始人為德國心理學家馮德（W. Wundt） 心理學是從個體本身的觀點研究其自覺的經驗。因此心理學的主要方法就是 內省法 或自省法 人類的意識經驗中包括三大元素，即感覺、意像、與感情 功能論學派 School of Functionalism 美國心理學家 J. James 與 J. Dewey 二人首創 受達爾文 (C. Darwin) 進化論中「適者生存」的理念 完形心理學 Gestalt Psychology (中文音義變成 \"格式塔\" ...) Gestalt 源自德文，意思是 \"形狀\"，意解為 \"看清事物\" Gestalt Psychology 的重要概念是 整體 (並非各個部份的總和)，興起於 20 世紀初的德國， 由 Kurt Koffka, Max Wertheimer, and Wolfgang Köhler 創立， 主要是在研究人類 知覺與意識 上的問題， 反對結構學派 (Structuralism) 以自我觀察、自我描述等內省的方法分析意識經驗的成份， 也反對行為主義心理學派 (Behaviorism) 過份強調動物實驗，完全排斥心智歷程的作法 心理學七種取向 Perspective Focus of Study Primary Research Topics Psychodynamic Unconscious drives Conflicts Behaviorist Specific overt responses Humanistic Human expreience and potentials Cognitive Mental processes Language Biological Brain and nervouse system processes Evolutionary Evolved psychological adaptations Sociocultural Cross-cultural patterns of attitudes and behaviors Ch2 - Research Methods in Psychology Process of Research 理論 (Theory) : An organized set of concepts that explains a phenomenon or set of phenomena. 決定論 (Determinism) : Doctrine that all events - physical, behavioral, andmental - are \"determined\" by specific causal factors that are potentially knowable step 1 Initial phase of research: Theory step 2 Develop ahypothesis 假說 step 3 Design the study 研究設計 Scientific Method 蒐集和解釋客觀的資訊 (儘量減少誤差並結論出可信的概括) 目標是要得出最多的客觀 conclusions Observer Bias 因為動機和預期造成的測試偏差 Standardization 標準化 Operational definition 操作型定義是將依些事物以某種操作表示出來 所有研究裡的變數都必須是操作型定義給定的 ex: 「花生果醬三明治」的操作性定義是「使用抹刀先將花生醬塗抹到一片麵包上，再將果醬塗抹在花生醬上，最後蓋上另一片厚度相同的麵包後所得到的成果。」 Research Variable Independent Variable (獨變項/自變項) (研究者操弄的變數) Dependent Variable (依變項) Experimental Methods 研究者操弄 independent variable 來看對 dependent variable 的影響， 用來解決因果模糊性 Control Procedures Double-blind control 雙盲控制 目的是避免研究結果受安慰劑效應或觀察者期望效應所影響 受試驗的對象及研究人員並不知道哪些對象屬於對照組，哪些屬於實驗組 在藥物測試中經常使用雙盲測試。病人被隨機編入對照組及實驗組。 對照組被給予安慰劑，而實驗組給予真正藥物。 無論是病人或觀察病人的實驗人員都不知道誰得到真正的藥物，直至研究結束為止。 不過部份的試驗會較難做成雙盲， 例如：如果治療效果非常顯著，或治療的副作用非常明顯，實驗人員便可能猜想到哪組是對照。 Placebo control 安慰劑控制 Between-subjects designs 受試者間設計 每個參與者隨機分配到不同測試環境 Within-subjects designs 受試者內設計 每個參與者可以自己控制 Sample 樣本 Population 中被選為受試者的 subset Representative Sample 代表性樣本 Population 中被選為受試者的 subset 中和特徵非常符合的部份 Population 母群 Alternative explanations 替代解釋 可以由以下幾種而得 Confounding variables (混淆變項) Expectancy effects (預期效應) Placebo effect (安慰劑效應) Correlational Methods 相關法 Correlational Coefficient Correlational Methods 正相關 負相關 Psychological Measurement Reliability Validity Self-report Measures Behavior Measure Direct observations Naturalistic observations Archival Data Case Study Ethical Issues in Research 研究的倫理議題 +----------+ | 告知同意 | +----------+ | +-----------------+ | 風險 / 獲得評估 | +-----------------+ | +----------+ | 刻意瞞騙 | +----------+ | +----------+ | 事後釋疑 | +----------+ Ch3 - The Biological and Evolutionary Basis of Behavior Nature vs. Nurture (先天 vs. 後天) Heredity vs. Environment (遺傳 vs. 環境) Nervous system Neuron Dendrites 樹突 Receive stimulation from sensory receptors Soma 細胞體 Cell body, contains nucleus Axon 軸突 Long extended fiber along which neural impulse travels 圖 ?? http://en.wikipedia.org/wiki/Synapse Synapse 突觸 不同神經元間或神經元與細胞間溝通的接頭 Synapse Transmission Neurotransmitters (神經傳導物質) Catecholamines (兒茶酚胺) Norepinephrine (NE) (正腎上腺素) Dopamine (DA) (多巴胺) 在精神分裂症患者身上可以看到高於正常值的多巴胺 Glutamate (Glu) (麩胺酸) 腦中最常見的興奮性神經傳導物質 和情緒反應、學習和記憶有關 與藥物、酒精、尼古丁成癮有關 腦內 Glu 量的失衡與精神疾病有關連,例如精神分裂症 GABA (gamma-aminobutyric acid) (迦馬胺基丁酸) 腦中最常見的抑制性神經傳導物質 GAMA 太低會產生焦慮感 Acetylcholine (Ach) (乙醯膽鹼) 和記憶有關 (ex: 阿茲海默症) 在運動神經元和肌肉纖維交接處,使骨骼肌興奮而收縮 (ex: 美洲箭毒、肉毒桿菌) Serotonin (5-HT) (血清素) 分泌血清素的神經元位於腦幹 與激發 / 喚起和自動化歷程有關 迷幻藥 LSD 抑制血清素神經元的作用 , 產生各種幻覺 抗憂鬱藥物「百憂解」可以增強血清素的作用 Endorphins (腦內啡) 神經調節物質 控制情緒行為 (焦慮、害怕、緊張、愉悅) 與鴉片類藥物、嗎啡受體部位相同 Sympathetic nervous system (交感神經系統) 應對緊急狀況 Parasympathetic nervous system (副交感神經系統) 處理 routine 的行為 Biology and Behavior Brain Structure Limbic system (邊緣系統) regulates emotions and motivated behavior Hippocampus (海馬回) 記憶 Amygdala (杏仁核) 情緒、攻擊 Hypothalamus (下視丘) manage body's interanl state 體溫調節、性興奮 Thalamus (視丘) relay sensory information Cerebellum (小腦) regulates coordinated movement Brain stem (腦幹) set brain's general alterness level and warning system Medulla (延腦) breath, blood pressure, heartbeat Pons (橋腦) Reticular Formation (網狀組織) Spinal cord (脊髓) pathway for neural fibers traveling to and from brain Cerebral cortex (大腦皮質) involve in complex mental processes Sleep Cycle Stage 1 Stage 2 Stage 3 Stage 4 Rapid EyeMovements (REM) Ch5 - Mind, Consciousness, and AlternateStates Others Pygmalion Effect 指人在被付予更高期望以後，他們會表現的更好的一種現象 Ref http://blog.xuite.net/kc6191/study/15706646-%E6%A0%BC%E5%BC%8F%E5%A1%94%28%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8,+Gestalt+psychology%29 http://phiphicake.blogspot.tw/2009/04/blog-post_13.html http://psychology101.pixnet.net/blog/post/17608991-%E7%A7%91%E5%AD%B8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88the-scientific-method%3A-design-to-be-valid http://leeoxygen.wordpress.com/2011/06/26/great-books-of-the-western-world%E3%80%8A%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C%E9%89%85%E8%91%97%E3%80%8B/","tags":"Misc","loc":"/posts/2014/11/psycho-intro/","title":"[Psycho] Psychology Intro."},{"text":"修心理學通識的隨便紀錄 (? 教材 (非修課) : 學習與記憶 青少年發展 學習 學習 : 由經驗所造成的行為模式上的相對的永久性變化 preformance distinction : 學到的不見得會表現出來 習慣化 : 降低 response time 敏感化 : 提升反應程度 行為主義與行為分析 John Watson 1878 ~ 1958 Father of American behaviorism B.F. Skinner 1904 ~ 1990 Operant conditioning model 行為分析 : 專注於發現環境對行為的影響 古典制約 Classical Conditioning: Learning Predictable Signals based on 已經有的反應去做制約 Ivan Pavlov's dog from wikipedia : 狗能夠對食物自然而然的分泌唾液，此時 Ivan Pavlov 將食物看作非制約刺激（US）、唾液分泌看作非制約反應（UR），並將兩者的關係稱為非制約反射。而如果在提供食物之前的幾秒鐘發出一些作為中性刺激（NS）的聲響，將會使得這個聲響轉變為制約刺激（CS），能夠單獨在沒有食物的狀況下引起作為制約反應（CR）的唾液分泌，兩者的關係則被稱做制約反射。 食物 (US) => 唾液分泌（UR） 食物 (US) + 聲音 (NS) => 唾液分泌（UR） 聲音 (CS) => 唾液分泌（CR） 名詞解釋 非制約刺激（unconditioned stimulus，US) ： 不需經過學習就能引起反應的 刺激 ， 如上述狗食 非制約反應（uncond itioned response，UR) ： 不需經過學習就能對非制約刺 激起的反應 ， 如上述狗對食物所流的口水 制約刺激（conditioned stimulus，CS）： 本為中性刺激 ， 與非制約刺激連結 ， 能引起反應的刺激 ， 如上述聲音 制約反應（conditioned response，CR）： 由制約刺激所引起的反應 ， 如上述 狗對聲音所流的口水 操作制約 Operant Conditioning: Learning About Consequences 正增強 行為後的獎賞 負增強 厭惡而欲避免 ex: 陽光很大，出門會帶太陽眼鏡 處罰 正處罰 負處罰 制約的歷程 刺激類化 刺激區辨 Taste-aversion Learning 味道嫌惡學習 Garcia effect ex: 接受化療的癌症患者會對食物產生噁心，因為其化療往往在進食後進行，由此使癌症患者感到是食物導致其化療痛苦 觀察學習 見賢思齊，見不賢內自省 Bandura's Research 觀察學習 BoBo Doll Study 在該實驗中，Bandura 選用兒童作為實驗對象，因為通常兒童很少有社會條件反射。班杜拉試圖使兒童分別受到成人榜樣的攻擊性行為與非攻擊性行為的影響。然後將這些兒童置於沒有成人榜樣的新環境中，以觀察他們是否模仿了成人榜樣的攻擊性行為與非攻擊性行為。 班杜拉 (Albert Bandura) - 社會學習論 (social learning theory) Video 記憶 7 +- 2 working memory chunks events => Sensory Memory => Working Memory (include Short-term Memory) => Long-term Memory explicit memory : 取得資訊需要有意識的回想 implicit memory : 取得資訊不需要有意識的的回想 Types : Declarative Memory Procedural Memory Dimensions of Long-Term Memory Long-term Memory Declarative Memory Episodic Memory (個人事件記憶/情節記憶) Semantic Memory (語意記憶) Procedural Memory Serial Position Effect Primacy Effect Recency Effect Forget Proactive interference (順向干擾(對未來記憶的干擾)) Retroactive interference (逆向干擾(對過去記憶的干擾)) Video 智力 Psychological Assessment 心理評量 Formal Assessment : 信度、效度、標準化 Galton's idea of Intelligence Theories of Intelligence Crystallized Intelligence 結晶智力 Fluid Intelligence 流體智力 Sternberg's Triarchic Theory (1999) (智力三元論) Analytical intelligence 分析智力 Creative intelligence 創造智力 Practical intelligence 實用智力 Video 人類發展","tags":"Misc","loc":"/posts/2014/11/psycho-intro-2/","title":"[Psycho] Psychology Intro. 2"},{"text":"剛剛看到 PyPy status blog 上的新文章 ， 以下是大概的內容 PyPy 在 Warsaw (為波蘭的首都及最大的城市) 的 sprint 順利結束了 (wrapped up)， 有些 branch (gc_no_cleanup_nursery, gc-incminimark-pinning) 已經順利 merge 回 master (improve I/O & GC) 改變一 - gc_no_cleanup_nursery PyPy GC 會把 new objects allocate 在 young object area (就是 GC 上慣稱的 nursery 啦)， 每經過一個 minor collection 都要把 nursery 清理。簡單起見，GC 通常會把整個 nursery 清成 0。 這樣作法對於 cache 會有 bad effects，因為你一次把一大塊 memory 清成 0， 而且把一些不需要清成 0 的資料也清了 (例如 large strings)。對於這個問題， 可以用 incremental nursery zeroing 來減輕， 但是 gc_no_cleanup_nursery 這個 branch 把 zeroing 整個拿掉， 因此提升了 string handling 和 recursive code 的效率 (因為 jitframes 也不再需要把 memory 清成 0) 改變二 - gc-incminimark-pinning 隨著時間的過去 PyPy GC 會把 objects 在 memory 裡做移動，也就是說 memory address 會改變， 因此要把 pointer 傳給 C function 時，必須確保指到 objects 不會被 GC 移動。 PyPy 2.4 以前，用 copying the data into or from a non-movable buffer 來解決， 顯然這沒有效率。這個 branch 使用了 \"pinning\" 的概念， 這讓程式可以知會 GC 某些 objects 在一段時間內不允許被移動。 這會讓 GC 的複雜度稍微上升，但是可以大幅提升 I/O performance。","tags":"Python","loc":"/posts/2014/11/pypy-io-improvements/","title":"[PyPy] IO improvements"},{"text":"前陣子朋友碰到有設密碼的 zip 檔不能用 unzip 來解開， 會出現 \"does not support compression method 99\" 的錯誤， 原因是這些檔案用 AES 加密， 對 unzip 來說是新 method 所以不支援， 這時候只好用其他支援的工具解開啦， 例如 : 7z","tags":"Misc","loc":"/posts/2014/11/zip-unsupported-99/","title":"ZIP unsupported compression method 99"},{"text":"Prolog 裡，\"+\" 等同於 not (檢查一個 goal 不能證明為真的 predicate) \"!\" 則是切除邏輯判斷的結構 在 ! 左邊的 predicates 成立，就把在 ! 之後 head 相同的情況放棄， 在 ! 左邊的 predicates 不成立，就把同一行程式 ! 右邊的 predicates 放棄掉 a ( X , Y ) :- b ( X ), !, c ( Y ). b ( 1 ). b ( 2 ). b ( 3 ). c ( 1 ). c ( 2 ). c ( 3 ). ?- a ( Q , R ). Q = 1 R = 1 ; Q = 1 R = 2 ; Q = 1 R = 3 ; No . a ( X , Y ) :- b ( X ), c ( Y ), !. b ( 1 ). b ( 2 ). b ( 3 ). c ( 1 ). c ( 2 ). c ( 3 ). ?- a ( Q , R ). Q = R , R = 1 . Links PTT - Prolog的符號: \"+\"和\"!\"是甚麼? Prolog/Cuts and Negation","tags":"Prolog","loc":"/posts/2014/10/prolog-cut/","title":"[Prolog] Cut"},{"text":"short : A predicate is a box that takes an argument and returns a Boolean value . For example, \"x -> x is even\". A function is a box that takes an argument and returns a value . For example, \"x -> x*x\" Predicate (謂語) in natural language Subject + Predicate : The dog + barks. The predicate identifies and describes the action of the sentence. Predicate in Functional A predicate is a function that returns the Boolean value In Python Python - Functional Programming How To ''' filter(predicate, iter) ''' def is_even ( x ): return ( x % 2 ) == 0 list ( filter ( is_even , range ( 10 ))) # there are more in iterools In Prolog Prolog's BNF <program> ::= <clause list> <query> | <query> <clause list> ::= <clause> | <clause list> <clause> <clause> ::= <predicate> . | <predicate> :- <predicate list>. <predicate list> ::= <predicate> | <predicate list> , <predicate> <predicate> ::= <atom> | <atom> ( <term list> ) <term list> ::= <term> | <term list> , <term> <term> ::= <numeral> | <atom> | <variable> | <structure> <structure> ::= <atom> ( <term list> ) <query> ::= ?- <predicate list>. <atom> ::= <small atom> | ' <string> ' <small atom> ::= <lowercase letter> | <small atom> <character> <variable> ::= <uppercase letter> | <variable> <character> <lowercase letter> ::= a | b | c | ... | x | y | z <uppercase letter> ::= A | B | C | ... | X | Y | Z | _ <numeral> ::= <digit> | <numeral> <digit> <digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <character> ::= <lowercase letter> | <uppercase letter> | <digit> | <special> <special> ::= + | - | * | / | \\ | &#94; | ~ | : | . | ? | | # | $ | & <string> ::= <character> | <string> <character> Prolog has two types of clause (子句) : (clause = facts | rules) facts cat ( tom ). rules animal ( tom ) :- cat ( tom ). Both facts and rules are composed of predicates. Links Functional predicate - wikipedia Prolog - wikipedia","tags":"Functional","loc":"/posts/2014/10/predicate/","title":"[FP] predicate"},{"text":"Short : no side effect Referential Transparency - wikipedia Referential Transparency means a expression won't change the behavior of a program For example : // C code // this is not referential transparency // it's referential opaqueness // function will modify the variable outside the function void f ( int * x ) { * x += 3 ; } // this is referential transparency // function won't modify the variable outside the function int f ( int x ) { return x + 3 ; } if a function is referential transparency, then it can be optimized by many ways, ex: memoization common subexpression elimination lazy evaluation parallelization only referentially transparent functions can be memoized (cache the results) a referentially transparent expression is deterministic (the same results with the same input)","tags":"Functional","loc":"/posts/2014/10/referential-transparency/","title":"[FP] Referential Transparency"},{"text":"If you want to upgrade main Python program in virtualenv, then just run the creation command again. ex: virtualenv env virtualenv env-pypy3 -p /usr/bin/pypy3","tags":"Python","loc":"/posts/2014/10/python-virtualenv-upgrade/","title":"Python virtualenv upgrade"},{"text":"(not complete) What's RPython RPython is a subset of Python Language RPython Type Static (not Manifest Typing, but Type Inference) http://stackoverflow.com/questions/7161856/what-is-statically-typed-in-rpython Not all code in the PyPy repository is RPython. For example, there are code generators (e.g. in rlib.parsing) that run at compile time and produce RPython code, but are not RPython (frequently with a \"NOT_RPYTHON\" docstring, by the way). Also, large parts of the standard library are written in full Python (mostly taken straight from CPython). To make a C code generator, code on interpreter level has to restrict to a subset of Python. (Code on application level cat still use full Python) PyPy is not source-to-source translations , it start translation from live python code objects . Type Inference & Static Typing Types are not stated explicitly, they are infered, so RPython is static typing. Static typing doesn't mean the type has to be written out (that's manifest typing ), it means each expression has a single type that never changes. Analysis def add ( a , b ): return a + b We cann't infer a (non-generic) type for a function like above, the return type depends on arguments, so the return type is determined by analysis the arguments (when the function is called) RPythonic Flow restrictions variable constant globals are considered constants (global instances don't have this restriction) control structures range definitions run-time definition of classes or functions is not allowed generators exceptions fully supported Object restrictions int, float, bool works strings tuple no variable-length tuples lists annotator can figure out most of the time that your list is fixed-size, even when you use list comprehension dicts unique key type only functions Integer Types build a Python VM with RPython","tags":"Python","loc":"/posts/2014/10/RPython/","title":"RPython Intro."},{"text":"the jitviewer target analysis log from PyPy, and display Python bytecode & jit operations via the web install jitviewer is a PyPy2 only program now (it need rpython) create the virtual environment virtualenv env-pypy -p /usr/bin/pypy active the virtual environment source env-pypy/bin/activate get the PyPy2 source code (for rpython) wget https://bitbucket.org/pypy/pypy/downloads/pypy-2.4.0-src.tar.bz2 tar -xvf pypy-2.4.0-src.tar.bz2 install jitviewer pip install jitviewer set the env setenv PYTHONPATH pypy-2.4.0-src run the sample jitviewer.py --log log create log of PyPy setenv PYPYLOG jit-log-opt,jit-backend-counts:myprogram.log pypy -c your_program.py with PyPy3 As jitviewer is a PyPy2 only program now (2014-10-15), you should run your program by PyPy3 and output the log, then use jitviewer with PyPy2 to analysis the log. expect in the future There are something that I think it should have ... PyPy3 compatibility jitviewer with PyPy3 is not working now, the smaller part is the syntax in jitviewer (something like print function), the bigger part is the rpython module ... At the moment, rpython has a lot of Python 2 only syntax (even in PyPy3 source code). CPython compatibility This means to remove the depenency of rpython. note The PyPy does not modify the output of Python bytecodes, so the Python bytecodes output from CPython's dis module or PyPy's are the same.","tags":"Python","loc":"/posts/2014/10/jitviewer/","title":"Try the jitviewer"},{"text":"這篇在解 PTT Python 版上的一個問題 (#1KEG5cfG) 基本上就是要做 transpose，但是資料長度不依， 所以就來試試囉 : https://gist.github.com/wdv4758h/1f4090ee9b0035dbcee0 以下都以 Python 3 為考量，而且以 zip 為出發點來解這個問題。 如果是一個完整 n x m 的資料， 類似的工作可以用 zip 就完成。 data = [ range ( 10 ) for i in range ( 8 )] def transpose ( data ): return zip ( * data ) for i in transpose ( data ): print ( i ) 現在的狀況不是完整 n x m 的資料，而是長短不一的， 一種解是用 itertools 裡的 zip_longest， 參數是 iterables 還有 fillvalue (預設是 None)， fillvalue 會拿來填滿資料短缺的部份。 import itertools as it def transpose ( data ): return it . zip_longest ( * data ) # 跟前面文章借測資 data = [ list ( range ( i )) for i in range ( 10 , 0 , - 1 )] del data [ 3 ] del data [ 6 ] for i in transpose ( data ): print ( i ) 這邊會把不夠的地方都補 None， 所以輸出會是: (0, 0, 0, 0, 0, 0, 0, 0) (1, 1, 1, 1, 1, 1, 1, None) (2, 2, 2, 2, 2, 2, None, None) (3, 3, 3, 3, 3, 3, None, None) (4, 4, 4, 4, 4, None, None, None) (5, 5, 5, 5, None, None, None, None) (6, 6, 6, None, None, None, None, None) (7, 7, 7, None, None, None, None, None) (8, 8, None, None, None, None, None, None) (9, None, None, None, None, None, None, None) 如果前面那種剛好符合需求，那就可以開心的拿來用了， 如果真的不想要看到多補的那些資料，就再把結果處理過。 def transpose ( data ): return ( tuple ( it . filterfalse ( lambda x : x is None , i )) for i in it . zip_longest ( * data )) for i in transpose ( data ): print ( i ) 如此一來結果就變成: (0, 0, 0, 0, 0, 0, 0, 0) (1, 1, 1, 1, 1, 1, 1) (2, 2, 2, 2, 2, 2) (3, 3, 3, 3, 3, 3) (4, 4, 4, 4, 4) (5, 5, 5, 5) (6, 6, 6) (7, 7, 7) (8, 8) (9,) 不過上面處理是以輸入 data 裡沒有 None 為前提的 XD 資料裡面可能有 None 的話就另外用別的值囉。","tags":"Python","loc":"/posts/2014/10/ptt-python-transpose/","title":"PTT - Python 版 - transpose 問題"},{"text":"ch 8 Regular Expression 毫無反應就是 regular expression 書上是介紹 Ruby 裡的 re，基本上長的就是 Perl 樣 (X 基本 re 觀念都差不多 # Ruby '<ul><li>a</li>b</ul>' . split ( /(<.*?>)/ ) => [ \"\" , \"<ul>\" , \"\" , \"<li>\" , \"a\" , \"</li>\" , \"b\" , \"</ul>\" ] # Python import re re . split ( '(<.*?>)' , '<ul><li>a</li>b</ul>' ) >>> [ '' , '<ul>' , '' , '<li>' , 'a' , '</li>' , 'b' , '</ul>' , '' ] 書上提到 Ruby 1.9 的 re 使用了 Oniguruma 這個 engine， Ruby 2.0 後轉到 Oniguruma 的 fork : Onigmo Python 的話可以看 re 的 document 這章節最後最後提到 DSL (Domain Specific Language) ch 9-1 Integer 在 C 裡，型態為 int 的狀態下，5 / 2 的結果會是 2 int 有大小上限 bitwise operation bitmask 2's complement ch 9-2 Float fixed point number (不好用) IEEE 754 電腦中的浮點數沒有結合律 (誤差會擴大) 誤差會累積 Inf, 0, NaN 運算的值的絕對值相差過大時，計算會造成誤差 cancellation error (相減兩個相近的數字時造成的誤差) >>> 10000001.0 + 0.12345678 + 0.11111111 + ( - 10000000.0 ) 1.234567889943719 >>> 10000001.0 + ( - 10000000.0 ) + 0.12345678 + 0.11111111 1.23456789 >>> 0.0123456 - 0.0123444 1.1999999999998123e-06","tags":"Misc","loc":"/posts/2014/10/pythoner-read-ruby-book-3/","title":"Pythoner 讀 「松本行弘的程式世界」 - part 3"},{"text":"ch 2-5 Duck Typing duck typing 實在很常聽到，尤其自己常寫的是 Python XD 在講到 type 時，常聽到的有 static 和 dynamic，static 的話不用執行就可以知道， dynamic 的話要執行下去才能確認 硬體看得懂的是二進位數字，其他寫程式用到的型別都是建立在這之上的， 如果沒有做成更好用的 type 的話會造成程式撰寫上的負擔， 於是 Fortran 提供了型別 (整數資料、浮點數陣列等等)， 於是有了 static type (宣告型別) Lisp & Dynamic type 在 Fortran 出現後幾年，出現了 Lisp， 1958 年的 Lisp 只有兩種型別 : list、atom，不是 list 的都是 atom cons cell car, cdr S-expression Lisp 的 list 裡事先無法知道 cons cell 裡面指到的是 cons cell 還是 atom， 本質上可說是 polymorphism 的 data structure， 所以 Lisp 採用的是 \"資料本身還有描述自己型別的資訊\"，又稱為動態型別 cons cell +-----+-----+ | car | cdr | +-----+-----+ | | | | +---+ +-----+-----+ | 5 | | car | cdr | +---+ +-----+-----+ atom | | | | +----+ nil | 13 | atom +----+ atom Static Type 起自 Fortran、Dynamic Type 起自 Lisp， 在最初的物件導向語言 Simula 裡，出現了和 Dynamic Type 類似的型別 Ref (Simula 中除了物件之外都是靜態型別)， 之後從 Simula 的物件導向概念延生出的 Smalltalk 和 Lisp 一樣全面採用動態型別， 1980 年代前半，受到 Simula 影響而誕生了 C++，重要概念 : \"subclass 可以視為 base class 的 instance\" Duck Typing 的概念是: \"走路像鴨子，看起來像鴨子，那就可以把他當成鴨子\" Dynamic Type 裡避免名去檢查型別，而改以檢查是否有某 method","tags":"Misc","loc":"/posts/2014/10/pythoner-read-ruby-book-2/","title":"Pythoner 讀 「松本行弘的程式世界」 - part 2"},{"text":"Stellarium 月全蝕的時候從朋友那知道的 Open Source 軟體， 看起來蠻棒的 XD","tags":"Misc","loc":"/posts/2014/10/stellarium/","title":"血月之 Stellarium"},{"text":"這禮拜二在上心理學概論的時候，上到打瞌睡 zzz， 都是因為整天都有課 (晚上也有)，前面又上完體育課很累 ... 就在半睡半醒中，突然聽到了 Chomsky ! 頓時精神力上升，腦中馬上浮現 Chomsky Normal Form， 馬上抬頭看一下 slide，上面寫著 Noam Chomsky， 立馬 Google ... 果然是同個人啊 ... 在上心理學的時候可以想到正規也是個奇妙的狀況 Orz","tags":"Misc","loc":"/posts/2014/10/psychology-intro-chomsky/","title":"心理學概論 之 Chomsky"},{"text":"這邊是讀了書上內容的節錄和獨後自己查的資料 目前心得 : 可以看到一些觀念，但是有些例子就 ... (尤其是少部份有提到 Python 的) ch 14-1 - functional programming 是的沒錯，我第一個翻的章節是 chapter 14 ... Fortran 設計者為 John Backus (John Backus 還發明了 BNF)， 其在 1997 年 Turing Award 上發表的語言 \"FP\" 被認為是 Functional Programming 的起點 Feature: Higher-order function pure function (no side effect) Referential transparency Lisp Lisp 的基礎是 Alonzo Church 提的 lambda calculus，也支援 Higher-order function Lisp 具有一些 functional 的特性，但不是純粹的 functional Lisp 最大的特色是 S-expression 另一個特色是 list (LISP = LISt Processing)，Lisp 把節點稱為 cons cell， cons 是從建立新 cell 的 function : cons (construct) 而來， 而一開始的 Lisp 環境把第一個資料放在 address register，第二個放在 data register， 所以 car = content of address register、cdr = content of data register， 構成 list 的資料成為 atom (symbol or number) cons cell: car cdr Lisp 的 list 底下結構是 singly linked-list Haskell Haskell Curry 的 Combinatory logic 和 Alonzo Church 的 lambda calculus 幾乎相同的東西 Haskell feature: no side effect Higher-order function partial function application lazy evaluation type inference list comprehension block by indent Haskell 有靜態多型的型別系統和 type inference，可以在接近 duck typing 的情況下， 在編譯時完成 type checking OCaml OCaml 歷史比 Haskell 早，誕生於法國 和 Haskell 相比有些不同: has side effect no lazy evaluation module system OCaml 想要 lazy evaluation 時可以明確標示 Erlang Erlang 是為了平行處理而設計的，設計受到 Prolog 影響 dynamic type, no lazy evaluation 以 actor 理論為基礎 Ruby Block Proc object lambda enumerator What Is the Difference Between a Block, a Proc, and a Lambda in Ruby? [ 1 , 2 , 3 ]. each { | x | puts x * 2 } [ 1 , 2 , 3 ]. each do | x | puts x * 2 # block is everything between the do and end end lam = lambda { | x | puts x * 2 } [ 1 , 2 , 3 ]. each ( & lam ) p = Proc . new { | x | puts x * 2 } [ 1 , 2 , 3 ]. each ( & p ) # The '&' tells ruby to turn the proc into a block ch 14-2 Code Generation nothing ch 14-3 Memory Management 因為一些概念之前有看過了，所以這邊算是複習和加強 XD Garbage Collection 的誕生是在 1960 年代， 起因於 Lisp 需要產生大量 cons cell object，不能明確管理各個 object GC 衡量: GC 所佔的時間比例 Pause Time 平均 pause time 最長的 pause time no GC 例如 C 或 C++，programmer 自己管理 memory，自己 malloc/free、new/delete programmer 沒把程式寫好會造成: dangling pointer (因為把還在用的 free 掉了) memory leak (該 free 的沒 free 到) double free 要檢查這些問題可以使用 valgrind GC algorithm Algorithm Description Problem reference counting 用一數字紀錄被 reference 的次數，最容易實作 cycle reference 不適合平行處理 mark & sweep 把 trace 的到的 objects 做標記，沒標到的清掉 objects 量上升時，速度容易下降 mark & compact 把 trace 的到的 objects 做標記， 接著把標過的集合起來， 如此一來 memory 操作就有了區域性， 讓快取之類的機制效率提高 比 mark & sweep 慢 不能使用保守 GC copying 把還在用的複製一份到新的 memory 區域 (會分成新和舊)， 接著把舊區域整個清掉 Algorithm Description Generational 多數 objects 會在短時間內變成 garbage，所以可以用 age 做不同處理， 會分成 minor GC 和 major GC， 有 write barrier (紀錄 old object 裡用到 young object 的狀況，這紀錄稱為 remembered set) Conservative 在 C 這種本來沒有 GC 的語言，compile 後就沒有區分 integer 和 pointer 的資訊， 因為 CPU 不需要，這時可以使用 Conservative 實作，概念是 \"碰到 address 相同時， 代表可能被引用，視為存活\" (heap 會整個被掃過) Incremental 把 GC 操作切割，以降低每次 GC 的最長時間，也用了 write barrier Concurrent 機制和 Incremental GC 類似，利用 write barrier 維持狀態資訊，實作時也可能有專用的 GC thread Bitmap Marking Linux 這類 Unix-like 在 fork 時 memory addres 是 copy-on-write 的， 可以避免不必要的 page copy，但是和 GC 的搭配不太好，GC 在改動時就會大量複製， Bitmap Marking 就是用來降低複製 page 的次數，不時直接對 object 做標記， 而是有另外的空間用於標記，所以複製的只有標記用的 Bitmap ch 14-4 Ruby with C 介紹 Ruby 如何和 C 一起用 ch 14-5 Open Source Open Source 發展簡史","tags":"Misc","loc":"/posts/2014/10/pythoner-read-ruby-book-1/","title":"Pythoner 讀 「松本行弘的程式世界」 - part 1"},{"text":"剛剛碰巧看到一個 StackOverflow 上的回應 ， 原來 V8 的 team 和 HotSpot JVM 的有很大重複，還有其他像是 Self VM、Animorphic Smalltalk VM、OOVM 都是， 而其中的 tech lead 叫 Lars Bak。 Lars Bak 是 Dart 語言的創始人 (Dart 語言是 Google 想用來取代 Javascript 的一個語言) 也是 V8 和 Java HostSpot JVM 的領導，對於 VM 的技術有非常多的經驗，住在丹麥的 Aarhus 的農舍。 剛好有找到一篇報導，請見下面連結 The genius behind Google's browser 對岸翻譯版","tags":"Misc","loc":"/posts/2014/09/vm-people/","title":"People who make VMs"},{"text":"前情提要 - Pause Time 在 CPython 中使用的是 reference count，所以當 count 變成 0 時就必須把空間回收， 當一個巨大的 object 要被回收時，就會產生不小的 pause time，但是這個時間是 deterministic 的。 reference count 有個問題就是 reference cycle，為了找出 cycle 就必須爬過所有 objects， 但是這就會產生 nondeterministic GC pause。 reference count 是把回收的 cost 分開在各個時間點，而 tracing 的 GC 是把回收的 cost 集中在某一段時期， 回收所需時間可能不低，在這之中得把程式 pause，可能會讓使用者感覺到停頓， 而 Incremental GC 想做的就是把這段過程拆分成好幾個小步驟， 分別在不同時間執行 (打散)，讓程式執行更平順。 Ref 你丟我撿！神奇的 Firefox 內部記憶體回收機制 Incremental GC now in Firefox Aurora Incremental GC in Firefox 16! Incremental Garbage Collector in PyPy","tags":"Misc","loc":"/posts/2014/09/incremental-gc/","title":"Incremental Garbage Collector"},{"text":"原文章 : Generational Garbage Collection in Firefox 今天看到上面那篇 SpiderMonkey 的 Generational Garbage Collection 的文章， 就讀一讀理解一下並做些紀錄 Generational garbage collection Generational garbage collection 的核心觀念就是 \"大多數的物件的生命都很短\"， 所以就修改原本的 GC 設計，依照不同的存在時間有不同的處理方式， 對於 Tracing 的 GC 會需要去掃過物件來檢查是否有物件已經成為 Garbage， 當程式會製造出大量的物件時，檢查的時間就會上升，這時如果用已經存在的時間來區分， 而做不同的處理方式時，多數的短期物件就可以更快的被回收，也不必頻繁檢查會長期存在的物件。 原文章裡的 SpiderMonkey 利用了這種方式來讓 temporary objects 的 penalty 下降 Nursery & Tenured 多數的 objects 都會 allocate 到一個叫做 Nursery 的 memory region， 當 Nursery 滿的時候，只檢查 Nursery 裡的 objects，此時多數的 short-lived temporary objects 就會被清掉， 而這樣的檢查相對於原本 (檢查全部的 objects) 也來的快 此時，依然存活的 objects 就會被放到 Tenured region Tenured heap 仍然會回收 grabage，但是頻率會比 Nursery 來的低 最終然會需要原整的 GC，但是頻率也會比 Nursery GC 來的低 所以就分成下面這種情況 Garbage Collection Scan Place frequency speed minor GCs Nursery high fast major GCs full heap low slow memory region age Nursery young Tenured old Problem Tenured object 裡面可能有指向 Nursery object 的資料 (Nursery objects 因為某些 Tenured objects 而持續 alive) 解法一 掃過整個 Tenured heap 來找出指到 Nursery objects 的 pointer， 但是這麼做的話就違背了 GGC 的設計本意，所以需要更 cheap 的解決方案 解法二 先注意到，在 heap graph 中 Tenured 指向 Nursery 的 edges 不會存在很久， 因為接下來 minor GC 就會把 Nursery 中的 survivors 移到 Tenured heap 所以我們在意的是從上次 minor/major GC 後，有更動過的 Tenured objects， 而這些 objects 的數量相對來說就會比較少 因此我們做的是在更動 Tenured objects 時，檢查是否有 Nursery pointers， 如果有的話就把這些 cross-generational edges 紀錄到 store buffer ， 這樣的事情稱為 write barrier 在 minor GC 時，我們就跑過一遍 store buffer 裡的資料並且把裡面的 Nursery objects 標記為存在 (edge 的來源都需要被使用，因為當 Nursery objects 被標記為存在之後，將會移往 Tenured area， 所以原本的 Tenured (裡面有指向 Nursery 的 pointer) 也需要被 update minor GC 需要的執行時間決定於新 cross-generational edges 和 Nursery 裡的 objects 數量， 當然，追蹤 store buffer records 或是單純的檢查是否要新增 record 都會讓 normal heap access 有些許的效能損失， 所以某些 code 可能在 GGC 裡會變慢一些","tags":"GC","loc":"/posts/2014/09/ggc-spidermonkey/","title":"Generational Garbage Collection for SpiderMonkey"},{"text":"不能不提的 PEP8 Google Python Style Guide","tags":"Python","loc":"/posts/2014/09/python-coding-style/","title":"Python coding style"},{"text":"第一次碰這類的東西，做些筆記 XD edit distance edit distance = 更動多少次數後，兩字串會一樣 計算方式有很多種 Algorithm insertion deletion substitution transposition (換位) Hamming distance X X O X Longest Common Subsequence O O X X Levenshtein distance O O O X Damerau-Levenshtein distance O O O O Levenshtein distance http://en.wikipedia.org/wiki/Levenshtein_distance http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance Levenshtein distance 是用來評估兩 sequence 差別度的一種 string metric， 兩個字串的 Levenshtein distance 就是一個字串變成另一個字串的最小字元編輯次數 (insert, delete, substitute)， 由俄國科學家 Vladimir Levenshtein 在 1965 年提出 substitution : s a t -> s i t insertion : st -> s i t deletion : si a t -> sit 看一段簡單的 Python code 來了解運算: def lev ( a , b ): if not a : return len ( b ) if not b : return len ( a ) return min ( lev ( a [ 1 :], b [ 1 :]) + ( a [ 0 ] != b [ 0 ]), lev ( a [ 1 :], b ) + 1 , lev ( a , b [ 1 :]) + 1 ) 傳入 min function 的有 3 個， 第一個是兩邊都減一個字元，如果減去字元不一樣就把次數加 1 (substitute)， 第二個是 a 減去一個字元並且次數加一，這可以看成 a 字串的 delete 或是在 b 前面 insert 了和 a match 的字元， 第三個跟第二個雷同 當然，這個寫法很沒有效率，做了很多次不必要的遞迴，用 CPython (Python 3.4) 下去跑測試， 丟個簡單的字串當測試 lev('fasfasf', 'afvq') 這個做法大約要 1.9 ms 簡單地用 lru cache 來做 DP: from functools import lru_cache def lev ( a , b ): @lru_cache ( maxsize = None ) def _lev ( a , b ): if not a : return len ( b ) if not b : return len ( a ) return min ( _lev ( a [ 1 :], b [ 1 :]) + ( a [ 0 ] != b [ 0 ]), _lev ( a [ 1 :], b ) + 1 , _lev ( a , b [ 1 :]) + 1 ) return _lev ( a , b ) 利用 lru cache 來簡單地做 DP 後，剛剛的測試現在大約變成 370 µs 當然，還有很多改進空間，像是 自己實際寫 DP 判斷字串相同就直接回傳 0 (對於有很多相同子字串的情況可以用字串比對的 cost 換掉一些遞迴) 減去頭尾相同的子字串 如果要速度的話: python-Levenshtein ，C 寫的 Python extension，剛剛的測試丟下去大概會變成 300 ns 以內 計算的 cost 大約會是 O(len(a) * len(b))，所以在幫助 fuzzy string searching 的時候， 比較的字串同常會比較小，以便於提升速度 其他性質 lower bound : 兩字串的長度差 upper bound : 較長的字串的長度 只有當字串相等時會是 0 當字串長度相同時，Hamming distance 會是 Levenshtein distance 的 upper bound [三角不等式] 兩個字串的 Levenshtein distance 不會大於分別和第三個字串的 Levenshtein distance 的合 使用情境 spell checkers OCR assist natural language translation based on translation memory http://en.wikipedia.org/wiki/Record_linkage","tags":"Fuzzy","loc":"/posts/2014/09/levenshtein-distance/","title":"Levenshtein distance"},{"text":"Stackless Python 背後的由來以及現況 ~ 聽故事去","tags":"Python","loc":"/posts/2014/02/stackless-python/","title":"About Stackless Python"},{"text":"Chart.js 是利用 HTML5 的 canvas 去畫的， 而 Chart.js 這個 library 本身是 open source 的 (MIT license) ( Chart.js - github ) 所以到底要怎麼用呢？ 其實要用這個 library 很簡單， 首先要先把 Chart.js (或 Chart.min.js) include 進來 (這邊先用 CDN 上的做範例，要擺到自己機器上的再去修改 src) <script src= \"//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js\" ></script> 再來是要有畫布啦 ~ <canvas id= \"myChart\" width= \"400\" height= \"400\" ></canvas> 接著是給資料然後畫圖 ~ var data = [ { value : 30 , color : \"#F38630\" }, { value : 50 , color : \"#E0E4CC\" }, { value : 100 , color : \"#69D2E7\" } ]; //Get the context of the canvas element we want to select var ctx = document . getElementById ( \"myChart\" ). getContext ( \"2d\" ); var myNewChart = new Chart ( ctx ). Pie ( data ); var data = [ { value: 30, color:\"#F38630\" }, { value : 50, color : \"#E0E4CC\" }, { value : 100, color : \"#69D2E7\" } ]; var ctx = document.getElementById(\"myChart\").getContext(\"2d\"); var myNewChart = new Chart(ctx).Pie(data); Chart.js 目前有六種 Charts， 可以在 官方文件 看到相關的設定、資料格式， 每個 Chart 除了本身的資料外，還有一些 option 可以調整， 例如要不要 animation 啦、要不要顯示 label 啦 ... etc 六種 Chart Line Chart var data = { labels : [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\"], datasets : [ { fillColor : \"rgba(220,220,220,0.5)\", strokeColor : \"rgba(220,220,220,1)\", pointColor : \"rgba(220,220,220,1)\", pointStrokeColor : \"#fff\", data : [65,59,90,81,56,55,40] }, { fillColor : \"rgba(151,187,205,0.5)\", strokeColor : \"rgba(151,187,205,1)\", pointColor : \"rgba(151,187,205,1)\", pointStrokeColor : \"#fff\", data : [28,48,40,19,96,27,100] } ] }; var ctx = document.getElementById(\"LineChart\").getContext(\"2d\"); new Chart(ctx).Line(data); Bar Chart var data = { labels : [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\"], datasets : [ { fillColor : \"rgba(220,220,220,0.5)\", strokeColor : \"rgba(220,220,220,1)\", data : [65,59,90,81,56,55,40] }, { fillColor : \"rgba(151,187,205,0.5)\", strokeColor : \"rgba(151,187,205,1)\", data : [28,48,40,19,96,27,100] } ] }; var ctx = document.getElementById(\"BarChart\").getContext(\"2d\"); new Chart(ctx).Bar(data); Radar chart var data = { labels : [\"Eating\",\"Drinking\",\"Sleeping\",\"Designing\",\"Coding\",\"Partying\",\"Running\"], datasets : [ { fillColor : \"rgba(220,220,220,0.5)\", strokeColor : \"rgba(220,220,220,1)\", pointColor : \"rgba(220,220,220,1)\", pointStrokeColor : \"#fff\", data : [65,59,90,81,56,55,40] }, { fillColor : \"rgba(151,187,205,0.5)\", strokeColor : \"rgba(151,187,205,1)\", pointColor : \"rgba(151,187,205,1)\", pointStrokeColor : \"#fff\", data : [28,48,40,19,96,27,100] } ] }; var ctx = document.getElementById(\"RadarChart\").getContext(\"2d\"); new Chart(ctx).Radar(data); Polar area chart var data = [ { value : 30, color: \"#D97041\" }, { value : 90, color: \"#C7604C\" }, { value : 24, color: \"#21323D\" }, { value : 58, color: \"#9D9B7F\" }, { value : 82, color: \"#7D4F6D\" }, { value : 8, color: \"#584A5E\" } ]; var ctx = document.getElementById(\"PolarChart\").getContext(\"2d\"); new Chart(ctx).PolarArea(data); Pie chart var data = [ { value: 30, color:\"#F38630\" }, { value : 50, color : \"#E0E4CC\" }, { value : 100, color : \"#69D2E7\" } ]; var ctx = document.getElementById(\"PieChart\").getContext(\"2d\"); new Chart(ctx).Pie(data); Doughnut chart var data = [ { value: 30, color:\"#F7464A\" }, { value : 50, color : \"#E2EAE9\" }, { value : 100, color : \"#D4CCC5\" }, { value : 40, color : \"#949FB1\" }, { value : 120, color : \"#4D5360\" } ]; var ctx = document.getElementById(\"DoughnutChart\").getContext(\"2d\"); new Chart(ctx).Doughnut(data); Ref Chart.js","tags":"Misc","loc":"/posts/2014/02/chart-js/","title":"Chart.js 簡單的畫出 Chart"},{"text":"起手式 要建立自己的 template tags 之前，要先在一個 app 資料架底下建立 \"templatetags\" 資料夾， 如果這些 tags 是跟 app A 有關的話，那很理所當然可以放在 app A 資料夾下的 \"templatetags\"， 如果是比較不能區分的話，可以建立一個 app 專門放 template tags。 注意要有 __init__.py 來讓 Python 把這個資料夾當作 package 自製的 tags 和 filter 就放在 templatetags 資料夾底下的檔案， 檔案名字就是在 template 要 load 時的名字 結構可能長這樣: App/ __init__.py models.py templatetags/ __init__.py abc.py view.py 在 template 裡要用到 abc.py 這個檔案裡寫的 tags、filter 時， 就在 template 裡 \"{% load abc %}\" 有包含 custom tags 的 app 要加到 INSTALLED_APPS 裡 {% load %} 才會 work。 (security feature: 你可以在一台機器上裝多個 template libraries 而不讓它們可以 access 機器上的每個 Django 的程式) 鍛冶 要能製造出一個 valid 的 tag library 首先要有一個叫作 register 的 template.Library instance 所以開頭會長這樣 : from django import template register = template . Library () filters tags Ref Custom template tags and filters Django default tags & filters django/template/defaultfilters.py django/template/defaulttags.py","tags":"Django","loc":"/posts/2014/02/django-templatetags/","title":"自製 template tags 和 filters"},{"text":"一年半內除了學校的課程能學到些什麼？ 不多也不少，這樣而已 (想到什麼就紀錄些什麼吧) 起頭 2012 年夏，正值升大學的時期，雖然進了資工系，但其實什麼都還不會， 暑假期間開始常上 BBS，後來看到上面的色碼還有其他的控制碼覺得很有趣， 接著就開始在上面試了一下，然後又看到某人在上面搞出一堆神奇的東西 (?)， 再來是開到上面的 vim mode (當時還不會用 vim)， 這算是初步接觸到 vim 的地方之一吧 XD (另外是鳥哥寫的文章)。 之後拿到了社團 server 上的帳號，開始連進去亂試指令 w， 從此掉進無底的坑洞 (X，這時間大概有時候會翻翻鳥哥吧， 到了學校後開始接觸 FreeBSD， 就裝來玩玩看，翻翻 FreeBSD handbook，開始認識 configure、make、ports ... etc， 當時在 FreeBSD 上用的是 tcsh (因為社團 server 預設是 tcsh，所以先接觸到 XD)， 因為一些原因開始看怎麼寫 shell script (Bourne Shell 的)， 慢慢知道有 sed、awk 這些東西， 開始使用 regular expression (已經想不起來從哪個時間點開始了)。 寫到這裡開始回去翻以前寫在 BBS 的文章回想 XD 阿對一開始還去玩了 pi 的貪吃蛇 ~ 哦哦哦！BBS 上看到的有石頭文、guest 發文、... (?) 原來暑假就有翻過 regular expression，只是沒有碰到要使用的地方就不熟 XD， 後來有在用就比較 OK 了 ~ 喔對，BBS 有聊天指令 XD 看到移位碼就想起之前試一試發現， 原本應該擋掉的名片檔移位碼在我亂試的情況下發現有 bug XDDDD， 後來被 PO 到 sysop，之後又修掉了。 原來當初 9 月開始就有去過 PyHUG，但是當時完全不會 Python zzz 找到了 ~ 2012/10/17 拋棄 Windows，轉用 Linux ， 當時裝了 Ubuntu，DE 預設是 Unity，用沒多久後換成 Gnome 2，大概就這樣用了一學期。 寒假換成 LXDE 又用了一學期，中間好像有試過 Gnome 3 一陣子吧， 一下學期末把 WM 換成了 awesome wm，然後就離不開 awesome 一直到現在， 一下結束的暑假把 Ubuntu 換成了 Arch Linux ，變成 Arch Linux + awesome。 Vim 說到 Vim 啊 ... 一開始其實看到很多次，但是都沒有真的把它拿來用，所以不熟 zzz。 後來毅然決然把所有編輯純文字的東西都只用 vim ，一陣子後就習慣整個操作， 不過當時對 hjkl 的移動還不是很熟，索性在 .vimrc 裡把方向鍵 map 掉， 只用 hjkl 移動，後來也就習慣了。 一上結束的寒假稍微看了一下 .vimrc 的設定，調了一些東西和試了一些 plugin (雖然最後大多把 plugin 關了 XD)， 做的設定中幾個最常用到的是 paste mode 切換的快捷鍵、儲存時自動移除行尾多餘空白、下次開啟時回到關閉前的位置 ... etc。 plugin 部份的話用 Vundle 管理很方便，在加上一小段 script 後， 到新的地方只要打開 vim 就會自動裝好 vundle， 接著就可以利用 vundle 很快的把你的 plugin 裝起來， 利用 vundle 後 update plugin 也一樣只需要一個 command。 現在只要是純文字的東西我都用 vim，可以說是離不開了 XD，就連這篇文章也是我用 vim 打出來的 ~ Python 到底是從什麼時候開始比較常寫 Python 的我又忘了 (X 剛開始因為別人介紹，陸陸續續有看一點 Python 的東西，社課後知道了 list、tuple， 不過這時還是沒有在使用它，後來假期有人約讀書會所以看了 Python tutorial 的前部份。 一下結束後的暑假 (不知道是不是這個時期開始)，因為在跟高中同學打 game， 那遊戲在有人踩到紀錄點時會存資料在 host user， 而在某次遊戲中有人不小心在很糟糕的時間點踩到了， 結果只能回溯到那悲慘的時間點， 後來我就想說寫個程式讓他去 check 有新紀錄時就 backup 一次， 就開始用 Python 寫個小程式去 check， 東查西查，開始對 Python 變比較熟一點， 後來為了能一次 check 多個檔案又嘗試了 Python 的 multiprocessing， 而另一個同學則是去寫了簡單的 GUI， 在看了他的 code 並幫忙修改後，稍微對 Python 的 class 有點感覺了， 然後這也是我第一次使用內建的 tkinter 做簡單的 GUI。 之後開始愈來愈常寫 Python，慢慢的學會愈來愈多東西 XD 筆記 做筆記的方式嘛 ... 高中用過 Evernote 記了一點東西(不多)， 後來大一有陣子是 Google Docs + Markdown (本機)。 一下結束後的暑假聽到 Sphinx 這玩意， 看起來還不錯，也看到別人寫出來的東西， 所以就開始變成寫 reStructuredText 、用 Sphinx generate HTML， 不過 Markdown 也還是有再用 (這篇就是用 Markdown 寫的)， 所以目前是 Markdown & reStructuredText 亂用中 (X Version Control 我現在常用的 Version Control 是 git， 一開始也是不熟 (看了看還是沒常用)，後來把一些東西用 git 上去後， 變成只熟 add & commit (X，後來碰到一些狀況而對 checkout、push、partial add、cherry-pick、stash 比較熟一點， 目前是基本操作還 OK 啦 (自己說 mercurial ...，目前無緣 XD，只在別人教的時候試過一次，不過因為已經慣用 git 了，所以 ... XD cvs 只在抓 FreeBSD kernel source 的時候用過 zzz Linux 一個無底洞 (X 我掉進去後就再也出不來了 XD 因為已經太融入生活了，不知道該說什麼 ~ 現在用 Arch Linux 用的很開心 O w O 改天想到再補東西吧 ~ FreeBSD FreeBSD 的部份算是配合修課做了點基本的學習， 內容大概有 FTP、Samba、ZFS、FAMP (FreeBSD + Apache + MySQL + PHP)、 NFS、amd (Berkeley Automounter)、NIS、PF、NAT、DHCP、SSL/TLS、Proxy、DNS、Postfix ... 這些算是有基本的接觸過了 (有架出東西)，最不熟的大概是最後的 Mail Server 部份吧 zzz， 東西弄起來有點麻煩，最後交作業的時候 ClamAV 偵測病毒信件的部份沒弄好 = =。 以前課程有 VPN，修課的時候剛好沒有，想之後找時間架來玩玩。 HTML, CSS, Javascript 這邊要從一下結束的暑假開始， 社團決定大家要一起用 Django 寫社團網站， 這時候就開始摸索 Django 和認識基本的 HTML， 不過 CSS 部份是由另一位負責，所以沒接觸。 後來進 OH 去用 Django 改寫目前的網站， OH 原本的網站是套 Bootstrap 2，我在做新網站的時候改用了 Bootstrap 3， 接著就因為 Bootstrap 3 改了很多地方，所以要到處去修 Orz， 中間調樣式的時候開始認識一些 CSS 的東西， 某些地方因為用到 Javascript 所以也開始有了點接觸。 2014 2月，開始想用 GitHub Pages 來寫 blog， 於是開始使用 Pelican 這個 Python 寫的 static site generator， 因為可以用 Markdown 和 reStructuredText 所以可以很開心的用 vim 寫文章 ~~~ 在使用 Pelican 寫 blog 後，想說順便來試著自己寫個 theme 來看看， 所以就開始寫更多的 CSS，中間在調某些功能的時候用到了 Javascript， 所以也寫了一小段的 Javascript code。 Database Database 的話只會一點點簡單的 SQL 語法， 大多是寫東西需要去查的，用一用就知道了幾個， 只用過 SQLite、MySQL、MariaDB，不過都不熟就是了 XD， 因為碰到的東西重點都不是在調 Database， 很多都只是接上去而已。 C 說實話，C 其實只會些基本的東西，沒有很熟 XD 現在只想到好幾個月前在 Wikipedia 的 Multiple dispatch 頁面看到的 C code 感覺還蠻有趣的 (X C++ 一下的 OOP 課開始頻繁接觸 C++， 因為老師的課程安排，所以學了一些 C++11 的東西， 老師在 constructor 那部份講了好一陣子， 後來作業的關係寫了自己的 vector 和 list Orz， 還記得那時候在講 new，new operator、operator new、placement new ... 某次作業好像用到了 C++11 加進來的 lambda expression。 其實老師的講義寫了很多東西，只是我還沒能好好吸收起來 ...， 只好一定要好好補起來 = = Makefile 曾經在某陣子因為寫 C++ 作業的關係看了些 Makefile 的東西， 也寫了些簡單的 Makefile ...，不過現在差不多忘了 (X awk awk 好像寫過那麼一下 ... sed sed 好像在某次作業用過，還有自己寫的 shell script 裡用過， 不過基本上 ... 不熟 XD shell script (Bourne Shell) shell script 少數時候會因需求寫一點， 不過都是寫純 Bourne Shell 的 (X， Bash 的只有在 .bashrc 裡寫過 XD lua 接觸到 lua 是因為轉用 awesome wm 的關係 XD， awesome wm 的設定檔是用 lua 寫的， 所以改的時候會看到一些 lua 語法 ~， 前陣子在看 coroutine 的時候又看到用 lua 去說明的文章， 不過說那麼多其實還是沒在寫 lua XD (根本沒好好學過) Perl Perl 只有在寫作業 (irc bot、大量寄信程式、登入時間統計) 的時候用過， 寫完之後就沒用過了 (X，現在可以說是完全不會了 XD Functional Programming 有想要接觸 Functional 的東西耶 之後想找時間學 Haskell ~ (曾經在某天翻過，連基本的都差不多忘光了 XD 最近寫 Python 開始慢慢使用 lambda、filter、map、reduce (X","tags":"Misc","loc":"/posts/2014/02/recall-2012-summer-2014-spring/","title":"[回憶] 2012 年夏 ~ 2014 年春"},{"text":"有了 XMLHttpRequest 就讓我們可以利用 Javascript 去做 request 以下直接用一段 Javascript 去說明 var req = new XMLHttpRequest (); req . onreadystatechange = function (){ if ( req . readyState === 4 ){ alert ( req . responseText ); } } req . open ( 'GET' , \"test.html\" , true ); req . send ( null ); 首先是建立 XMLHttpRequest 物件，再來撰寫 readyState 改變時所要做的動作 ( onreadystatechange )， open method 去指定要做的 request，再來呼叫 send method 送出 在收到回應後，XMLHttpRequest 物件會設定的一些屬性 readyState 0 (UNSENT) The object has been constructed. 1 (OPENED) The open() method has been successfully invoked. During this state request headers can be set using setRequestHeader() and the request can be made using the send() method. 2 (HEADERS_RECEIVED) All redirects (if any) have been followed and all HTTP headers of the final response have been received. Several response members of the object are now available. 3 (LOADING) The response entity body is being received. 4 (DONE) The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects). 因此才在 onreadystatechange 裡做了 readyState 判斷， on readyState change 顧名思義就是 readyState 有變動時會去 call 這個 method， 所以加上 readyState 的判斷後變成只有處理完後 \"readyState 是 4 \" 時才做動作 Status 就是 HTTP 的 Status Code responseText 收到的內容 responseXML 收到的內容 (XML 格式) Ref XMLHttpRequest - MDN XMLHttpRequest - Wikipedia Ajax (programming)","tags":"Misc","loc":"/posts/2014/02/XMLHttpRequest/","title":"XMLHttpRequest"},{"text":"Closure 擁有非區域變數且非參數的變數 // Javascript function func () { var x = 10 ; function f ( y ) { return x + y ; } return f ; } var test = func (); func ( 10 ); // 20 func ( 5 ); // 15 這個例子可以看到 x 是個 func 的區域變數，但是在 f 當中又用到 x， 對於 f 來說 x 既不是區域變數又不是參數 # Python 3 def gen ( num ): def func ( inc ): nonlocal num print ( num + inc ) return func s = gen ( 10 ) s ( 2 ) # 12 s ( 5 ) # 15 Reference Closure (computer programming) - Wikipedia [JavaScript] Closure 概念 [Closure] JavaScript使用 Closure模擬出 Private Member JavaScript Essence: Closure","tags":"Misc","loc":"/posts/2014/02/closure/","title":"closure 概念"},{"text":"直接往下到 Reference 看別人寫的文章比較好 (X coroutine 是由 Melvin Conway 在 1960 年代所提出來 Coroutine 基本概念 Coroutine 可以視為 可以中斷及繼續執行的 function call 在程式語言中，通常這種中斷會用 yield 來表示，中斷時程式狀態會被保留，下次就恢復到該狀態繼續執行 Generator generator 又稱為 semicoroutine 雖然 generator 一樣可以中斷、繼續，但是 coroutine 可以指定從哪裡繼續執行，而 generator 不行，generator 只能回到上次中斷處 但是 coroutine 可以用 generator 實作出來 Coroutines in Python Improve Your Python: 'yield' and Generators Explained Tasks and coroutines Reference Coroutine: 入門篇 使用 Coroutine 實作 Iterator 使用 Coroutine 改寫狀態機 使用 Coroutine 改寫狀態機－續 使用 coroutine 實做 user-level thread Coroutine - wikipedia","tags":"Misc","loc":"/posts/2014/02/coroutine/","title":"coroutine 概念"},{"text":"在這邊先假設看這篇文章的都知道 decorator 在使用 decorator 時，若沒有經過處理，可能會造成 function 的 property 改變，例如: def test ( func ): \"\"\"this is in test function\"\"\" def haha (): \"\"\"this is in haha function\"\"\" print ( \"haha\" ) return haha @test def func1 (): \"\"\"this is in func1\"\"\" print ( \"func1\" ) print ( func1 . __name__ , ',' , func1 . __doc__ ) # OUTPUT : # haha , this is in haha function 可以看到 func1 的 __name__ 和 __doc__ 都改變了，這通常不是我們想要的，還有可能在 debug 的時候造成麻煩 因此 Python 有了 wraps 這個 decorator 去處理這個問題 (在 functools 裡) from functools import wraps def test ( func ): \"\"\"this is in test function\"\"\" @wraps ( func ) def haha (): \"\"\"this is in haha function\"\"\" print ( \"haha\" ) return haha @test def func1 (): \"\"\"this is in func1\"\"\" print ( \"func1\" ) print ( func1 . __name__ , ',' , func1 . __doc__ ) # OUTPUT : # func1 , this is in func1 可以看到，加上了 @wraps 後維持了 function 本來的 property ~","tags":"Python","loc":"/posts/2014/02/python-wraps/","title":"Python - @wraps"},{"text":"首先，什麼是 Pelican 呢？ Pelican 是個 Python 寫的靜態網站 generator， 你可以使用 Markdown, reStructuredText, AsciiDoc 等 markup language 作為撰寫的格式， 然後經由 Pelican 去生成靜態的網頁，經由這種方式，可以方便地使用你喜歡的文字編輯器去撰寫你的文章， 還可以結合 Version Control 去管理， 而由於生成的網頁是靜態的，所以可以放到 Github Pages 或者其他可以放置靜態網頁的地方去 Host，無疑是個很方便的模式。 Pelican 初步設定 Theme Disqus Support Pelican 要支援 Disqus 非常簡單，首先只要在你的 Disqus 新增好你的網站，獲得你的 Disqul url 後， 只要在你的 pelicanconf.py 裡新增 DISQUS_SITENAME = 'your-disqus-url' 即可： DISQUS_SITENAME = 'my-blog.disqus.com'","tags":"Python","loc":"/posts/2014/02/pelican/","title":"初次使用 Pelican"}]}